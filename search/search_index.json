{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041f\u043e\u0447\u0430\u0442\u043e\u043a","text":"<p>Matthub \u2014 \u0446\u0435 \u043e\u043d\u043b\u0430\u0439\u043d-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430, \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0430 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0432\u0438\u0432\u0447\u0435\u043d\u043d\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0456 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u0438\u043c \u0434\u043b\u044f \u0432\u0441\u0456\u0445. \u0412\u043e\u043d\u0430 \u043f\u0440\u043e\u043f\u043e\u043d\u0443\u0454 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u0456\u0432, \u044f\u043a\u0456 \u043e\u0445\u043e\u043f\u043b\u044e\u044e\u0442\u044c \u0440\u0456\u0437\u043d\u0456 \u0440\u0456\u0432\u043d\u0456 \u0437\u043d\u0430\u043d\u044c \u0456 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u0456 \u0442\u0435\u043c\u0438. \u0422\u0443\u0442 \u0432\u0438 \u0437\u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043d\u0430\u0432\u0447\u0430\u043b\u044c\u043d\u0456 \u0440\u0435\u0441\u0443\u0440\u0441\u0438, \u044f\u043a\u0456 \u0434\u043e\u043f\u043e\u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0430\u043c \u043a\u0440\u0430\u0449\u0435 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u0442\u0438 \u043e\u0441\u043d\u043e\u0432\u0438 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438, \u0442\u0430\u043a\u0456 \u044f\u043a \u0430\u043b\u0433\u0435\u0431\u0440\u0430, \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0456\u044f \u0442\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430, \u0430 \u0442\u0430\u043a\u043e\u0436 \u0431\u0456\u043b\u044c\u0448 \u0441\u043a\u043b\u0430\u0434\u043d\u0456 \u0442\u0435\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0430\u0431\u043e \u0442\u0435\u043e\u0440\u0456\u044f \u0439\u043c\u043e\u0432\u0456\u0440\u043d\u043e\u0441\u0442\u0435\u0439.</p> <p>Mathhub \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u0456 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u043d\u044f, \u0456\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0456 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438, \u0432\u0456\u0434\u0435\u043e\u0443\u0440\u043e\u043a\u0438 \u0442\u0430 \u0432\u043f\u0440\u0430\u0432\u0438, \u044f\u043a\u0456 \u0434\u043e\u043f\u043e\u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0430\u043c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u0432\u0430\u0442\u0438\u0441\u044f \u0456 \u0437\u0430\u043a\u0440\u0456\u043f\u043b\u044e\u0432\u0430\u0442\u0438 \u0437\u043d\u0430\u043d\u043d\u044f. \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0440\u043e\u0437\u0440\u043e\u0431\u043b\u0435\u043d\u0430 \u0442\u0430\u043a, \u0449\u043e\u0431 \u0431\u0443\u0442\u0438 \u043a\u043e\u0440\u0438\u0441\u043d\u043e\u044e \u044f\u043a \u0434\u043b\u044f \u0442\u0438\u0445, \u0445\u0442\u043e \u0442\u0456\u043b\u044c\u043a\u0438 \u043f\u043e\u0447\u0438\u043d\u0430\u0454 \u0432\u0438\u0432\u0447\u0430\u0442\u0438 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u0442\u0430\u043a \u0456 \u0434\u043b\u044f \u0442\u0438\u0445, \u0445\u0442\u043e \u0432\u0436\u0435 \u043c\u0430\u0454 \u043f\u0435\u0432\u043d\u0438\u0439 \u0440\u0456\u0432\u0435\u043d\u044c \u0437\u043d\u0430\u043d\u044c \u0456 \u0445\u043e\u0447\u0435 \u0457\u0445 \u043f\u043e\u0433\u043b\u0438\u0431\u0438\u0442\u0438.</p> <p>\u041d\u0430 mathhub \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u043d\u0430\u0439\u0442\u0438 \u0442\u0430\u043a\u043e\u0436 \u0440\u0456\u0437\u043d\u043e\u043c\u0430\u043d\u0456\u0442\u043d\u0456 \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438 \u0434\u043b\u044f \u0440\u043e\u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u043d\u043d\u044f \u0437\u0430\u0434\u0430\u0447 \u0456 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0438 \u0441\u0432\u043e\u0457\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0435\u0439. \u0426\u0435 \u0447\u0443\u0434\u043e\u0432\u0438\u0439 \u0440\u0435\u0441\u0443\u0440\u0441 \u0434\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432, \u0432\u0438\u043a\u043b\u0430\u0434\u0430\u0447\u0456\u0432 \u0456 \u0432\u0441\u0456\u0445, \u0445\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0446\u0456\u043a\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u043e\u044e \u0456 \u0445\u043e\u0447\u0435 \u043f\u043e\u043b\u0456\u043f\u0448\u0438\u0442\u0438 \u0441\u0432\u043e\u0457 \u043d\u0430\u0432\u0438\u0447\u043a\u0438.</p>"},{"location":"#where-to-start","title":"Where to Start","text":""},{"location":"#a-brief-history","title":"A Brief History","text":""},{"location":"#faq","title":"FAQ","text":""},{"location":"#what-is-mathhub","title":"What is mathhub","text":""},{"location":"#how-can-i-get-started","title":"How can I get started ?","text":""},{"location":"algebra/sets/","title":"\u041c\u043d\u043e\u0436\u0438\u043d\u0438. \u041e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u043d\u0430\u0434 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438. \u0412\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d. \u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d","text":""},{"location":"algebra/sets/#_2","title":"\u041c\u043d\u043e\u0436\u0438\u043d\u0430. \u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u043c\u043d\u043e\u0436\u0438\u043d","text":"<p>\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \u2013 \u0446\u0435 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u0442\u044f \u043d\u0435 \u043b\u0438\u0448\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438, \u0430 \u0439 \u0443\u0441\u044c\u043e\u0433\u043e \u043d\u0430\u0432\u043a\u043e\u043b\u0438\u0448\u043d\u044c\u043e\u0433\u043e \u0441\u0432\u0456\u0442\u0443. \u0412\u0456\u0437\u044c\u043c\u0456\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0437\u0430\u0440\u0430\u0437 \u0443 \u0440\u0443\u043a\u0443 \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442. \u041e\u0441\u044c \u0432\u0430\u043c \u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0430, \u0449\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430.</p> <p>\u0423 \u0448\u0438\u0440\u043e\u043a\u043e\u043c\u0443 \u0441\u0435\u043d\u0441\u0456, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u2013 \u0446\u0435 \u0441\u0443\u043a\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u043e\u0431'\u0454\u043a\u0442\u0456\u0432 (\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432), \u044f\u043a\u0456 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u044f\u043a \u0454\u0434\u0438\u043d\u0435 \u0446\u0456\u043b\u0435 (\u0437\u0430 \u0442\u0438\u043c\u0438 \u0447\u0438 \u0456\u043d\u0448\u0438\u043c\u0438 \u043e\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u043a\u0440\u0438\u0442\u0435\u0440\u0456\u044f\u043c\u0438 \u0430\u0431\u043e \u043e\u0431\u0441\u0442\u0430\u0432\u0438\u043d\u0430\u043c\u0438). \u041f\u0440\u0438\u0447\u043e\u043c\u0443, \u0446\u0435 \u043d\u0435 \u043b\u0438\u0448\u0435 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u044c\u043d\u0456 \u043e\u0431'\u0454\u043a\u0442\u0438, \u0430\u043b\u0435 \u0439 \u0431\u0443\u043a\u0432\u0438, \u0446\u0438\u0444\u0440\u0438, \u0442\u0435\u043e\u0440\u0435\u043c\u0438, \u0434\u0443\u043c\u043a\u0438, \u0435\u043c\u043e\u0446\u0456\u0457 \u0442\u043e\u0449\u043e.</p> <p>\u0417\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c\u0441\u044f \u0432\u0435\u043b\u0438\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0438\u043c\u0438 \u043b\u0456\u0442\u0435\u0440\u0430\u043c\u0438 \\( A, B, C, \\dots, X, Y, Z \\) (\u044f\u043a \u0432\u0430\u0440\u0456\u0430\u043d\u0442, \u0437 \u043f\u0456\u0434\u0440\u044f\u0434\u043a\u043e\u0432\u0438\u043c\u0438 \u0456\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438: \\( A_1, A_2, B_1 \\) \u0442\u043e\u0449\u043e), \u0430 \u0439\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u0437\u0430\u043f\u0438\u0441\u0443\u044e\u0442\u044c\u0441\u044f \u0443 \u0444\u0456\u0433\u0443\u0440\u043d\u0438\u0445 \u0434\u0443\u0436\u043a\u0430\u0445, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:</p> <ul> <li>\\( A = \\{\u0430, \u0431, \u0432, \u0433, \\dots, \u044c, \u044e, \u044f\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443;</li> <li>\\( N = \\{1, 2, 3, 4, \\dots\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b;</li> </ul> <p>\u041d\u0443 \u0449\u043e \u0436, \u043d\u0430\u0441\u0442\u0430\u0432 \u0447\u0430\u0441 \u0442\u0440\u043e\u0445\u0438 \u043f\u043e\u0437\u043d\u0430\u0439\u043e\u043c\u0438\u0442\u0438\u0441\u044c:</p> <ul> <li>\\( S_1 = \\{\\text{\u0410\u043d\u043d\u0430, \u0412\u0430\u043d\u044f, \u0422\u0430\u043d\u044f, \u041c\u0430\u0448\u0430, \u042e\u043b\u044f, \u0421\u0430\u0448\u0430}\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0432 1-\u043c\u0443 \u0440\u044f\u0434\u0443.</li> </ul> <p>...\u0406 \u044f \u0440\u0430\u0434\u0438\u0439 \u0431\u0430\u0447\u0438\u0442\u0438 \u0432\u0430\u0448\u0456 \u0441\u0435\u0440\u0439\u043e\u0437\u043d\u0456 \u0442\u0430 \u0437\u043e\u0441\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u0456 \u043e\u0431\u043b\u0438\u0447\u0447\u044f =)</p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0438 \\( A \\) \u0456 \\( S_1 \\) \u0454 \u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u043c\u0438 (\u0441\u043a\u043b\u0430\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0437 \u043a\u0456\u043d\u0446\u0435\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432), \u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( N \\) \u2013 \u0446\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u043e\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438. \u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u0432 \u0442\u0435\u043e\u0440\u0456\u0457 \u0456 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0446\u0456 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0442\u0430\u043a \u0437\u0432\u0430\u043d\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0430:</p> <ul> <li>\\( \\emptyset \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430, \u0432 \u044f\u043a\u0456\u0439 \u043d\u0435\u043c\u0430\u0454 \u0436\u043e\u0434\u043d\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430.</li> </ul> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0430\u043c \u0434\u043e\u0431\u0440\u0435 \u0432\u0456\u0434\u043e\u043c\u0438\u0439 \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( S_1 \\) \u043d\u0430 \u0456\u0441\u043f\u0438\u0442\u0456 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u043e \u0431\u0443\u0432\u0430\u0454 \u043f\u043e\u0440\u043e\u0436\u043d\u044c\u043e\u044e =)</p> <p>\u041d\u0430\u043b\u0435\u0436\u043d\u0456\u0441\u0442\u044c \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0437\u0430\u043f\u0438\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c \\( \\in \\), \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:</p> <ul> <li>\\( \u0454 \\in A \\) \u2013 \u0431\u0443\u043a\u0432\u0430 \"\u0454\" \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443;</li> <li>\\( \\epsilon \\notin A \\) \u2013 \u0431\u0443\u043a\u0432\u0430 \"\u0435\u043f\u0441\u0456\u043b\u043e\u043d\" \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443;</li> <li>\\( 5 \\in N \\) \u2013 \u0447\u0438\u0441\u043b\u043e 5 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b;</li> <li>\\( 5{,}5 \\notin N \\) \u2013 \u0430 \u043e\u0441\u044c \u0447\u0438\u0441\u043b\u043e 5,5 \u2013 \u0443\u0436\u0435 \u043d\u0456;</li> </ul> <p>\u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440 \\( \\notin S_1 \\) \u2013 \u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440 \u043d\u0435 \u0441\u0438\u0434\u0438\u0442\u044c \u0443 \u043f\u0435\u0440\u0448\u043e\u043c\u0443 \u0440\u044f\u0434\u0443 (\u0456 \u0442\u0438\u043c \u0431\u0456\u043b\u044c\u0448\u0435, \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\) \u0430\u0431\u043e \\( N \\) =) )</p> <p>\u0412 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0456\u0439 \u0456 \u043d\u0435 \u0434\u0443\u0436\u0435 \u0430\u043b\u0433\u0435\u0431\u0440\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c\u0441\u044f \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0438\u043c\u0438 \u043b\u0456\u0442\u0435\u0440\u0430\u043c\u0438 \\( a, b, c, \\dots, x, y, z \\), \u0456, \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e, \u0444\u0430\u043a\u0442 \u043d\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u0432 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u043c\u0443 \u0441\u0442\u0438\u043b\u0456:</p> <ul> <li>\\( x \\in X \\) \u2013 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \\( x \\) \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( X \\).</li> </ul> <p>\u041f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u0432\u0438\u0449\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0456 \u043f\u0440\u044f\u043c\u0438\u043c \u043f\u0435\u0440\u0435\u043b\u0456\u043a\u043e\u043c \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432, \u0430\u043b\u0435 \u0446\u0435 \u043d\u0435 \u0454\u0434\u0438\u043d\u0438\u0439 \u0441\u043f\u043e\u0441\u0456\u0431 \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0438: \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435 \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0442\u0438 \u0457\u0457 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043f\u0435\u0432\u043d\u043e\u0457 \u043e\u0437\u043d\u0430\u043a\u0438 (\u0432\u043b\u0430\u0441\u0442\u0438\u0432\u043e\u0441\u0442\u0456), \u044f\u043a\u0438\u0439 \u043f\u0440\u0438\u0442\u0430\u043c\u0430\u043d\u043d\u0438\u0439 \u0443\u0441\u0456\u043c \u0457\u0457 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:</p> <ul> <li>\\( N^* = \\{n \\in N \\mid n &lt; 100\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0432\u0441\u0456\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u043c\u0435\u043d\u0448\u0438\u0445 \u0437\u0430 \u0441\u0442\u043e.</li> </ul> <p>Info</p> <p>\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u0430 \u0440\u0438\u0441\u043a\u0430 \\( \\mid \\) \u0432\u0438\u0440\u0430\u0436\u0430\u0454 \u0441\u043b\u043e\u0432\u043e\u0441\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044f \"\u044f\u043a\u0456\", \"\u0442\u0430\u043a\u0438\u0445, \u0449\u043e\". \u0414\u043e\u0441\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u043e \u0437\u0430\u043c\u0456\u0441\u0442\u044c \u043d\u0435\u0457 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u0432\u043e\u043a\u0440\u0430\u043f\u043a\u0430: \\( N^* = \\{n \\in N : n &lt; 100\\} \\). \u0424\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0447\u0438\u0442\u0430\u0454\u0442\u044c\u0441\u044f \u044f\u043a: \"\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \\( N^* \\) \u2013 \u0446\u0435 \u0441\u0443\u043a\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u0442\u0430\u043a\u0438\u0445 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432, \u044f\u043a\u0456 \u043d\u0430\u043b\u0435\u0436\u0430\u0442\u044c \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( N \\) \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u0442\u0430\u043a\u0438\u0445, \u0449\u043e \\( n &lt; 100 \\)\". </p> <p>\u041c\u043e\u043b\u043e\u0434\u0446\u0456!</p> <p>\u0426\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u043c\u043e\u0436\u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0439 \u043f\u0440\u044f\u043c\u0438\u043c \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u0443\u0432\u0430\u043d\u043d\u044f\u043c:</p> <p>\\( N^* = \\{1, 2, 3, \\dots, 97, 98, 99\\} \\)</p> <p>\u0429\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438:</p> <p>\\( S_1 = \\{\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0438\\ \u0437\u0430\u0439\u043c\u0430\u044e\u0442\u044c\\ \u043c\u0456\u0441\u0446\u044f\\ \u0432\\ 1-\u043c\u0443\\ \u0440\u044f\u0434\u0443\\} \\) \u2013 \u0456 \u044f\u043a\u0449\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0432 1-\u043c\u0443 \u0440\u044f\u0434\u0443 \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e \u0431\u0430\u0433\u0430\u0442\u043e, \u0442\u043e \u0442\u0430\u043a\u0438\u0439 \u0437\u0430\u043f\u0438\u0441 \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435, \u043d\u0456\u0436 \u0457\u0445 \u043f\u0440\u044f\u043c\u0435 \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u0443\u0432\u0430\u043d\u043d\u044f.</p> <p>\\( O = \\{x \\mid 0 \\leq x \\leq 1\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0447\u0438\u0441\u0435\u043b, \u0449\u043e \u043d\u0430\u043b\u0435\u0436\u0430\u0442\u044c \u0432\u0456\u0434\u0440\u0456\u0437\u043a\u0443 \\([0, 1]\\). \u0417\u0432\u0435\u0440\u043d\u0456\u0442\u044c \u0443\u0432\u0430\u0433\u0443, \u0449\u043e \u0442\u0443\u0442 \u043c\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u0443\u0432\u0430\u0437\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b (\u043f\u0440\u043e \u043d\u0438\u0445 \u043f\u0456\u0437\u043d\u0456\u0448\u0435), \u044f\u043a\u0456 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u0443\u0432\u0430\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0443 \u0432\u0436\u0435 \u043d\u0435 \u043c\u043e\u0436\u043b\u0438\u0432\u043e.</p> <p>\u0421\u043b\u0456\u0434 \u0437\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u0438, \u0449\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043d\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0431\u0443\u0442\u0438 \"\u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u0438\u043c\u0438\" \u0447\u0438 \u043b\u043e\u0433\u0456\u0447\u043d\u043e \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0438\u043c\u0438. \u0412\u0456\u0437\u044c\u043c\u0456\u0442\u044c \u0432\u0435\u043b\u0438\u043a\u0438\u0439 \u043f\u0430\u043a\u0435\u0442 \u0456 \u043f\u043e\u0447\u043d\u0456\u0442\u044c \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0442\u0438 \u0432 \u043d\u044c\u043e\u0433\u043e \u0440\u0456\u0437\u043d\u0456 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0438. \u0423 \u0446\u044c\u043e\u043c\u0443 \u043d\u0435\u043c\u0430\u0454 \u043d\u0456\u044f\u043a\u043e\u0457 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0430\u043b\u0435, \u0442\u0438\u043c \u043d\u0435 \u043c\u0435\u043d\u0448, \u0439\u0434\u0435\u0442\u044c\u0441\u044f \u043f\u0440\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0456\u0432. \u0406\u043d\u0430\u043a\u0448\u0435 \u043a\u0430\u0436\u0443\u0447\u0438, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u2013 \u0446\u0435 \u0456 \u0454 \u0432\u0456\u0434\u043e\u043a\u0440\u0435\u043c\u043b\u0435\u043d\u0438\u0439 \"\u043f\u0430\u043a\u0435\u0442\", \u0443 \u044f\u043a\u043e\u043c\u0443 \"\u0432\u043e\u043b\u0435\u044e \u0434\u043e\u043b\u0456\" \u0432\u0438\u044f\u0432\u0438\u043b\u0430\u0441\u044f \u0434\u0435\u044f\u043a\u0430 \u0441\u0443\u043a\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u043e\u0431'\u0454\u043a\u0442\u0456\u0432.</p>"},{"location":"algebra/sets/#_3","title":"\u041f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0438","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e \u0432\u0441\u0435 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e \u0432\u0436\u0435 \u0437 \u0441\u0430\u043c\u043e\u0457 \u043d\u0430\u0437\u0432\u0438: \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( G' \\) \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( A \\), \u044f\u043a\u0449\u043e \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( G' \\) \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\). \u0406\u043d\u0430\u043a\u0448\u0435 \u043a\u0430\u0436\u0443\u0447\u0438, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( G' \\) \u043c\u0456\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\):</p> \\[ G' \\subseteq A \\] <p>\u0417\u043d\u0430\u043a \\( \\subseteq \\) \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u0437\u043d\u0430\u043a\u043e\u043c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f.</p> <p>\u041f\u043e\u0432\u0435\u0440\u043d\u0456\u043c\u043e\u0441\u044f \u0434\u043e \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443, \u0432 \u044f\u043a\u043e\u043c\u0443 \\( A \\) \u2013 \u0446\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443. \u041f\u043e\u0437\u043d\u0430\u0447\u0438\u043c\u043e \u0447\u0435\u0440\u0435\u0437 \\( G \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0439\u043e\u0433\u043e \u0433\u043e\u043b\u043e\u0441\u043d\u0438\u0445 \u0431\u0443\u043a\u0432. \u0422\u043e\u0434\u0456:</p> \\[ G \\subseteq A \\] <p>\u0422\u0430\u043a\u043e\u0436 \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u0434\u0456\u043b\u0438\u0442\u0438 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u043f\u0440\u0438\u0433\u043e\u043b\u043e\u0441\u043d\u0438\u0445 \u0431\u0443\u043a\u0432 \u0456 \u0432\u0437\u0430\u0433\u0430\u043b\u0456 \u2013 \u0434\u043e\u0432\u0456\u043b\u044c\u043d\u0443 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0443, \u0449\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 (\u0430\u043b\u0435 \u043d\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u044c\u043e\u0457) \u0432\u0437\u044f\u0442\u0438\u0445 \u043a\u0438\u0440\u0438\u043b\u0438\u0447\u043d\u0438\u0445 \u0431\u0443\u043a\u0432. \u0406, \u043e\u0442\u0436\u0435, \u0431\u0443\u0434\u044c-\u044f\u043a\u0430 \u0431\u0443\u043a\u0432\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0456 \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( A \\).</p> <p>\u0412\u0437\u0430\u0454\u043c\u043e\u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044f \u043c\u0456\u0436 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438 \u0437\u0440\u0443\u0447\u043d\u043e \u0437\u043e\u0431\u0440\u0430\u0436\u0443\u0432\u0430\u0442\u0438 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0443\u043c\u043e\u0432\u043d\u043e\u0457 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0457 \u0441\u0445\u0435\u043c\u0438, \u044f\u043a\u0430 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043a\u0440\u0443\u0433\u0430\u043c\u0438 \u0415\u0439\u043b\u0435\u0440\u0430.</p> <p>\u041d\u0435\u0445\u0430\u0439 \\( S \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0443 1-\u043c\u0443 \u0440\u044f\u0434\u0443, \\( U \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0433\u0440\u0443\u043f\u0438, \\( U = S \\cup S' \\), \u0434\u0435 \\( S' \\) \u2013 \u0456\u043d\u0448\u0456 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0438 \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0443. \u0422\u043e\u0434\u0456 \u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \\( S \\subseteq U \\) \u043c\u043e\u0436\u043d\u0430 \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c:</p> <p></p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0456\u043d\u0448\u043e\u0433\u043e \u0412\u041d\u0417 \u0441\u043b\u0456\u0434 \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0438 \u043a\u0440\u0443\u0433\u043e\u043c, \u044f\u043a\u0438\u0439 \u043d\u0435 \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0430\u0454 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u0454 \u043a\u043e\u043b\u043e; \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u043a\u0440\u0430\u0457\u043d\u0438 \u2013 \u043a\u0440\u0443\u0433\u043e\u043c, \u044f\u043a\u0438\u0439 \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0443 \u0441\u043e\u0431\u0456 \u043e\u0431\u0438\u0434\u0432\u0430 \u0446\u0456 \u043a\u043e\u043b\u0430, \u0456 \u0442. \u0434.</p> <p>\u0422\u0438\u043f\u043e\u0432\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u043c\u0438 \u0441\u043f\u043e\u0441\u0442\u0435\u0440\u0456\u0433\u0430\u0454\u043c\u043e \u043f\u0440\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u0438\u0445 \u043c\u043d\u043e\u0436\u0438\u043d. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u043c\u043e \u0448\u043a\u0456\u043b\u044c\u043d\u0438\u0439 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b, \u044f\u043a\u0438\u0439 \u0432\u0430\u0436\u043b\u0438\u0432\u043e \u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u043d\u0430 \u0443\u0432\u0430\u0437\u0456 \u043f\u0456\u0434 \u0447\u0430\u0441 \u0432\u0438\u0432\u0447\u0435\u043d\u043d\u044f \u0432\u0438\u0449\u043e\u0457 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438:</p>"},{"location":"algebra/sets/#_4","title":"\u0427\u0438\u0441\u043b\u043e\u0432\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438","text":"<p>\u042f\u043a \u0432\u0456\u0434\u043e\u043c\u043e, \u0456\u0441\u0442\u043e\u0440\u0438\u0447\u043d\u043e \u043f\u0435\u0440\u0448\u0438\u043c\u0438 \u0437'\u044f\u0432\u0438\u043b\u0438\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0456 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0434\u043b\u044f \u043f\u0456\u0434\u0440\u0430\u0445\u0443\u043d\u043a\u0443 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u043e\u0431'\u0454\u043a\u0442\u0456\u0432 (\u043b\u044e\u0434\u0435\u0439, \u043a\u0443\u0440\u0435\u0439, \u0434\u0443\u0431\u0456\u0432, \u043c\u043e\u043d\u0435\u0442 \u0442\u043e\u0449\u043e). \u0426\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0432\u0436\u0435 \u0437\u0443\u0441\u0442\u0440\u0456\u043b\u043e\u0441\u044f \u0432 \u0441\u0442\u0430\u0442\u0442\u0456, \u0454\u0434\u0438\u043d\u0435, \u0449\u043e \u0437\u0430\u0440\u0430\u0437 \u0442\u0440\u043e\u0445\u0438-\u0447\u0443\u0442\u044c \u0437\u043c\u0456\u043d\u044e\u0454\u043c\u043e \u0439\u043e\u0433\u043e \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0421\u043f\u0440\u0430\u0432\u0430 \u0432 \u0442\u043e\u043c\u0443, \u0449\u043e \u0446\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u043e \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u0442\u0438 \u0436\u0438\u0440\u043d\u0438\u043c\u0438, \u0441\u0442\u0438\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u043c\u0438 \u0430\u0431\u043e \u0441\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438. \u041d\u0430\u043c \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0436\u0438\u0440\u043d\u0438\u0439 \u0448\u0440\u0438\u0444\u0442:</p> <p>\\( \\mathbb{N} = \\{1, 2, 3, 4, 5, \\dots\\} \\)</p> <p>\u0406\u043d\u043e\u0434\u0456 \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0456\u0434\u043d\u043e\u0441\u044f\u0442\u044c \u043d\u0443\u043b\u044c.</p> <p>\u042f\u043a\u0449\u043e \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{N} \\) \u0434\u043e\u0434\u0430\u0442\u0438 \u0442\u0456 \u0436 \u0447\u0438\u0441\u043b\u0430 \u0437 \u043f\u0440\u043e\u0442\u0438\u043b\u0435\u0436\u043d\u0438\u043c \u0437\u043d\u0430\u043a\u043e\u043c \u0456 \u043d\u0443\u043b\u044c, \u0442\u043e \u0432\u0438\u0439\u0434\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> <p>\\( \\mathbb{Z} = \\{\\dots, -3, -2, -1, 0, 1, 2, 3, \\dots\\} \\), \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u0456\u0437\u0430\u0442\u043e\u0440\u0438 \u0456 \u043b\u0435\u0434\u0430\u0440\u0456 \u0437\u0430\u043f\u0438\u0441\u0443\u044e\u0442\u044c \u0439\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u0437\u0456 \u0437\u043d\u0430\u0447\u043a\u0430\u043c\u0438 \u00ab\u043f\u043b\u044e\u0441 \u043c\u0456\u043d\u0443\u0441\u00bb))</p> <p>\\( \\mathbb{Z} = \\{0, \\pm 1, \\pm 2, \\pm 3, \\dots\\} \\)</p> <p>\u0426\u0456\u043b\u043a\u043e\u043c \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u0449\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> <p>\\( \\mathbb{N} \\subset \\mathbb{Z} \\) \u2013 \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{N} \\) \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{Z} \\). \u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u0441\u043c\u0456\u043b\u0438\u0432\u043e \u043d\u0430\u0437\u0432\u0430\u0442\u0438 \u0446\u0456\u043b\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.</p> <p>\u041d\u0430\u0437\u0432\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0442\u0435\u0436 \u00ab\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u00bb: \u0446\u0456\u043b\u0456 \u0447\u0438\u0441\u043b\u0430 \u2013 \u0446\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u044c, \u043d\u0456\u044f\u043a\u0438\u0445 \u0434\u0440\u043e\u0431\u0456\u0432.</p> <p>\u0406 \u044f\u043a\u0449\u043e \u0432\u0436\u0435 \u043f\u0440\u043e \u0446\u0456\u043b\u0456, \u0442\u043e \u043e\u0434\u0440\u0430\u0437\u0443 \u0436 \u0437\u0433\u0430\u0434\u0430\u0454\u043c\u043e \u0432\u0430\u0436\u043b\u0438\u0432\u0456 \u043e\u0437\u043d\u0430\u043a\u0438 \u0457\u0445 \u043f\u043e\u0434\u0456\u043b\u044c\u043d\u043e\u0441\u0442\u0456 \u043d\u0430 2, 3, 4, 5 \u0456 10, \u044f\u043a\u0456 \u0434\u043e\u043f\u043e\u043c\u0430\u0433\u0430\u044e\u0442\u044c \u0440\u043e\u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u0442\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u0456 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0432\u0430\u043b\u044c\u043d\u0456 \u0437\u0430\u0434\u0430\u0447\u0456 \u0447\u0438 \u043d\u0435 \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u0434\u043d\u044f:</p> <p>\u0426\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 2 \u0431\u0435\u0437 \u0437\u0430\u043b\u0438\u0448\u043a\u0443, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u043e \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430 0, 2, 4, 6 \u0430\u0431\u043e 8 (\u0442\u043e\u0431\u0442\u043e \u043d\u0430 \u0431\u0443\u0434\u044c-\u044f\u043a\u0443 \u043f\u0430\u0440\u043d\u0443 \u0446\u0438\u0444\u0440\u0443). \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0447\u0438\u0441\u043b\u0430:</p> <ul> <li>-160, -1502, -24, 66996, 818 \u2013 \u0434\u0456\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0430 2 \u0431\u0435\u0437 \u0437\u0430\u043b\u0438\u0448\u043a\u0443.</li> </ul> <p>\u0406 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0436 \u043e\u0434\u0440\u0430\u0437\u0443 \u0437\u0433\u0430\u0434\u0430\u0454\u043c\u043e \u0449\u0435 \u043e\u0434\u0438\u043d \u00ab\u0441\u043f\u043e\u0440\u0456\u0434\u043d\u0435\u043d\u0438\u0439\u00bb \u043f\u0440\u0438\u0437\u043d\u0430\u043a: \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4, \u044f\u043a\u0449\u043e \u0447\u0438\u0441\u043b\u043e, \u0441\u043a\u043b\u0430\u0434\u0435\u043d\u0435 \u0437 \u0434\u0432\u043e\u0445 \u0439\u043e\u0433\u043e \u043e\u0441\u0442\u0430\u043d\u043d\u0456\u0445 \u0446\u0438\u0444\u0440 (\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0457\u0445 \u0441\u043b\u0456\u0434\u0443\u0432\u0430\u043d\u043d\u044f), \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4.</p> <ul> <li>400 \u2013 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 00 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4);</li> <li>24 \u2013 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 24 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4);</li> <li>-96 \u2013 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 96 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4);</li> <li>818 \u2013 \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 18 \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4).</li> </ul> <p>\u0421\u0430\u043c\u043e\u0441\u0442\u0456\u0439\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0456\u0442\u044c \u043d\u0435\u0441\u043a\u043b\u0430\u0434\u043d\u0435 \u043e\u0431\u0491\u0440\u0443\u043d\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0446\u044c\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0443.</p> <p>\u0417 \u043f\u043e\u0434\u0456\u043b\u044c\u043d\u0456\u0441\u0442\u044e \u043d\u0430 3 \u0442\u0440\u043e\u0445\u0438 \u0441\u043a\u043b\u0430\u0434\u043d\u0456\u0448\u0435: \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0431\u0435\u0437 \u0437\u0430\u043b\u0438\u0448\u043a\u0443, \u044f\u043a\u0449\u043e \u0441\u0443\u043c\u0430 \u0446\u0438\u0444\u0440, \u0449\u043e \u0432\u0445\u043e\u0434\u044f\u0442\u044c \u0434\u043e \u043d\u044c\u043e\u0433\u043e, \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3.</p> <p>\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u043c\u043e, \u0447\u0438 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0447\u0438\u0441\u043b\u043e \\( 27901 \\). \u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u0443\u0454\u043c\u043e \u0439\u043e\u0433\u043e \u0446\u0438\u0444\u0440\u0438: \\( 2 + 7 + 9 + 0 + 1 = 19 \\) \u2014 \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a: \\( 27901 \\) \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3</p> <p>\u041f\u0440\u043e\u0441\u0443\u043c\u0443\u0454\u043c\u043e \u0446\u0438\u0444\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \\(-825432\\): \\( 8 + 2 + 5 + 4 + 3 + 2 = 24 \\) \u2014 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a: \\(-825432\\) \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3</p> <p>\u0426\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 5, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u043e \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u043f'\u044f\u0442\u0456\u0440\u043a\u043e\u044e \u0430\u0431\u043e \u043d\u0443\u043b\u0435\u043c: \\( 775, -2390 \\) \u2014 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 5</p> <p>\u0426\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 10, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u043e \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0443\u043b\u044c: \\( 798400 \\) \u2014 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 10 (\u0456, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043d\u0430 100). \u041d\u0443 \u0456, \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u043e, \u043d\u0435 \u0437\u0430\u0431\u0443\u0432\u0430\u0439\u0442\u0435, \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u043f\u043e\u0434\u0456\u043b\u0438\u0442\u0438 \u043d\u0430 10, \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0438\u0431\u0440\u0430\u0442\u0438 \u043e\u0434\u0438\u043d \u043d\u0443\u043b\u044c: \\( 79840 \\)</p> <p>\u0422\u0430\u043a\u043e\u0436 \u0456\u0441\u043d\u0443\u044e\u0442\u044c \u043e\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u0434\u0456\u043b\u044c\u043d\u043e\u0441\u0442\u0456 \u043d\u0430 6, 8, 9, 11 \u0442\u043e\u0449\u043e, \u0430\u043b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0441\u0435\u043d\u0441\u0443 \u0432\u0456\u0434 \u043d\u0438\u0445 \u043c\u0430\u0439\u0436\u0435 \u043d\u0435\u043c\u0430\u0454 =)</p> <p>\u0421\u043b\u0456\u0434 \u0437\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u0438, \u0449\u043e \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043e\u0437\u043d\u0430\u043a\u0438 (\u0437\u0434\u0430\u0454\u0442\u044c\u0441\u044f, \u0442\u0430\u043a\u0456 \u043f\u0440\u043e\u0441\u0442\u0456) \u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0432\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u043e\u0440\u0456\u0457 \u0447\u0438\u0441\u0435\u043b. \u0426\u0435\u0439 \u0440\u043e\u0437\u0434\u0456\u043b \u0430\u043b\u0433\u0435\u0431\u0440\u0438 \u0432\u0437\u0430\u0433\u0430\u043b\u0456 \u0434\u043e\u0441\u0438\u0442\u044c \u0446\u0456\u043a\u0430\u0432\u0438\u0439, \u043e\u0434\u043d\u0430\u043a \u0439\u043e\u0433\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0438... \u043f\u0440\u044f\u043c\u043e \u0441\u0443\u0447\u0430\u0441\u043d\u0430 \u043a\u0438\u0442\u0430\u0439\u0441\u044c\u043a\u0430 \u043a\u0430\u0440\u0430 =) \u0410 \u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440\u0443 \u0437\u0430 \u043e\u0441\u0442\u0430\u043d\u043d\u044c\u043e\u044e \u043f\u0430\u0440\u0442\u043e\u044e \u0456 \u0442\u043e\u0433\u043e \u0432\u0438\u0441\u0442\u0430\u0447\u0438\u043b\u043e..., \u0430\u043b\u0435 \u043d\u0456\u0447\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u0448\u043d\u043e\u0433\u043e, \u0441\u043a\u043e\u0440\u043e \u043c\u0438 \u0437\u0430\u0439\u043c\u0435\u043c\u043e\u0441\u044f \u0446\u0456\u043a\u0430\u0432\u0438\u043c\u0438 \u0444\u0456\u0437\u0438\u0447\u043d\u0438\u043c\u0438 \u0432\u043f\u0440\u0430\u0432\u0430\u043c\u0438 =)</p> <p>\u041d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[ Q = \\left\\{ \\frac{m}{n} \\middle| m \\in \\mathbb{Z}, n \\in \\mathbb{N} \\right\\} \\] <p>\u2014 \u0442\u043e\u0431\u0442\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0435 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0434\u0440\u043e\u0431\u0443 \\( \\frac{m}{n} \\), \u0434\u0435 \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043a \u0454 \u0446\u0456\u043b\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c, \u0430 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u043c.</p> <p>\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0449\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[ \\mathbb{N} \\subset \\mathbb{Z} \\subset Q \\] <p>\u0406 \u043d\u0430\u0441\u043f\u0440\u0430\u0432\u0434\u0456 \u0442\u0430\u043a \u2014 \u0430\u0434\u0436\u0435 \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0440\u043e\u0431\u0443:</p> <p>\\( 2 = \\frac{2}{1}, \\quad -2 = \\frac{-2}{1}, \\quad \\frac{5}{1} = 5 \\)</p> <p>\u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u0431\u0435\u0437 \u0432\u0430\u0433\u0430\u043d\u044c \u043d\u0430\u0437\u0438\u0432\u0430\u0442\u0438 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.</p> <p>\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u043e\u044e \u00ab\u0432\u043f\u0456\u0437\u043d\u0430\u0432\u0430\u043d\u043e\u044e\u00bb \u043e\u0437\u043d\u0430\u043a\u043e\u044e \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0454 \u0442\u0435, \u0449\u043e \u043f\u0440\u0438 \u0434\u0456\u043b\u0435\u043d\u043d\u0456 \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043a\u0430 \u043d\u0430 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u0442\u044c\u0441\u044f \u0430\u0431\u043e \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e:</p> <p>\\( \\frac{6}{2} = 3 \\) \u2014 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e,  \u0430\u0431\u043e  \\( \\frac{3}{8} = 0.375 \\) \u2014 \u043a\u0456\u043d\u0446\u0435\u0432\u0438\u0439 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u0438\u0439 \u0434\u0440\u0456\u0431,  \u0430\u0431\u043e \\( \\frac{7}{11} = 0.636363... \\) \u2014 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u0439 \u043f\u0435\u0440\u0456\u043e\u0434\u0438\u0447\u043d\u0438\u0439 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u0438\u0439 \u0434\u0440\u0456\u0431 (\u043f\u043e\u0432\u0442\u043e\u0440 \u043c\u043e\u0436\u0435 \u043f\u043e\u0447\u0430\u0442\u0438\u0441\u044f \u043d\u0435 \u043e\u0434\u0440\u0430\u0437\u0443).</p> <p>\u0421\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0439\u0442\u0435\u0441\u044f \u0434\u0456\u043b\u0435\u043d\u043d\u044f\u043c \u0456 \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044f \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u0446\u0435 \u044f\u043a \u043c\u043e\u0436\u043d\u0430 \u0440\u0456\u0434\u0448\u0435!  \u0423 \u0432\u0438\u0449\u0456\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0446\u0456 \u0432\u0441\u0456 \u0434\u0456\u0457 \u043f\u0440\u0430\u0433\u043d\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u0432 \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u0445 (\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0445 \u0442\u0430 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0445) \u0434\u0440\u043e\u0431\u0430\u0445.</p> <p>\u0417\u0433\u043e\u0434\u044c\u0442\u0435\u0441\u044f, \u0449\u043e \u043c\u0430\u0442\u0438 \u0441\u043f\u0440\u0430\u0432\u0443 \u0437 \u0434\u0440\u043e\u0431\u043e\u043c \\( \\frac{3}{8} \\) \u0437\u043d\u0430\u0447\u043d\u043e \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435, \u043d\u0456\u0436 \u0437 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c 0,375 (\u043d\u0435 \u043a\u0430\u0436\u0443\u0447\u0438 \u0432\u0436\u0435 \u043f\u0440\u043e \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0456 \u0434\u0440\u043e\u0431\u0438).</p> <p>\u0410\u043b\u0435 \u0434\u0430\u043b\u0456. \u041e\u043a\u0440\u0456\u043c \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0456\u0441\u043d\u0443\u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( I \\) \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0436\u043d\u0435 \u0437 \u044f\u043a\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u043e\u0457 \u041d\u0415\u043f\u0435\u0440\u0456\u043e\u0434\u0438\u0447\u043d\u043e\u0457 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u043e\u0457 \u0434\u0440\u043e\u0431\u0438. (\u041e\u0441\u043e\u0431\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u0446\u0438\u0445 \"\u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u0445 \u0445\u0432\u043e\u0441\u0442\u0456\u0432\" \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u043c\u0430\u0454 \u043d\u0456\u044f\u043a\u043e\u0457 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456):</p> \\[ \\pi = 3,1415926535..., \\quad e = 2,7182818284...,  \\quad \\sqrt{2} = 1,414213562... \\] <p>\u0456 \u0442.\u0434.</p> <p>\u041f\u0440\u043e \u0437\u043d\u0430\u043c\u0435\u043d\u0438\u0442\u0456 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438 \"\u043f\u0456\" \u0456 \"\u0435\" \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0457 \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e, \u0442\u043e\u043c\u0443 \u043d\u0430 \u043d\u0438\u0445 \u044f \u043d\u0435 \u0437\u0443\u043f\u0438\u043d\u044f\u044e\u0441\u044f.</p> <p>\u041e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0456 \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0443\u0442\u0432\u043e\u0440\u044e\u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 (\u0440\u0435\u0447\u043e\u0432\u0438\u043d\u043d\u0438\u0445) \u0447\u0438\u0441\u0435\u043b:</p> \\[ Q \\cup I = \\mathbb{R} \\] <p>\\(\\cup\\) \u2014 \u0437\u043d\u0430\u043a \u043e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d.</p> <p>\u0413\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430 \u0456\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0456\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{R} \\) \u0432\u0430\u043c \u0434\u043e\u0431\u0440\u0435 \u0437\u043d\u0430\u0439\u043e\u043c\u0430 \u2014 \u0446\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u0430 \u043f\u0440\u044f\u043c\u0430:</p> <p></p> <p>\u041a\u043e\u0436\u043d\u043e\u043c\u0443 \u0434\u0456\u0439\u0441\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u043f\u0435\u0432\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0457 \u043f\u0440\u044f\u043c\u043e\u0457, \u0456 \u043d\u0430\u0432\u043f\u0430\u043a\u0438 \u2014 \u043a\u043e\u0436\u043d\u0456\u0439 \u0442\u043e\u0447\u0446\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0457 \u043f\u0440\u044f\u043c\u043e\u0457 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0434\u0435\u044f\u043a\u0435 \u0434\u0456\u0439\u0441\u043d\u0435 \u0447\u0438\u0441\u043b\u043e. \u041f\u043e \u0441\u0443\u0442\u0456, \u0437\u0430\u0440\u0430\u0437 \u044f \u0441\u0444\u043e\u0440\u043c\u0443\u043b\u044e\u044e \u0432\u043b\u0430\u0441\u0442\u0438\u0432\u0456\u0441\u0442\u044c \u043d\u0435\u043f\u0435\u0440\u0435\u0440\u0432\u043d\u043e\u0441\u0442\u0456 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0435 \u0445\u043e\u0447 \u0456 \u0437\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0438\u043c, \u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u0443\u0440\u0441\u0456 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443.</p> <p>\u0427\u0438\u0441\u043b\u043e\u0432\u0443 \u043f\u0440\u044f\u043c\u0443 \u0442\u0430\u043a\u043e\u0436 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u043c \u0456\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \\((-\\infty; +\\infty)\\), \u0430 \u0437\u0430\u043f\u0438\u0441 \\(x \\in \\mathbb{R}\\) \u0430\u0431\u043e \u0436 \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0430 \u0457\u0439 \u0437\u0430\u043f\u0438\u0441 \\(x \\in \\mathbb{R}\\) \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0437\u0443\u0454 \u0442\u043e\u0439 \u0444\u0430\u043a\u0442, \u0449\u043e \\(x\\) \u0454 \u043e\u0434\u043d\u0438\u043c \u0437 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043d\u0438\u043a\u0456\u0432 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b (\u0430\u0431\u043e, \u0456\u043d\u0448\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u2014 \u0434\u0456\u0439\u0441\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c).</p> <p>\u0417 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u0437\u043e\u0440\u043e: \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u0446\u0435 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[ \\mathbb{N} \\subset \\mathbb{Z} \\subset \\mathbb{Q} \\subset \\mathbb{R} \\] <p>\u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u0441\u043c\u0456\u043b\u0438\u0432\u043e \u043d\u0430\u0437\u0432\u0430\u0442\u0438 \u0456 \u0434\u0456\u0439\u0441\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.</p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u0446\u0435 \u0442\u0435\u0436 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[ I \\subset \\mathbb{R} \\] <p>\u041f\u0440\u0438 \u0446\u044c\u043e\u043c\u0443 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\(Q\\) \u0456 \\(I\\) \u043d\u0435 \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0430\u044e\u0442\u044c\u0441\u044f \u2014 \u0442\u043e\u0431\u0442\u043e \u0436\u043e\u0434\u043d\u0435 \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \\(\\frac{m}{n}\\), \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0457 \u0434\u0440\u043e\u0431\u0438.</p> <p>\u0427\u0438 \u0456\u0441\u043d\u0443\u044e\u0442\u044c \u044f\u043a\u0456\u0441\u044c \u0456\u043d\u0448\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u0456 \u0441\u0438\u0441\u0442\u0435\u043c\u0438? \u0406\u0441\u043d\u0443\u044e\u0442\u044c! \u0426\u0435, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0456 \u0447\u0438\u0441\u043b\u0430, \u0437 \u044f\u043a\u0438\u043c\u0438 \u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043e\u0437\u043d\u0430\u0439\u043e\u043c\u0438\u0442\u0438\u0441\u044f \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e \u0432 \u043d\u0430\u0439\u0431\u043b\u0438\u0436\u0447\u0456 \u0434\u043d\u0456 \u0430\u0431\u043e \u043d\u0430\u0432\u0456\u0442\u044c \u0433\u043e\u0434\u0438\u043d\u0438.</p> <p>\u041d\u0443 \u0430 \u043f\u043e\u043a\u0438 \u043c\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e \u0432\u0438\u0432\u0447\u0435\u043d\u043d\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0439 \u043d\u0430\u0434 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438, \u0434\u0432\u0456 \u0437 \u044f\u043a\u0438\u0445 \u0432\u0436\u0435 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u0456\u0437\u0443\u0432\u0430\u043b\u0438\u0441\u044f \u0432 \u043a\u0456\u043d\u0446\u0456 \u0446\u044c\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u0430:</p>"},{"location":"algebra/sets/#_5","title":"\u0414\u0456\u0457 \u043d\u0430\u0434 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438. \u0414\u0456\u0430\u0433\u0440\u0430\u043c\u0438 \u0412\u0435\u043d\u043d\u0430","text":"<p>\u0414\u0456\u0430\u0433\u0440\u0430\u043c\u0438 \u0412\u0435\u043d\u043d\u0430 (\u0437\u0430 \u0430\u043d\u0430\u043b\u043e\u0433\u0456\u0454\u044e \u0437 \u043a\u043e\u043b\u0430\u043c\u0438 \u0415\u0439\u043b\u0435\u0440\u0430) \u2014 \u0446\u0435 \u0441\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u0435 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0434\u0456\u0439\u0441\u0442\u0432\u0430 \u043c\u043d\u043e\u0436\u0438\u043d. \u0417\u043d\u043e\u0432\u0443 \u0436 \u0442\u0430\u043a\u0438 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u0436\u0430\u044e, \u0449\u043e \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u043e \u043d\u0435 \u0432\u0441\u0456 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457:</p> <p>1) \u041f\u0435\u0440\u0435\u0442\u0438\u043d \u043c\u043d\u043e\u0436\u0438\u043d \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0454\u0442\u044c\u0441\u044f \u043b\u043e\u0433\u0456\u0447\u043d\u0438\u043c \u0437\u0432'\u044f\u0437\u043a\u043e\u043c \u0406 \u0456 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u0447\u043a\u043e\u043c \\(\\cap\\).</p> <p>\u041f\u0435\u0440\u0435\u0442\u0438\u043d \u043c\u043d\u043e\u0436\u0438\u043d \\( A \\) \u0456 \\( B \\) \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \\( A \\cap B \\), \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u044f\u043a\u043e\u0433\u043e \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\), \u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( B \\). \u0413\u0440\u0443\u0431\u043e \u043a\u0430\u0436\u0443\u0447\u0438, \u043f\u0435\u0440\u0435\u0442\u0438\u043d \u2014 \u0446\u0435 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0430 \u0447\u0430\u0441\u0442\u0438\u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u043d:</p> <p></p> <p>\u0422\u0430\u043a, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0434\u043b\u044f \u043c\u043d\u043e\u0436\u0438\u043d \\( A = \\{i, j, k\\} \\), \\( B = \\{k, m\\} \\):</p> \\[ A \\cap B = \\{k\\} \\] <p>\u042f\u043a\u0449\u043e \u0443 \u043c\u043d\u043e\u0436\u0438\u043d \u043d\u0435\u043c\u0430\u0454 \u043e\u0434\u043d\u0430\u043a\u043e\u0432\u0438\u0445 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432, \u0442\u043e \u0457\u0445 \u043f\u0435\u0440\u0435\u0442\u0438\u043d \u043f\u0443\u0441\u0442\u0438\u0439. \u0422\u0430\u043a\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043d\u0430\u043c \u0449\u043e\u0439\u043d\u043e \u0437\u0443\u0441\u0442\u0440\u0456\u0432\u0441\u044f \u043f\u0440\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u0438\u0445 \u043c\u043d\u043e\u0436\u0438\u043d:</p> \\[ Q \\cap I = \\emptyset \\] <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0438 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0456 \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u043e\u0436\u043d\u0430 \u0441\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0438 \u0434\u0432\u043e\u043c\u0430 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0456\u0447\u043d\u0438\u043c\u0438 \u043a\u043e\u043b\u0430\u043c\u0438.</p> <p>\u041e\u043f\u0435\u0440\u0430\u0446\u0456\u044f \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0443 \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u043d\u0430 \u0456 \u0434\u043b\u044f \u0431\u0456\u043b\u044c\u0448\u043e\u0457 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043c\u043d\u043e\u0436\u0438\u043d, \u0437\u043e\u043a\u0440\u0435\u043c\u0430 \u0432 \u0412\u0456\u043a\u0456\u043f\u0435\u0434\u0456\u0457 \u0454 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0443 \u043c\u043d\u043e\u0436\u0438\u043d \u0431\u0443\u043a\u0432 \u0442\u0440\u044c\u043e\u0445 \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0456\u0432.</p> <p>2) \u041e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0454\u0442\u044c\u0441\u044f \u043b\u043e\u0433\u0456\u0447\u043d\u0438\u043c \u0437\u0432'\u044f\u0437\u043a\u043e\u043c \u0410\u0411\u041e \u0456 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u0447\u043a\u043e\u043c \\(\\cup\\).</p> <p>\u041e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f\u043c \u043c\u043d\u043e\u0436\u0438\u043d \\(A\\) \u0456 \\(B\\) \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\(A \\cup B\\), \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u044f\u043a\u043e\u0433\u043e \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(A\\) \u0430\u0431\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(B\\):</p> <p></p> <p>\u0417\u0430\u043f\u0438\u0448\u0435\u043c\u043e \u043e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d \\(A = \\{1, 3, 5\\}\\), \\(B = \\{-1, 0, 1\\}\\):</p> \\[ A \\cup B = \\{-1, 0, 1, 3, 5\\} \\] <p>\u0413\u0440\u0443\u0431\u043e \u043a\u0430\u0436\u0443\u0447\u0438, \u0442\u0443\u0442 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0435\u0440\u0435\u043b\u0456\u0447\u0438\u0442\u0438 \u0432\u0441\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d \\(A\\) \u0456 \\(B\\), \u043f\u0440\u0438\u0447\u043e\u043c\u0443 \u043e\u0434\u043d\u0430\u043a\u043e\u0432\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 (\u0432 \u0434\u0430\u043d\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u043e\u0434\u0438\u043d\u0438\u0446\u044f \u043d\u0430 \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0456 \u043c\u043d\u043e\u0436\u0438\u043d) \u0441\u043b\u0456\u0434 \u0437\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</p> <p>\u0410\u043b\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0438, \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u043c\u043e\u0436\u0443\u0442\u044c \u0456 \u043d\u0435 \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0430\u0442\u0438\u0441\u044f, \u044f\u043a \u0446\u0435 \u043c\u0430\u0454 \u043c\u0456\u0441\u0446\u0435 \u0431\u0443\u0442\u0438 \u0437 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u043c\u0438 \u0439 \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438:</p> \\[ Q \\cup I = R \\] <p>\u0412 \u0446\u044c\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u043c\u043e\u0436\u043d\u0430 \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0438 \u0434\u0432\u0430 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0456\u0447\u043d\u0438\u0445 \u0437\u0430\u0448\u0442\u0440\u0438\u0445\u043e\u0432\u0430\u043d\u0438\u0445 \u043a\u043e\u043b\u0430.</p> <p>\u041e\u043f\u0435\u0440\u0430\u0446\u0456\u044f \u043e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437\u0430\u0441\u0442\u043e\u0441\u043e\u0432\u043d\u0430 \u0439 \u0434\u043b\u044f \u0431\u0456\u043b\u044c\u0448\u043e\u0457 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043c\u043d\u043e\u0436\u0438\u043d, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u044f\u043a\u0449\u043e \\(A = \\{1, 2\\}\\), \\(B = \\{0, 7\\}\\), \\(C = \\{-10, -3\\}\\), \u0442\u043e:</p> \\[ A \\cup B \\cup C = \\{-10, -3, 0, 1, 2, 7\\} \\] <p>\u041f\u0440\u0438 \u0446\u044c\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0430 \u0437\u043e\u0432\u0441\u0456\u043c \u043d\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u0440\u043e\u0437\u0442\u0430\u0448\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0437\u0440\u043e\u0441\u0442\u0430\u043d\u043d\u044f (\u0446\u0435 \u044f \u0437\u0440\u043e\u0431\u0438\u0432 \u0432\u0438\u043a\u043b\u044e\u0447\u043d\u043e \u0437 \u0435\u0441\u0442\u0435\u0442\u0438\u0447\u043d\u0438\u0445 \u043c\u0456\u0440\u043a\u0443\u0432\u0430\u043d\u044c). \u041d\u0435 \u043c\u0443\u0434\u0440\u0443\u044e\u0447\u0438, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0439 \u0442\u0430\u043a:</p> \\[ A \\cup B \\cup C = \\{1, 2, 7, 0, -10, -3\\} \\] <p>3) \u0420\u0456\u0437\u043d\u0456\u0441\u0442\u044e \u043c\u043d\u043e\u0436\u0438\u043d \\(A\\) \u0456 \\(B\\) \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \\(A \\setminus B\\), \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u044f\u043a\u043e\u0433\u043e \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(A\\) \u0456 \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(B\\):</p> <p></p> <p>\u0420\u0456\u0437\u043d\u0456\u0441\u0442\u044c \\(A \\setminus B\\) \u0447\u0438\u0442\u0430\u044e\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c: \u00aba \u0431\u0435\u0437 b\u00bb. \u0406 \u0440\u043e\u0437\u043c\u0456\u0440\u043a\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043c\u043e\u0436\u043d\u0430 \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0441\u0430\u043c\u043e: \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0435\u043c\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(A = \\{a, b, c, d\\}\\) \u0456 \\(B = \\{1, a, d, 5\\}\\). \u0429\u043e\u0431 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0440\u0456\u0437\u043d\u0456\u0441\u0442\u044c \\(A \\setminus B\\), \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0456\u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u00ab\u0432\u0438\u043a\u0438\u043d\u0443\u0442\u0438\u00bb \u0432\u0441\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438, \u0449\u043e \u0454 \u0432 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(B\\):</p> \\[ A \\setminus B = \\{b, c\\} \\] <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0456\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u0438\u043c\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438:</p> \\[ \\mathbb{Z} \\setminus \\mathbb{N} = \\{..., -3, -2, -1, 0\\} \\] <p>\u0422\u0443\u0442 \u0456\u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0456 \u0432\u0441\u0456 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0456, \u0456 \u0441\u0430\u043c\u0430 \u0437\u0430\u043f\u0438\u0441 \\(\\mathbb{Z} \\setminus \\mathbb{N}\\) \u0442\u0430\u043a \u0456 \u0447\u0438\u0442\u0430\u0454\u0442\u044c\u0441\u044f: \u00ab\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0431\u0435\u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445\u00bb.</p> <p>\u0420\u0456\u0437\u043d\u0438\u0446\u0435\u044e \u043c\u043d\u043e\u0436\u0438\u043d \\(B \\backslash A\\) \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0443, \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u044f\u043a\u043e\u0457 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(B\\) \u0456 \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(A\\).</p> <p></p> <p>\u0414\u043b\u044f \u0442\u0438\u0445 \u0436\u0435 \u043c\u043d\u043e\u0436\u0438\u043d \\(A = \\{a, b, c, d\\}\\), \\(B = \\{1, a, d, 5\\}\\): \\(B \\backslash A = \\{1, 5\\}\\) \u2014 \u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(B \\) \"\u0432\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u043e\" \u0442\u0435, \u0449\u043e \u0454 \u0432 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(A\\).</p> <p>\u0410 \u043e\u0441\u044c \u0446\u044f \u0440\u0456\u0437\u043d\u0438\u0446\u044f \u0432\u0438\u044f\u0432\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u043f\u0443\u0441\u0442\u043e\u044e: \\(\\mathbb{N} \\backslash \\mathbb{Z} = \\varnothing\\). \u0406, \u0432\u043b\u0430\u0441\u043d\u0435, \u044f\u043a\u0449\u043e \u0456\u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0438\u043a\u043b\u044e\u0447\u0438\u0442\u0438 \u0446\u0456\u043b\u0456 \u0447\u0438\u0441\u043b\u0430, \u0442\u043e, \u0432\u043b\u0430\u0441\u043d\u0435, \u043d\u0456\u0447\u043e\u0433\u043e \u0439 \u043d\u0435 \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u044c\u0441\u044f :)</p> <p>\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u0456\u043d\u043e\u0434\u0456 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u044e\u0442\u044c \u0441\u0438\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0443 \u0440\u0456\u0437\u043d\u0438\u0446\u044e \\( A \\Delta B\\), \u044f\u043a\u0430 \u043e\u0431'\u0454\u0434\u043d\u0443\u0454 \u043e\u0431\u0438\u0434\u0432\u0456 \"\u043f\u043e\u043b\u043e\u0432\u0438\u043d\u043a\u0438\": \\( A \\Delta B = (A \\backslash B) \\cup (B \\backslash A)\\) \u2014 \u0456\u043d\u0448\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0446\u0435 \"\u0432\u0441\u0435, \u043e\u043a\u0440\u0456\u043c \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0443 \u043c\u043d\u043e\u0436\u0438\u043d\".</p> <p>4) \u0414\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0438\u043c (\u043f\u0440\u044f\u043c\u0438\u043c) \u0434\u043e\u0431\u0443\u0442\u043a\u043e\u043c \u043c\u043d\u043e\u0436\u0438\u043d \\(A\\) \u0456 \\(B\\) \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\(A \\times B\\) \u0432\u0441\u0456\u0445 \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0438\u0445 \u043f\u0430\u0440 \\((a, b)\\), \u0432 \u044f\u043a\u0438\u0445 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \\(a \\in A\\), \u0430 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \\(b \\in B\\).</p> <p>\u0417\u0430\u043f\u0438\u0448\u0435\u043c\u043e \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u043c\u043d\u043e\u0436\u0438\u043d \\(A = \\{a, f, 5\\}\\), \\(B = \\{-1, d\\}\\): \\(A \\times B = \\{(a, -1), (a, d), (f, -1), (f, d), (5, -1), (5, d)\\}\\) \u2014 \u043f\u0435\u0440\u0435\u043b\u0456\u0447\u0435\u043d\u043d\u044f \u043f\u0430\u0440 \u0437\u0440\u0443\u0447\u043d\u043e \u0437\u0434\u0456\u0439\u0441\u043d\u044e\u0432\u0430\u0442\u0438 \u0437\u0430 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c: \"\u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0434\u043e 1-\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(A\\) \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e \u043f\u0440\u0438\u0454\u0434\u043d\u0443\u0454\u043c\u043e \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(B\\), \u043f\u043e\u0442\u0456\u043c \u0434\u043e 2-\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(A\\) \u043f\u0440\u0438\u0454\u0434\u043d\u0443\u0454\u043c\u043e \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(B\\), \u0437\u0433\u043e\u0434\u043e\u043c \u0434\u043e 3-\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(A\\) \u043f\u0440\u0438\u0454\u0434\u043d\u0443\u0454\u043c\u043e \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(B\\)\".</p> <p>\u041f\u0440\u043e\u0442\u0438\u043b\u0435\u0436\u043d\u043e: \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0438\u043c \u0434\u043e\u0431\u0443\u0442\u043a\u043e\u043c \u043c\u043d\u043e\u0436\u0438\u043d \\(B \\times A\\) \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0432\u0441\u0456\u0445 \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0438\u0445 \u043f\u0430\u0440 \\((b, a)\\), \u0432 \u044f\u043a\u0438\u0445 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \\(b \\in B\\), \u0430 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \\(a \\in A\\). \u0423 \u043d\u0430\u0448\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456: \\(B \\times A = \\{(-1, a), (-1, f), (-1, 5), (d, a), (d, f), (d, 5)\\}\\) \u2014 \u0442\u0443\u0442 \u0441\u0445\u0435\u043c\u0430 \u0437\u0430\u043f\u0438\u0441\u0443 \u0430\u043d\u0430\u043b\u043e\u0433\u0456\u0447\u043d\u0430: \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0434\u043e \"\u043c\u0456\u043d\u0443\u0441 \u043e\u0434\u0438\u043d\u0438\u0446\u0456\" \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e \u043f\u0440\u0438\u0454\u0434\u043d\u0443\u044e\u0442\u044c\u0441\u044f \u0432\u0441\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(A\\), \u0437\u0433\u043e\u0434\u043e\u043c \u0434\u043e \"\u0434\u0435\" \u2014 \u0442\u0456 \u0436 \u0441\u0430\u043c\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438.</p> <p>\u0410\u043b\u0435 \u0446\u0435 \u0447\u0438\u0441\u0442\u043e \u0434\u043b\u044f \u0437\u0440\u0443\u0447\u043d\u043e\u0441\u0442\u0456 \u2014 \u0456 \u0432 \u0442\u043e\u043c\u0443, \u0456 \u0432 \u0456\u043d\u0448\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u043f\u0430\u0440\u0438 \u043c\u043e\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u043b\u0456\u0447\u0438\u0442\u0438 \u0432 \u044f\u043a\u043e\u043c\u0443\u0441\u044c \u0437\u0440\u0443\u0447\u043d\u043e\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u2014 \u0442\u0443\u0442 \u0432\u0430\u0436\u043b\u0438\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0432\u0441\u0456 \u043c\u043e\u0436\u043b\u0438\u0432\u0456 \u043f\u0430\u0440\u0438.</p> <p>\u0414\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \\(\\mathbb{R} \\times \\mathbb{R}\\) \u2014 \u0446\u0435 \u0456 \u0454 \u043d\u0435 \u0449\u043e \u0456\u043d\u0448\u0435, \u044f\u043a \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0442\u043e\u0447\u043e\u043a \\((x, y)\\) \u043d\u0430 \u043d\u0430\u0448\u0456\u0439 \u0440\u0456\u0434\u043d\u0456\u0439 \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0456\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0456 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \\(XOY\\).</p> <p>Example</p> \u0417\u0430\u0432\u0434\u0430\u043d\u043d\u044f\u0420\u043e\u0437\u0432'\u044f\u0437\u043e\u043a <p>\u0417\u0430\u0432\u0434\u0430\u043d\u043d\u044f \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0441\u0442\u0456\u0439\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0440\u0456\u043f\u043b\u0435\u043d\u043d\u044f \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u0443:</p> <p>\u0412\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \\((A \\cap B), (A \\cup B), (A \\backslash B), (B \\backslash A), A \\times B, B \\times A\\), \u044f\u043a\u0449\u043e:</p> <p>1) \\(A = \\{a, 1, 2\\}, B = \\{a, b, 1\\}\\);</p> <p>2) \\(A = \\{2n - 1 \\mid n \\in \\mathbb{N}\\}, B = \\{-1, 0, 1, 2, 3\\}\\).</p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0443 \\(A = \\{2n - 1 \\mid n \\in \\mathbb{N}\\}\\) \u0437\u0440\u0443\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u043f\u0435\u0440\u0435\u043b\u0456\u0447\u0435\u043d\u043d\u044f\u043c \u0439\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432.</p> <p>\u0406 \u043f\u0443\u043d\u043a\u0442\u0438\u043a\u0438 \u0437 \u043f\u0440\u043e\u043c\u0456\u0436\u043a\u0430\u043c\u0438 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> <p>3) \\(A = (-\\infty, 3), B = [-1, +\\infty)\\)</p> <p>\u041d\u0430\u0433\u0430\u0434\u0443\u0454\u043c\u043e, \u0449\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0430 \u0434\u0443\u0436\u043a\u0430 \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u0447\u0438\u0441\u043b\u0430 \u0434\u043e \u043f\u0440\u043e\u043c\u0456\u0436\u043a\u0443, \u0430 \u043a\u0440\u0443\u0433\u043b\u0430 \u2014 \u0439\u043e\u0433\u043e \u043d\u0435\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f, \u0442\u043e\u0431\u0442\u043e \"&lt;\u043c\u0456\u043d\u0443\u0441 \u043e\u0434\u0438\u043d\u0438\u0446\u044f&gt;\" \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(B\\), \u0430 \"\u0442\u0440\u0456\u0439\u043a\u0430\" \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(A\\). \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u0440\u043e\u0437\u0456\u0431\u0440\u0430\u0442\u0438\u0441\u044f, \u0449\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454 \u0441\u043e\u0431\u043e\u044e \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0438\u0439 \u0434\u043e\u0431\u0443\u0442\u043e\u043a \u0446\u0438\u0445 \u043c\u043d\u043e\u0436\u0438\u043d. \u042f\u043a\u0449\u043e \u0432\u0438\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0442\u0440\u0443\u0434\u043d\u043e\u0449\u0456, \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u043c\u0430\u043b\u044e\u043d\u043e\u043a ;)</p> <p>1) \u041d\u0435\u0445\u0430\u0439 \\( A = \\{a, 1, 2\\} \\), \\( B = \\{a, b, 1\\} \\)</p> <p>\\(A \\cap B = \\{a, 1\\} \\)</p> <p>\\( A \\cup B = \\{a, b, 1, 2\\} \\)</p> <p>\\(A \\setminus B = \\{2\\} \\) \\( B \\setminus A = \\{b\\} \\) \\( A \\times B = \\{(a, a), (a, b), (a, 1), (1, a), (1, b), (1, 1), (2, a), (2, b), (2, 1)\\} \\) \\( B \\times A = \\{(a, a), (a, 1), (a, 2), (b, a), (b, 1), (b, 2), (1, a), (1, 1), (1, 2)\\} \\)</p> <p>2) \\( A = \\{2n - 1 \\mid x \\in \\mathbb{N}\\} \\), \\( B = \\{-1, 0, 1, 2, 3\\} \\)</p> <p>\\( A \\) \u2014 \u0446\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043d\u0435\u043f\u0430\u0440\u043d\u0438\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b: \\( A = \\{1, 3, 5, \\dots, 2n - 1, \\dots\\} \\)</p> <p>\\( A \\cap B = \\{1, 3\\} \\) \\( A \\cup B = \\{-1, 0, 1, 2, 3, 5, \\dots, 2n - 1, \\dots\\} \\) \\( A \\setminus B = \\{5, 7, 9, \\dots, 2n - 1, \\dots\\} \\) \\( B \\setminus A = \\{-1, 0, 2\\} \\) \\( A \\times B = \\left\\{  \\begin{array}{c} (1, -1), (1, 0), (1, 1), (1, 2), (1, 3), \\\\ (3, -1), (3, 0), (3, 1), (3, 2), (3, 3), \\\\ (5, -1), (5, 0), (5, 1), (5, 2), (5, 3), \\\\ \\dots, \\\\ (2n - 1, -1), (2n - 1, 0), (2n - 1, 1), (2n - 1, 2), (2n - 1, 3)  \\end{array} \\right\\} \\) \\( B \\times A = \\left\\{  \\begin{array}{c} (-1, 1), (-1, 3), (-1, 5), \\dots, (-1, 2n - 1), \\dots, \\\\ (0, 1), (0, 3), (0, 5), \\dots, (0, 2n - 1), \\dots, \\\\ (1, 1), (1, 3), (1, 5), \\dots, (1, 2n - 1), \\dots, \\\\ (2, 1), (2, 3), (2, 5), \\dots, (2, 2n - 1), \\dots, \\\\ (3, 1), (3, 3), (3, 5), \\dots, (3, 2n - 1), \\dots \\end{array} \\right\\} \\)</p> <p>3) \\( A = (-\\infty, 3) \\), \\( B = [-1; +\\infty) \\)</p> <p>\\( A \\cap B = [-1; 3) \\) \\( A \\cup B = (-\\infty; +\\infty) \\) \\( A \\setminus B = (-\\infty, -1) \\) \\( B \\setminus A = [3; +\\infty) \\) \\( A \\times B = \\{(x, y) \\mid x &lt; 3, y \\geq -1\\} \\quad \\text{\u2014 \u0432\u0441\u0456\\ \u0442\u043e\u0447\u043a\u0438 } (x, y) \\text{ \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u043e\u0457\\ \u043f\u043b\u043e\u0449\u0438\u043d\u0438 } XOY, \\text{ \u0449\u043e \u0437\u0430\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044f\u044e\u0442\u044c \u0434\u0432\u043e\u043c \u0432\u043a\u0430\u0437\u0430\u043d\u0438\u043c \u043d\u0435\u0440\u0456\u0432\u043d\u043e\u0441\u0442\u044f\u043c.} \\text{ \u0410\u043d\u0430\u043b\u043e\u0433\u0456\u0447\u043d\u043e:} \\) \\( B \\times A = \\{(x, y) \\mid y \\geq -1, x &lt; 3\\} \\)</p>"},{"location":"algebra/sets/#_6","title":"\u0412\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d","text":"<p>\u0412\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f\u043c \u043c\u043d\u043e\u0436\u0438\u043d \\(A\\) \u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \\(B\\) \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430 \u044f\u043a\u0438\u043c \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(A\\) \u0441\u0442\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0435\u043b\u0435\u043c\u0435\u043d\u0442 (\u0430\u0431\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438) \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(B\\). \u0423 \u0442\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443, \u044f\u043a\u0449\u043e \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0441\u0442\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u0454\u0434\u0438\u043d\u0438\u0439 \u0435\u043b\u0435\u043c\u0435\u043d\u0442, \u0442\u043e \u0446\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043e\u044e \u0444\u0443\u043d\u043a\u0446\u0456\u0454\u044e \u0430\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u0454\u044e.</p> <p>\u0424\u0443\u043d\u043a\u0446\u0456\u044e, \u044f\u043a \u0431\u0430\u0433\u0430\u0442\u043e \u0445\u0442\u043e \u0437\u043d\u0430\u0454, \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c \u043b\u0456\u0442\u0435\u0440\u043e\u044e \\(f: A \\to B\\) \u2014 \u0432\u043e\u043d\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \\(a \\in A\\) \u0454\u0434\u0438\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \\(f(a)\\), \u0449\u043e \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\(B\\).</p> <p>\u0422\u0435\u043f\u0435\u0440 \u044f \u0437\u043d\u043e\u0432\u0443 \u043f\u043e\u0431\u043e\u044e\u0441\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(S_1 = \\{\u0410\u043d\u044f, \u0412\u0430\u043d\u044f, \u0422\u0430\u043d\u044f, \u041f\u0435\u0442\u044f, \u042e\u043b\u044f, \u0413\u0430\u043b\u044f\\}\\) \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 1-\u0433\u043e \u0440\u044f\u0434\u0443 \u0456 \u0437\u0430\u043f\u0440\u043e\u043f\u043e\u043d\u0443\u044e \u0457\u043c 6 \u0442\u0435\u043c \u0434\u043b\u044f \u0440\u0435\u0444\u0435\u0440\u0430\u0442\u0456\u0432 (\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\(T\\)):</p> <ul> <li>\u0410\u043d\u044f \u2192 \u0412\u0435\u043a\u0442\u043e\u0440\u0438</li> <li>\u0412\u0430\u043d\u044f \u2192 \u041c\u0430\u0442\u0440\u0438\u0446\u0456</li> <li>\u0422\u0430\u043d\u044f \u2192 \u0412\u0438\u0437\u043d\u0430\u0447\u043d\u0438\u043a\u0438</li> <li>\u041c\u0430\u0448\u0430 \u2192 \u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0456 \u0447\u0438\u0441\u043b\u0430 </li> <li>\u042e\u043b\u044f \u2192 \u0422\u0435\u043e\u0440\u0456\u044f \u043c\u0435\u0436</li> <li>\u0421\u0430\u0448\u0430 \u2192 \u0429\u043e \u0442\u0430\u043a\u0435 \u043f\u043e\u0445\u0456\u0434\u043d\u0430?</li> </ul> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0435 (\u0434\u043e\u0431\u0440\u043e\u0432\u0456\u043b\u044c\u043d\u043e \u0430\u0431\u043e \u043f\u0440\u0438\u043c\u0443\u0441\u043e\u0432\u043e =) \u043f\u0440\u0430\u0432\u0438\u043b\u043e \\(f\\) \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443 \u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(S_1\\) \u0454\u0434\u0438\u043d\u0443 \u0442\u0435\u043c\u0443 \u0440\u0435\u0444\u0435\u0440\u0430\u0442\u0443 \u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(T\\).</p> <p>\u0410 \u0432\u0438, \u043d\u0430\u043f\u0435\u0432\u043d\u043e, \u0456 \u0443\u044f\u0432\u0438\u0442\u0438 \u0441\u043e\u0431\u0456 \u043d\u0435 \u043c\u043e\u0433\u043b\u0438, \u0449\u043e \u0437\u0456\u0433\u0440\u0430\u0454\u0442\u0435 \u0440\u043e\u043b\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 =) </p> <p>\u0415\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(S_1\\) \u0443\u0442\u0432\u043e\u0440\u044e\u044e\u0442\u044c \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u0457 (\u043f\u043e\u0437\u043d\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \\(D(f)\\)), \u0430 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(T\\) \u2014 \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0444\u0443\u043d\u043a\u0446\u0456\u0457 (\u043f\u043e\u0437\u043d\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \\(E(f)\\)).</p> <p>\u041f\u043e\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0435 \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d \u043c\u0430\u0454 \u0434\u0443\u0436\u0435 \u0432\u0430\u0436\u043b\u0438\u0432\u0443 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0443: \u0432\u043e\u043d\u043e \u0454 \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0438\u043c \u0430\u0431\u043e \u0431\u0456\u0454\u043a\u0442\u0438\u0432\u043d\u0438\u043c (\u0431\u0456\u0454\u043a\u0446\u0456\u044f). \u0423 \u043d\u0430\u0448\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u0446\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u043e\u0434\u043d\u0443 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0443 \u0442\u0435\u043c\u0443 \u0440\u0435\u0444\u0435\u0440\u0430\u0442\u0443, \u0456 \u043d\u0430\u0432\u043f\u0430\u043a\u0438 \u2014 \u0437\u0430 \u043a\u043e\u0436\u043d\u043e\u044e \u0442\u0435\u043c\u043e\u044e \u0440\u0435\u0444\u0435\u0440\u0430\u0442\u0443 \u0437\u0430\u043a\u0440\u0456\u043f\u043b\u0435\u043d\u0438\u0439 \u043b\u0438\u0448\u0435 \u043e\u0434\u0438\u043d \u0441\u0442\u0443\u0434\u0435\u043d\u0442.</p> <p>\u041e\u0434\u043d\u0430\u043a \u043d\u0435 \u0441\u043b\u0456\u0434 \u0434\u0443\u043c\u0430\u0442\u0438, \u0449\u043e \u0432\u0441\u044f\u043a\u0435 \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0454 \u0431\u0456\u0454\u043a\u0446\u0456\u0454\u044e. \u042f\u043a\u0449\u043e \u043d\u0430 1-\u0439 \u0440\u044f\u0434 (\u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\(S_1\\)) \u0434\u043e\u0434\u0430\u0442\u0438 7-\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430, \u0442\u043e \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0430\u0434\u0435 \u2014 \u0430\u0431\u043e \u043e\u0434\u0438\u043d \u0456\u0437 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u044c\u0441\u044f \u0431\u0435\u0437 \u0442\u0435\u043c\u0438 (\u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043d\u0435 \u0431\u0443\u0434\u0435 \u0432\u0437\u0430\u0433\u0430\u043b\u0456), \u0430\u0431\u043e \u044f\u043a\u0430\u0441\u044c \u0442\u0435\u043c\u0430 \u0431\u0443\u0434\u0435 \u0437\u0430\u043a\u0440\u0456\u043f\u043b\u0435\u043d\u0430 \u0432\u0456\u0434\u0440\u0430\u0437\u0443 \u0437\u0430 \u0434\u0432\u043e\u043c\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c\u0438, \u0449\u043e \u0442\u0435\u0436 \u043d\u0435 \u0454 \u0434\u043e\u0431\u0440\u0435.</p> <p>\u0428\u0430\u043d\u043e\u0432\u043d\u0456 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0438 \u043d\u0430 1-\u043c\u0443 \u0440\u044f\u0434\u0443, \u043d\u0435 \u0440\u043e\u0437\u0441\u043b\u0430\u0431\u043b\u044f\u0439\u0442\u0435\u0441\u044f \u2014 \u0440\u0435\u0448\u0442\u0430 20 \u0447\u043e\u043b\u043e\u0432\u0456\u043a \u043f\u0456\u0441\u043b\u044f \u043f\u0430\u0440 \u043f\u0456\u0434\u0443\u0442\u044c \u043f\u0440\u0438\u0431\u0438\u0440\u0430\u0442\u0438 \u0442\u0435\u0440\u0438\u0442\u043e\u0440\u0456\u044e \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0443 \u0432\u0456\u0434 \u043e\u0441\u0456\u043d\u043d\u044c\u043e\u0433\u043e \u043b\u0438\u0441\u0442\u044f. \u0417\u0430\u0432\u0445\u043e\u0437 \u0432\u0438\u0434\u0430\u0441\u0442\u044c \u0434\u0432\u0430\u0434\u0446\u044f\u0442\u044c \u043c\u0456\u0442\u0435\u043b, \u044f\u043a\u0456 \u043f\u043e\u0432\u043d\u0456\u0441\u0442\u044e \u0443\u0442\u0432\u043e\u0440\u044e\u044e\u0442\u044c \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u043c\u0456\u0436 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u044e \u0447\u0430\u0441\u0442\u0438\u043d\u043e\u044e \u0433\u0440\u0443\u043f\u0438 \u0456 \u043c\u0456\u0442\u043b\u0430\u043c\u0438\u2026 \u0430 \u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440 \u0449\u0435 \u0439 \u0432 \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u0437\u0431\u0456\u0433\u0430\u0442\u0438 \u0432\u0441\u0442\u0438\u0433\u043d\u0435 =)</p> <p>\u0422\u0435\u043f\u0435\u0440 \u0440\u043e\u0437\u0431\u0435\u0440\u0435\u043c\u043e\u0441\u044f \u0437\u0456 \u00ab\u0448\u043a\u0456\u043b\u044c\u043d\u043e\u044e\u00bb \u0444\u0443\u043d\u043a\u0446\u0456\u0454\u044e \u043e\u0434\u043d\u0456\u0454\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457. \u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u043f\u043e\u0433\u043b\u044f\u043d\u044c\u0442\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0456\u043a \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u0457 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \\(f(x) = 2x + 1\\).</p> <p>\u0417\u0430\u0434\u0430\u043c\u043e\u0441\u044f \u043f\u0438\u0442\u0430\u043d\u043d\u044f\u043c, \u0449\u043e \u0446\u0435 \u0442\u0430\u043a\u0435? \u0426\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \\(f\\), \u0437\u0430 \u044f\u043a\u0438\u043c \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \\(x\\) \u043e\u0431\u043b\u0430\u0441\u0442\u0456 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \\(D(f)\\) \u0441\u0442\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0454\u0434\u0438\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \\(2x + 1\\). \u0417 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u043a\u043e-\u043c\u043d\u043e\u0436\u0438\u043d\u043d\u043e\u0457 \u0442\u043e\u0447\u043a\u0438 \u0437\u043e\u0440\u0443, \u0442\u0443\u0442 \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[f: \\mathbb{R} \\to \\mathbb{R}\\] <p>\u041f\u0435\u0440\u0448\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043c\u0438 \u043f\u043e-\u043f\u0440\u043e\u0441\u0442\u043e\u043c\u0443 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u043c\u043e \u00ab\u0456\u043a\u0441\u0430\u043c\u0438\u00bb (\u043d\u0435\u0437\u0430\u043b\u0435\u0436\u043d\u0430 \u0437\u043c\u0456\u043d\u043d\u0430 \u0430\u0431\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442), \u0430 \u0434\u0440\u0443\u0433\u0435 \u2014 \u00ab\u0456\u0433\u0440\u0435\u043a\u0430\u043c\u0438\u00bb (\u0437\u0430\u043b\u0435\u0436\u043d\u0430 \u0437\u043c\u0456\u043d\u043d\u0430 \u0430\u0431\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u044f \\(y = f(x)\\)).</p> <p>\u0414\u0430\u043b\u0456 \u043f\u043e\u0433\u043b\u044f\u043d\u0435\u043c\u043e \u043d\u0430 \u0441\u0442\u0430\u0440\u0443 \u0437\u043d\u0430\u0439\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u0431\u043e\u043b\u0443 \\(g(x) = x^2\\). \u0422\u0443\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \\(g\\) \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044e \u00ab\u0456\u043a\u0441\u00bb \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0439\u043e\u0433\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442, \u0456 \u043c\u0430\u0454 \u043c\u0456\u0441\u0446\u0435 \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f: </p> \\[g: \\mathbb{R} \\to [0, +\\infty)\\] <p>\u0406\u0442\u0430\u043a, \u0449\u043e \u0436 \u0442\u0430\u043a\u0435 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043e\u0434\u043d\u0456\u0454\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457? \u0424\u0443\u043d\u043a\u0446\u0456\u044f \u043e\u0434\u043d\u0456\u0454\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \u2014 \u0446\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \\(f\\), \u044f\u043a\u0435 \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044e \u043d\u0435\u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457 \\(x\\) \u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0456 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u043e\u0434\u043d\u0435 \u0456 \u0442\u0456\u043b\u044c\u043a\u0438 \u043e\u0434\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \\(y = f(x)\\).</p> <p>\u042f\u043a \u0432\u0436\u0435 \u0437\u0430\u0437\u043d\u0430\u0447\u0430\u043b\u043e\u0441\u044f \u0432 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u0437\u0456 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c\u0438, \u043d\u0435 \u0432\u0441\u044f\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0454 \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e\u044e. \u0422\u0430\u043a, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \\(y = f(x) = 2x + 1\\) \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \\(x\\) \u0437 \u043e\u0431\u043b\u0430\u0441\u0442\u0456 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0438\u0439 \u00ab\u0456\u0433\u0440\u0438\u043a\u00bb, \u0456 \u043d\u0430\u0432\u043f\u0430\u043a\u0438 \u2014 \u0437\u0430 \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c \u00ab\u0456\u0433\u0440\u0438\u043a\u00bb \u043c\u0438 \u0437\u043c\u043e\u0436\u0435\u043c\u043e \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u0456\u0434\u043d\u043e\u0432\u0438\u0442\u0438 \u00ab\u0456\u043a\u0441\u00bb. \u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0446\u044f \u0431\u0456\u0454\u043a\u0442\u0438\u0432\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f.</p> <p>\u0414\u043b\u044f \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0457 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0432\u0430\u0436\u043b\u0438\u0432\u043e \u0432\u0456\u0434\u0437\u043d\u0430\u0447\u0430\u0442\u0438, \u0449\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043e\u0434\u043d\u0438\u043c \u0456 \u0442\u0438\u043c \u0441\u0430\u043c\u0438\u043c \u0434\u043b\u044f \u0440\u0456\u0437\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443, \u0442\u043e\u0431\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043d\u0435\u0431\u0456\u0454\u043a\u0442\u0438\u0432\u043d\u043e\u044e.</p>"},{"location":"algebra/sets/#_7","title":"\u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0438","text":"<p>\u0406\u043d\u0442\u0443\u0457\u0446\u0456\u044f \u043f\u0456\u0434\u043a\u0430\u0437\u0443\u0454, \u0449\u043e \u0446\u0435\u0439 \u0442\u0435\u0440\u043c\u0456\u043d \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0454 \u0440\u043e\u0437\u043c\u0456\u0440 \u043c\u043d\u043e\u0436\u0438\u043d\u0438, \u0430 \u0441\u0430\u043c\u0435 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0457\u0457 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432. \u0406 \u0456\u043d\u0442\u0443\u0457\u0446\u0456\u044f \u043d\u0430\u0441 \u043d\u0435 \u043e\u0431\u043c\u0430\u043d\u044e\u0454!</p> <p>\u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043f\u043e\u0440\u043e\u0436\u043d\u044c\u043e\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043d\u0443\u043b\u044e.</p> <p>\u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( S_1 = \\{\u0410\u043d\u044f, \u0412\u0430\u043d\u044f, \u0422\u0430\u043d\u044f, \u041c\u0430\u0448\u0430, \u042e\u043b\u044f, \u0421\u0430\u0448\u0430\\} \\) \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u0448\u0435\u0441\u0442\u0438.</p> <p>\u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0431\u0443\u043a\u0432 \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443 \\( A = \\{\u0430, \u0431, \u0432, ..., \u044e, \u044f\\} \\) \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u0438 \u0442\u0440\u044c\u043e\u043c.</p> <p>\u0406 \u0432\u0437\u0430\u0433\u0430\u043b\u0456 \u2014 \u043f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0457 \u043a\u0456\u043d\u0446\u0435\u0432\u043e\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432 \u0446\u0456\u0454\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438.</p> <p>...\u041c\u043e\u0436\u043b\u0438\u0432\u043e, \u043d\u0435 \u0432\u0441\u0456 \u0434\u043e \u043a\u0456\u043d\u0446\u044f \u0440\u043e\u0437\u0443\u043c\u0456\u044e\u0442\u044c, \u0449\u043e \u0442\u0430\u043a\u0435 \u043a\u0456\u043d\u0446\u0435\u0432\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u2014 \u044f\u043a\u0449\u043e \u043f\u043e\u0447\u0430\u0442\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u0446\u0456\u0454\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438, \u0442\u043e \u0440\u0430\u043d\u043e \u0447\u0438 \u043f\u0456\u0437\u043d\u043e \u0440\u0430\u0445\u0443\u043d\u043e\u043a \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f. \u0429\u043e \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f, \u0456 \u041a\u0438\u0442\u0430\u0439 \u043a\u043e\u043b\u0438-\u043d\u0435\u0431\u0443\u0434\u044c \u0437\u0430\u043a\u0456\u043d\u0447\u0438\u0442\u044c\u0441\u044f.</p> <p>\u0417\u0432\u0456\u0441\u043d\u043e, \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043c\u043e\u0436\u043d\u0430 \u043f\u043e\u0440\u0456\u0432\u043d\u044e\u0432\u0430\u0442\u0438 \u0437\u0430 \u043f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044e \u0456 \u0457\u0445 \u0440\u0456\u0432\u043d\u0456\u0441\u0442\u044c \u0443 \u0446\u044c\u043e\u043c\u0443 \u0441\u0435\u043d\u0441\u0456 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0440\u0456\u0432\u043d\u043e\u043f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044e. \u0420\u0456\u0432\u043d\u043e\u043f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c:</p> <p>\u0414\u0432\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0454 \u0440\u0456\u0432\u043d\u043e\u043f\u043e\u0442\u0443\u0436\u043d\u0438\u043c\u0438, \u044f\u043a\u0449\u043e \u043c\u0456\u0436 \u043d\u0438\u043c\u0438 \u043c\u043e\u0436\u043d\u0430 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c.</p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \\( S_1 \\) \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0440\u0456\u0432\u043d\u043e\u043f\u043e\u0442\u0443\u0436\u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( T \\) \u0442\u0435\u043c \u0440\u0435\u0444\u0435\u0440\u0430\u0442\u0456\u0432, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( A \\) \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443 \u0440\u0456\u0432\u043d\u043e\u043f\u043e\u0442\u0443\u0436\u043d\u0430 \u0431\u0443\u0434\u044c-\u044f\u043a\u0456\u0439 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0437 33 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432 \u0456 \u0442.\u0434. \u0417\u0432\u0435\u0440\u043d\u0456\u0442\u044c \u0443\u0432\u0430\u0433\u0443, \u0449\u043e \u0441\u0430\u043c\u0435 \u0431\u0443\u0434\u044c-\u044f\u043a\u0456\u0439 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0437 33 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432 \u2014 \u0443 \u0446\u044c\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u043c\u0430\u0454 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043b\u0438\u0448\u0435 \u0457\u0445 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c. \u0411\u0443\u043a\u0432\u0438 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443 \u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0442\u0438 \u043d\u0435 \u0442\u0456\u043b\u044c\u043a\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0456\u043c\u0435\u043d \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \\( S_1 \\), \u0430, \u0441\u043a\u0430\u0436\u0456\u043c\u043e, 33 \u043a\u043e\u0440\u043e\u0432\u0430\u043c \u043d\u0430 \u043f\u0430\u0441\u043e\u0432\u0438\u0449\u0456, \u0430\u0431\u043e 33 \u0441\u043e\u0441\u043d\u0430\u043c, \u0449\u043e \u0440\u043e\u0441\u0442\u0443\u0442\u044c \u0443 \u043b\u0456\u0441\u0456.</p> <p>\u041d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0446\u0456\u043a\u0430\u0432\u0456\u0448\u0435 \u0439\u0434\u0435 \u0441\u043f\u0440\u0430\u0432\u0430 \u0437 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u043c\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438. \u041d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0431\u0443\u0432\u0430\u044e\u0442\u044c \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u043c\u0438 \u0442\u0430 \u043d\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u043c\u0438. \u0421\u0430\u043c\u0456 \"\u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0456\" \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u2014 \u0446\u0435 \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438. \u042f\u043a\u0449\u043e \u0437\u043e\u0432\u0441\u0456\u043c \u043f\u0440\u043e\u0441\u0442\u043e, \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u0442\u0430\u043a\u043e\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u0443\u0432\u0430\u0442\u0438. \u041d\u0430\u0439\u043f\u0440\u043e\u0441\u0442\u0456\u0448\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u2014 \u0446\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \\( N = \\{1, 2, 3, 4, 5, ...\\} \\).</p> <p>\u0422\u0430\u043a \u2014 \u0432\u043e\u043d\u0430 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0430, \u043e\u0434\u043d\u0430\u043a \u0443 \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u0457\u0457 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0456 \u0454 \u043d\u043e\u043c\u0435\u0440.</p> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0456\u0432 \u0431\u0435\u0437\u043b\u0456\u0447. \u0417\u043e\u043a\u0440\u0435\u043c\u0430, \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u043e\u044e \u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0432\u0441\u0456\u0445 \u043f\u0430\u0440\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \\( N_{2N} = \\{2n \\mid n \\in N\\} = \\{2, 4, 6, 8, ...\\} \\). \u042f\u043a \u0446\u0435 \u0434\u043e\u0432\u0435\u0441\u0442\u0438? \u0422\u0440\u0435\u0431\u0430 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438 \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0437 \u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0430\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438:</p> <p>\\( N_{2N} = \\{2_1, 4_2, 6_3, 8_4, ...\\} \\).</p> <p>\u041e\u0441\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434 \u043d\u0430 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0443 \u043c\u043e\u0432\u0443:</p> <p>\u0412\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430, \u043e\u0442\u0436\u0435, \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0454 \u0440\u0456\u0432\u043d\u043e\u043f\u043e\u0442\u0443\u0436\u043d\u0438\u043c\u0438, \u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( N_2 \\) \u0454 \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u043e\u044e. \u041f\u0430\u0440\u0430\u0434\u043e\u043a\u0441\u0430\u043b\u044c\u043d\u043e, \u0430\u043b\u0435 \u0437 \u0442\u043e\u0447\u043a\u0438 \u0437\u043e\u0440\u0443 \u043f\u043e\u0442\u0443\u0436\u043d\u043e\u0441\u0442\u0456 \u2014 \u043f\u0430\u0440\u043d\u0438\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0439 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445!</p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u0430\u043a\u043e\u0436 \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0430. \u0407\u0457 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043e\u0436\u043d\u0430 \u0437\u0430\u043d\u0443\u043c\u0435\u0440\u0443\u0432\u0430\u0442\u0438, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0442\u0430\u043a:</p> \\[ Z = \\{..., -3_7, -2_5, -1_3, 0_1, 1_2, 2_4, 3_6, ...\\} \\] <p>\u0411\u0456\u043b\u044c\u0448\u0435 \u0442\u043e\u0433\u043e, \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u043e\u044e \u0454 \u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \\( Q = \\left\\{ \\frac{m}{n} \\mid m \\in Z, n \\in N \\right\\} \\). \u041e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043a \u2014 \u0446\u0435 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e (\u0430 \u0457\u0445, \u044f\u043a \u0442\u0456\u043b\u044c\u043a\u0438 \u0449\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e, \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u0443\u0432\u0430\u0442\u0438), \u0430 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a \u2014 \u0446\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e, \u0442\u043e \u0440\u0430\u043d\u043e \u0447\u0438 \u043f\u0456\u0437\u043d\u043e \u043c\u0438 \"\u0434\u0456\u0439\u0434\u0435\u043c\u043e\" \u0434\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0457 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0457 \u0434\u0440\u043e\u0431\u0438 \\(\\frac{m}{n}\\) \u0456 \u043f\u0440\u0438\u0441\u0432\u043e\u0457\u043c\u043e \u0457\u0439 \u043d\u043e\u043c\u0435\u0440.</p> <p>\u0410 \u043e\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \\( R \\) \u0443\u0436\u0435 \u043d\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0430, \u0442\u043e\u0431\u0442\u043e \u0457\u0457 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e. \u0426\u0435\u0439 \u0444\u0430\u043a\u0442, \u0445\u043e\u0447\u0430 \u0439 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0438\u0439, \u043e\u0434\u043d\u0430\u043a \u0441\u0443\u0432\u043e\u0440\u043e \u0434\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u043e\u0440\u0456\u0457 \u043c\u043d\u043e\u0436\u0438\u043d. \u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u0430\u043a\u043e\u0436 \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u043a\u043e\u043d\u0442\u0438\u043d\u0443\u0443\u043c\u043e\u043c, \u0456 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043e \u0437 \u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u043c\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438 \u0446\u0435 \"\u0431\u0456\u043b\u044c\u0448 \u0432\u0435\u043b\u0438\u043a\u0430\" \u043c\u043d\u043e\u0436\u0438\u043d\u0430.</p> <p>\u041e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043c\u0456\u0436 \u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \\( R \\) \u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u044e \u043f\u0440\u044f\u043c\u043e\u044e \u0456\u0441\u043d\u0443\u0454 \u0432\u0437\u0430\u0454\u043c\u043d\u043e-\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456\u0441\u0442\u044c (\u0434\u0438\u0432. \u0432\u0438\u0449\u0435), \u0442\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0442\u043e\u0447\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0457 \u043f\u0440\u044f\u043c\u043e\u0457 \u0442\u0435\u0436 \u043d\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0430. \u0406 \u0431\u0456\u043b\u044c\u0448\u0435 \u0442\u043e\u0433\u043e, \u043d\u0430 \u043a\u0456\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432\u043e\u043c\u0443 \u0456 \u043c\u0456\u043b\u0456\u043c\u0435\u0442\u0440\u043e\u0432\u043e\u043c\u0443 \u0432\u0456\u0434\u0440\u0456\u0437\u043a\u0443 \u0442\u043e\u0447\u043e\u043a \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0436!</p> <p>\u0426\u0435\u0439 \u043f\u0430\u0440\u0430\u0434\u043e\u043a\u0441, \u0439\u043c\u043e\u0432\u0456\u0440\u043d\u043e, \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0438\u0439 \u0437 \u0437\u0430\u0433\u0430\u0434\u043a\u043e\u044e \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u043e\u0441\u0442\u0456... \u0430\u043b\u0435 \u0437\u0430\u0440\u0430\u0437 \u043c\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c\u043e \u0437\u0430\u0433\u043b\u0438\u0431\u043b\u044e\u0432\u0430\u0442\u0438\u0441\u044c \u0443 \u0431\u0435\u0437\u043c\u0435\u0436\u043d\u0456\u0441\u0442\u044c \u0441\u0432\u0456\u0442\u043e\u0433\u043b\u044f\u0434\u0443, \u0430\u0434\u0436\u0435 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u0443 \u043e\u0441\u043d\u043e\u0432\u0438 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e\u0457 \u043b\u043e\u0433\u0456\u043a\u0438, \u0430 \u0449\u0435 \u0444\u0456\u043b\u043e\u0441\u043e\u0444\u0456\u044f =)</p> <p>\u0414\u044f\u043a\u0443\u044e \u0437\u0430 \u0443\u0432\u0430\u0433\u0443 \u0456 \u0443\u0441\u043f\u0456\u0445\u0456\u0432 \u0443 \u043d\u0430\u0432\u0447\u0430\u043d\u043d\u0456!</p>"},{"location":"differential/first_order/","title":"\u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0440\u043e\u0437\u0432\u2019\u044f\u0437\u0430\u043d\u043d\u044f. \u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0437 \u0440\u043e\u0437\u0434\u0456\u043b\u044c\u043d\u0438\u043c\u0438 \u0437\u043c\u0456\u043d\u043d\u0438\u043c\u0438**","text":"<p>\u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f (\u0414\u0420). \u0426\u0456 \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430 \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u043b\u044f\u043a\u0430\u044e\u0442\u044c \u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u043d\u0443 \u043b\u044e\u0434\u0438\u043d\u0443. \u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0437\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0447\u0438\u043c\u043e\u0441\u044c \u043d\u0430\u0434\u0441\u043a\u043b\u0430\u0434\u043d\u0438\u043c \u0456 \u0432\u0430\u0436\u043a\u0438\u043c \u0434\u043b\u044f \u043e\u0441\u0432\u043e\u0454\u043d\u043d\u044f \u043d\u0430\u0432\u0456\u0442\u044c \u0431\u0430\u0433\u0430\u0442\u044c\u043e\u043c \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c. \u0423\u0443\u0443\u0443\u0443... \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f, \u044f\u043a \u0431\u0438 \u043c\u0435\u043d\u0456 \u0432\u0441\u0435 \u0446\u0435 \u043f\u0435\u0440\u0435\u0436\u0438\u0442\u0438?!</p> <p>\u0422\u0430\u043a\u0435 \u0432\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0456 \u0442\u0430\u043a\u0438\u0439 \u043d\u0430\u0441\u0442\u0440\u0456\u0439 \u043a\u0430\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0456, \u0442\u043e\u043c\u0443 \u0449\u043e \u043d\u0430\u0441\u043f\u0440\u0430\u0432\u0434\u0456 \u0414\u0418\u0424\u0415\u0420\u0415\u041d\u0426\u0406\u0410\u041b\u042c\u041d\u0406 \u0420\u0406\u0412\u041d\u042f\u041d\u041d\u042f \u2013 \u0426\u0415 \u041f\u0420\u041e\u0421\u0422\u041e \u0406 \u041d\u0410\u0412\u0406\u0422\u042c \u0417\u0410\u0425\u041e\u041f\u041b\u042e\u042e\u0427\u0415. \u0429\u043e \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0437\u043d\u0430\u0442\u0438 \u0456 \u0432\u043c\u0456\u0442\u0438, \u0449\u043e\u0431 \u043d\u0430\u0432\u0447\u0438\u0442\u0438\u0441\u044f \u0440\u043e\u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u0442\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f? \u0414\u043b\u044f \u0443\u0441\u043f\u0456\u0448\u043d\u043e\u0433\u043e \u0432\u0438\u0432\u0447\u0435\u043d\u043d\u044f \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c \u0432\u0438 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0434\u043e\u0431\u0440\u0435 \u0432\u043c\u0456\u0442\u0438 \u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u0442\u0438 \u0456 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u044e\u0432\u0430\u0442\u0438. \u0427\u0438\u043c \u043a\u0440\u0430\u0449\u0435 \u0432\u0438\u0432\u0447\u0435\u043d\u0456 \u0442\u0435\u043c\u0438 \"\u041f\u043e\u0445\u0456\u0434\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u043e\u0434\u043d\u0456\u0454\u0457 \u0437\u043c\u0456\u043d\u043d\u043e\u0457\" \u0456 \"\u041d\u0435\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\", \u0442\u0438\u043c \u043b\u0435\u0433\u0448\u0435 \u0431\u0443\u0434\u0435 \u0440\u043e\u0437\u0456\u0431\u0440\u0430\u0442\u0438\u0441\u044f \u0437 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u043c\u0438 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f\u043c\u0438. \u0421\u043a\u0430\u0436\u0443 \u0431\u0456\u043b\u044c\u0448\u0435, \u044f\u043a\u0449\u043e \u0443 \u0432\u0430\u0441 \u0431\u0456\u043b\u044c\u0448-\u043c\u0435\u043d\u0448 \u043f\u0440\u0438\u0441\u0442\u043e\u0439\u043d\u0456 \u043d\u0430\u0432\u0438\u0447\u043a\u0438 \u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u043d\u043d\u044f, \u0442\u043e \u0442\u0435\u043c\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e \u043e\u0441\u0432\u043e\u0454\u043d\u0430! \u0427\u0438\u043c \u0431\u0456\u043b\u044c\u0448\u0435 \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0456\u0432 \u0440\u0456\u0437\u043d\u0438\u0445 \u0442\u0438\u043f\u0456\u0432 \u0432\u0438 \u0432\u043c\u0456\u0454\u0442\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u0442\u0438 \u2013 \u0442\u0438\u043c \u043a\u0440\u0430\u0449\u0435. \u0427\u043e\u043c\u0443? \u0414\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0431\u0430\u0433\u0430\u0442\u043e \u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u0442\u0438. \u0406 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u044e\u0432\u0430\u0442\u0438. \u0422\u0430\u043a\u043e\u0436 \u043d\u0430\u0441\u0442\u0456\u0439\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043d\u0430\u0432\u0447\u0438\u0442\u0438\u0441\u044f \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0438 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0432\u0456\u0434 \u0444\u0443\u043d\u043a\u0446\u0456\u0457, \u0437\u0430\u0434\u0430\u043d\u043e\u0457 \u043d\u0435\u044f\u0432\u043d\u043e.</p> <p>\u0423 95% \u0432\u0438\u043f\u0430\u0434\u043a\u0456\u0432 \u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0438\u0445 \u0440\u043e\u0431\u043e\u0442\u0430\u0445 \u0437\u0443\u0441\u0442\u0440\u0456\u0447\u0430\u044e\u0442\u044c\u0441\u044f 3 \u0442\u0438\u043f\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443: \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0437 \u0440\u043e\u0437\u0434\u0456\u043b\u044c\u043d\u0438\u043c\u0438 \u0437\u043c\u0456\u043d\u043d\u0438\u043c\u0438, \u044f\u043a\u0456 \u043c\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0435\u043c\u043e \u043d\u0430 \u0446\u044c\u043e\u043c\u0443 \u0443\u0440\u043e\u0446\u0456; \u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0456 \u043b\u0456\u043d\u0456\u0439\u043d\u0456 \u043d\u0435\u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f. \u0422\u0438\u043c, \u0445\u0442\u043e \u043f\u043e\u0447\u0438\u043d\u0430\u0454 \u0432\u0438\u0432\u0447\u0430\u0442\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f, \u0440\u0430\u0434\u0436\u0443 \u043e\u0437\u043d\u0430\u0439\u043e\u043c\u0438\u0442\u0438\u0441\u044f \u0437 \u0443\u0440\u043e\u043a\u0430\u043c\u0438 \u0441\u0430\u043c\u0435 \u0432 \u0442\u0430\u043a\u0456\u0439 \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u043e\u0441\u0442\u0456, \u043f\u0440\u0438\u0447\u043e\u043c\u0443 \u043f\u0456\u0441\u043b\u044f \u0432\u0438\u0432\u0447\u0435\u043d\u043d\u044f \u043f\u0435\u0440\u0448\u0438\u0445 \u0434\u0432\u043e\u0445 \u0441\u0442\u0430\u0442\u0435\u0439 \u043d\u0435 \u0437\u0430\u0432\u0430\u0434\u0438\u0442\u044c \u0437\u0430\u043a\u0440\u0456\u043f\u0438\u0442\u0438 \u0441\u0432\u043e\u0457 \u043d\u0430\u0432\u0438\u0447\u043a\u0438 \u043d\u0430 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u043e\u043c\u0443 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u043c\u0456 \u2013 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f\u0445, \u0449\u043e \u0437\u0432\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u0434\u043e \u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u0438\u0445.</p> <p>\u0404 \u0449\u0435 \u0431\u0456\u043b\u044c\u0448 \u0440\u0456\u0434\u043a\u0456\u0441\u043d\u0456 \u0442\u0438\u043f\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c: \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0443 \u043f\u043e\u0432\u043d\u0438\u0445 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u0430\u0445, \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0411\u0435\u0440\u043d\u0443\u043b\u043b\u0456 \u0442\u0430 \u0434\u0435\u044f\u043a\u0456 \u0456\u043d\u0448\u0456. \u041d\u0430\u0439\u0432\u0430\u0436\u043b\u0438\u0432\u0456\u0448\u0438\u043c\u0438 \u0437 \u0434\u0432\u043e\u0445 \u043e\u0441\u0442\u0430\u043d\u043d\u0456\u0445 \u0432\u0438\u0434\u0456\u0432 \u0454 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0443 \u043f\u043e\u0432\u043d\u0438\u0445 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u0430\u0445, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043a\u0440\u0456\u043c \u0446\u044c\u043e\u0433\u043e \u0414\u0423 \u044f \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u044e \u043d\u043e\u0432\u0438\u0439 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b \u2013 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0435 \u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u043d\u043d\u044f.</p> <p>\u041e\u0442\u0436\u0435, \u043e\u0440\u0456\u0454\u043d\u0442\u0438\u0440\u0438 \u0440\u043e\u0437\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u2013 \u043f\u043e\u0457\u0445\u0430\u043b\u0438:</p> <p>\u0421\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u0437\u0433\u0430\u0434\u0430\u0454\u043c\u043e \u00ab\u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0456\u00bb \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f. \u0412\u043e\u043d\u0438 \u043c\u0456\u0441\u0442\u044f\u0442\u044c \u0437\u043c\u0456\u043d\u043d\u0456 \u0442\u0430 \u0447\u0438\u0441\u043b\u0430. \u041f\u0440\u043e\u0441\u0442\u0456\u0448\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434: \\( x + 2 = 6 \\). \u0429\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u0442\u0438 \u0442\u0430\u043a\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f? \u0426\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0437\u043d\u0430\u0439\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0432\u0441\u0456\u0445 \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0456 \u0437\u0430\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044f\u044e\u0442\u044c \u0446\u044c\u043e\u043c\u0443 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044e. \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u0438, \u0449\u043e \u0434\u0438\u0442\u044f\u0447\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \\( x + 2 = 6 \\) \u043c\u0430\u0454 \u0454\u0434\u0438\u043d\u0438\u0439 \u043a\u043e\u0440\u0456\u043d\u044c \\( x = 4 \\). \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0443, \u043f\u0456\u0434\u0441\u0442\u0430\u0432\u0438\u0432\u0448\u0438 \u0447\u0435\u0442\u0432\u0456\u0440\u043a\u0443 \u0432 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f:</p> \\[ 4 + 2 = 6 \\] <p>\u2013 \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443 \u0440\u0456\u0432\u043d\u0456\u0441\u0442\u044c, \u043e\u0442\u0436\u0435, \u0440\u0456\u0448\u0435\u043d\u043d\u044f \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e.</p> <p>\u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0432\u043b\u0430\u0448\u0442\u043e\u0432\u0430\u043d\u0456 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u043d\u043e \u0442\u0430\u043a \u0441\u0430\u043c\u043e!</p> <p>\u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0432 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u043c\u0456\u0441\u0442\u0438\u0442\u044c:</p> <p>1) \u043d\u0435\u0437\u0430\u043b\u0435\u0436\u043d\u0443 \u0437\u043c\u0456\u043d\u043d\u0443 \\( x \\);</p> <p>2) \u0437\u0430\u043b\u0435\u0436\u043d\u0443 \u0437\u043c\u0456\u043d\u043d\u0443 \\( y \\) (\u0444\u0443\u043d\u043a\u0446\u0456\u044e);</p> <p>3) \u043f\u0435\u0440\u0448\u0443 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0444\u0443\u043d\u043a\u0446\u0456\u0457: \\( y' = \\frac{dy}{dx} \\).</p> <p>\u0412 \u0434\u0435\u044f\u043a\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f\u0445 1-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\u0439 \u00ab\u0456\u043a\u0441\u00bb \u0430\u0431\u043e (\u0456) \u00ab\u0456\u0433\u0440\u0435\u043a\u00bb, \u0430\u043b\u0435 \u0446\u0435 \u043d\u0435 \u0441\u0443\u0442\u0442\u0454\u0432\u043e \u2013 \u0432\u0430\u0436\u043b\u0438\u0432\u043e, \u0449\u043e\u0431 \u0443 \u0414\u0420 \u0431\u0443\u043b\u0430 \u043f\u0435\u0440\u0448\u0430 \u043f\u043e\u0445\u0456\u0434\u043d\u0430 \\( y' \\), \u0456 \u043d\u0435 \u0431\u0443\u043b\u043e \u043f\u043e\u0445\u0456\u0434\u043d\u0438\u0445 \u0432\u0438\u0449\u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u0456\u0432 \u2013 \\( y'' \\), \\( y''' \\) \u0442\u043e\u0449\u043e.</p> <p>\u0429\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u0442\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f? \u0420\u043e\u0437\u0432'\u044f\u0437\u0430\u0442\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u2013 \u0446\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0437\u043d\u0430\u0439\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0432\u0441\u0456\u0445 \u0444\u0443\u043d\u043a\u0446\u0456\u0439, \u044f\u043a\u0456 \u0437\u0430\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044f\u044e\u0442\u044c \u0434\u0430\u043d\u043e\u043c\u0443 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044e (\u0432\u0442\u0456\u043c, \u0456\u043d\u043e\u0434\u0456 \u0434\u043e\u0441\u0438\u0442\u044c \u0456 \u043e\u0434\u043d\u0456\u0454\u0457). \u0422\u043e\u0431\u0442\u043e \u043a\u043e\u0440\u0435\u043d\u044f\u043c\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0454 \u0444\u0443\u043d\u043a\u0446\u0456\u0457. \u0414\u043b\u044f \u0414\u0420 1-\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0442\u0430\u043a\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u0439 \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u043c\u0430\u0454 \u0432\u0438\u0433\u043b\u044f\u0434 \\(y = f(x, C)\\), \u044f\u043a\u0443 \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0438\u043c \u0440\u043e\u0437\u0432'\u044f\u0437\u043a\u043e\u043c \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f (\u0434\u0435 \\(C\\) \u043f\u0440\u0438\u0439\u043c\u0430\u0454 \u0440\u0456\u0437\u043d\u0456 \u0434\u0456\u0439\u0441\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f).</p> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 1</p> <p>\u0420\u043e\u0437\u0432'\u044f\u0437\u0430\u0442\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \\(x y' = y\\).</p> <p>\u041f\u043e\u0432\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442 \u0434\u0456\u0439. \u0417 \u0447\u043e\u0433\u043e \u043f\u043e\u0447\u0430\u0442\u0438 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f?</p> <p>\u0423 \u043f\u0435\u0440\u0448\u0443 \u0447\u0435\u0440\u0433\u0443 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u0438 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \u0432 \u0456\u043d\u0448\u043e\u043c\u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456. \u0417\u0433\u0430\u0434\u0443\u0454\u043c\u043e \u0433\u0440\u043e\u043c\u0456\u0437\u0434\u043a\u0435 \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \\(y' = \\frac{dy}{dx}\\), \u044f\u043a\u0435 \u0431\u0430\u0433\u0430\u0442\u044c\u043e\u043c \u0456\u0437 \u0432\u0430\u0441 \u043d\u0430\u043f\u0435\u0432\u043d\u043e \u0437\u0434\u0430\u0432\u0430\u043b\u043e\u0441\u044f \u043d\u0435\u043f\u043e\u0442\u0440\u0456\u0431\u043d\u0438\u043c \u0456 \u0437\u0430\u0439\u0432\u0438\u043c. \u0423 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f\u0445 \u0440\u0443\u043b\u0438\u0442\u044c \u0441\u0430\u043c\u0435 \u0432\u043e\u043d\u043e!</p> <p>\u041e\u0442\u0436\u0435:</p> <p>\\( x \\cdot \\frac{dy}{dx} = y \\)</p> <p>\u041d\u0430 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0435\u0442\u0430\u043f\u0456 \u0434\u0438\u0432\u0438\u043c\u043e\u0441\u044f, \u0447\u0438 \u043c\u043e\u0436\u043d\u0430 \u0440\u043e\u0437\u0434\u0456\u043b\u0438\u0442\u0438 \u0437\u043c\u0456\u043d\u043d\u0456? \u0429\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0454 \u0440\u043e\u0437\u0434\u0456\u043b\u0438\u0442\u0438 \u0437\u043c\u0456\u043d\u043d\u0456? \u0413\u0440\u0443\u0431\u043e \u043a\u0430\u0436\u0443\u0447\u0438, \u0432 \u043b\u0456\u0432\u0456\u0439 \u0447\u0430\u0441\u0442\u0438\u043d\u0456 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \"\u0456\u0433\u0440\u0438\u043a\u0438\", \u0430 \u0432 \u043f\u0440\u0430\u0432\u0456\u0439 \u0447\u0430\u0441\u0442\u0438\u043d\u0456 \u043e\u0440\u0433\u0430\u043d\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \"\u0456\u043a\u0441\u0438\". \u0420\u043e\u0437\u0434\u0456\u043b\u0435\u043d\u043d\u044f \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0432\u0438\u043a\u043e\u043d\u0443\u0454\u0442\u044c\u0441\u044f \u0437\u0430 \u0440\u0430\u0445\u0443\u043d\u043e\u043a \u00ab\u0448\u043a\u0456\u043b\u044c\u043d\u0438\u0445\u00bb \u043f\u0440\u0430\u0432\u0438\u043b: \u0432\u0438\u043d\u0435\u0441\u0435\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u043d\u0438\u043a\u0456\u0432 \u0437\u0430 \u0434\u0443\u0436\u043a\u0438, \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u0434\u043e\u0434\u0430\u043d\u043a\u0456\u0432 \u0456\u0437 \u0447\u0430\u0441\u0442\u0438\u043d\u0438 \u0432 \u0447\u0430\u0441\u0442\u0438\u043d\u0443 \u0437\u0456 \u0437\u043c\u0456\u043d\u043e\u044e \u0437\u043d\u0430\u043a\u0430, \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u043c\u043d\u043e\u0436\u043d\u0438\u043a\u0456\u0432 \u0456\u0437 \u0447\u0430\u0441\u0442\u0438\u043d\u0438 \u0432 \u0447\u0430\u0441\u0442\u0438\u043d\u0443 \u0437\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u043e\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0456\u0457 \u0456 \u0442. \u043f.</p> <p>\u0414\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u0438 \\(dy\\) \u0456 \\(dx\\) \u2013 \u0446\u0435 \u043f\u043e\u0432\u043d\u043e\u043f\u0440\u0430\u0432\u043d\u0456 \u043c\u043d\u043e\u0436\u043d\u0438\u043a\u0438 \u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u0456 \u0443\u0447\u0430\u0441\u043d\u0438\u043a\u0438 \u0431\u043e\u0439\u043e\u0432\u0438\u0445 \u0434\u0456\u0439. \u0423 \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u0437\u043c\u0456\u043d\u043d\u0456 \u043b\u0435\u0433\u043a\u043e \u0440\u043e\u0437\u0434\u0456\u043b\u044f\u044e\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u043a\u0438\u0434\u0430\u043d\u043d\u044f\u043c \u043c\u043d\u043e\u0436\u043d\u0438\u043a\u0456\u0432 \u0437\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u043e\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0456\u0457:</p> <p>\\(\\frac{dy}{y} = \\frac{dx}{x}\\)</p> <p>\u0417\u043c\u0456\u043d\u043d\u0456 \u0440\u043e\u0437\u0434\u0456\u043b\u0435\u043d\u0456. \u0423 \u043b\u0456\u0432\u0456\u0439 \u0447\u0430\u0441\u0442\u0438\u043d\u0456 \u2013 \u0442\u0456\u043b\u044c\u043a\u0438 \"\u0456\u0433\u0440\u0438\u043a\", \u0443 \u043f\u0440\u0430\u0432\u0456\u0439 \u0447\u0430\u0441\u0442\u0438\u043d\u0456 \u2013 \u0442\u0456\u043b\u044c\u043a\u0438 \"\u0456\u043a\u0441\".</p> <p>\u041d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0435\u0442\u0430\u043f \u2013 \u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u043d\u043d\u044f \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f. \u0412\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043d\u0430\u0432\u0456\u0448\u0443\u0454\u043c\u043e \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0438 \u043d\u0430 \u043e\u0431\u0438\u0434\u0432\u0456 \u0447\u0430\u0441\u0442\u0438\u043d\u0438:</p> <p>\\(\\int \\frac{dy}{y} = \\int \\frac{dx}{x}\\)</p> <p>\u0417\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0438 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0437\u044f\u0442\u0438. \u0423 \u0446\u044c\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0432\u043e\u043d\u0438 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u0456:</p> <p>\\(\\ln |y| = \\ln |x| + C\\)</p> <p>\u042f\u043a \u043c\u0438 \u043f\u0430\u043c'\u044f\u0442\u0430\u0454\u043c\u043e, \u0434\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0433\u043e \u043f\u0435\u0440\u0432\u0456\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043f\u0438\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430. \u0422\u0443\u0442 \u0434\u0432\u0430 \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0438, \u0430\u043b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443 \\(C\\) \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 (\u0442\u043e\u043c\u0443 \u0449\u043e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 + \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u0432\u0441\u0435 \u043e\u0434\u043d\u043e \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0456). \u0423 \u0431\u0456\u043b\u044c\u0448\u043e\u0441\u0442\u0456 \u0432\u0438\u043f\u0430\u0434\u043a\u0456\u0432 \u0446\u0435 \u0434\u043e\u0434\u0430\u0432\u0430\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0449\u0430\u0454\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u0430\u0432\u0443 \u0447\u0430\u0441\u0442\u0438\u043d\u0443.</p> <p>\u041f\u0456\u0441\u043b\u044f \u0442\u043e\u0433\u043e \u044f\u043a \u0432\u0437\u044f\u0442\u0456 \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0438, \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0432\u0432\u0430\u0436\u0430\u0454\u0442\u044c\u0441\u044f \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u0438\u043c. \u0404\u0434\u0438\u043d\u0435, \u0449\u043e, \u044f\u043a\u0449\u043e \"\u0456\u0433\u0440\u0438\u043a\" \u043d\u0435 \u0432\u0438\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 \"\u0456\u043a\u0441\", \u0442\u043e\u0431\u0442\u043e \u0440\u043e\u0437\u0432'\u044f\u0437\u043e\u043a \u043c\u0430\u0454 \u0432\u0438\u0433\u043b\u044f\u0434 \\(F(x, y) = 0\\), \u0442\u043e \u0446\u0435 \u0449\u0435 \u043d\u0435 \u0454 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0438\u043c \u0440\u043e\u0437\u0432'\u044f\u0437\u043a\u043e\u043c \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f. \u0417\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u0446\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0432\u0438\u0440\u0430\u0436\u0430\u044e\u0442\u044c \u0432 \u044f\u0432\u043d\u043e\u043c\u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0439 \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0438\u043c \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u043e\u043c \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f. \u0422\u043e\u0431\u0442\u043e:</p> <p>\\(\\ln |y| = \\ln |x| + C\\)</p> <p>\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0443 \u0442\u0430\u043a\u0456\u0439 \u0444\u043e\u0440\u043c\u0456 \u0446\u0456\u043b\u043a\u043e\u043c \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u043d\u0430, \u0430\u043b\u0435 \u0445\u0456\u0431\u0430 \u043d\u0435\u043c\u0430\u0454 \u043a\u0440\u0430\u0449\u043e\u0433\u043e \u0432\u0430\u0440\u0456\u0430\u043d\u0442\u0443? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043f\u0440\u043e\u0431\u0443\u0454\u043c\u043e \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0438\u0439 \u0440\u043e\u0437\u0432'\u044f\u0437\u043e\u043a.</p> <p>Note</p> <p>\u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0437\u0430\u043f\u0430\u043c'\u044f\u0442\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0448\u0438\u0439 \u0442\u0435\u0445\u043d\u0456\u0447\u043d\u0438\u0439 \u043f\u0440\u0438\u0439\u043e\u043c, \u0432\u0456\u043d \u0434\u0443\u0436\u0435 \u043f\u043e\u0448\u0438\u0440\u0435\u043d\u0438\u0439 \u0456 \u0447\u0430\u0441\u0442\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u0438\u0445 \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f\u0445: \u044f\u043a\u0449\u043e \u043f\u0456\u0441\u043b\u044f \u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u043d\u043d\u044f \u0432 \u043f\u0440\u0430\u0432\u0456\u0439 \u0447\u0430\u0441\u0442\u0438\u043d\u0456 \u0437'\u044f\u0432\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c, \u0442\u043e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443 \u0432 \u0431\u0430\u0433\u0430\u0442\u044c\u043e\u0445 \u0432\u0438\u043f\u0430\u0434\u043a\u0430\u0445 (\u0430\u043b\u0435 \u0434\u0430\u043b\u0435\u043a\u043e \u043d\u0435 \u0437\u0430\u0432\u0436\u0434\u0438!) \u0434\u043e\u0446\u0456\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0442\u0430\u043a\u043e\u0436 \u043f\u0456\u0434 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u043e\u043c. \u0406 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438, \u044f\u043a\u0449\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0456 \u0432\u0438\u0439\u0448\u043b\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438 (\u044f\u043a \u0443 \u0440\u043e\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456).</p> <p>\u0417\u0430\u043c\u0456\u0441\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0443 \\( \\ln |y| = \\ln |x| + C \\) \u0437\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u043f\u0438\u0448\u0443\u0442\u044c \\( \\ln |y| = \\ln |Cx| \\) (\u0456 \u0446\u0435 \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \\( C \\) \u0437 \u0442\u0430\u043a\u0438\u043c \u0436\u0435 \u0443\u0441\u043f\u0456\u0445\u043e\u043c \u043f\u0440\u0438\u0439\u043c\u0430\u0454 \u0432\u0441\u0456 \u0434\u0456\u0439\u0441\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u0449\u043e \u0439 \\( \\ln(C) \\)).</p> <p>\u041d\u0430\u0432\u0456\u0449\u043e \u0446\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e? \u0426\u0435 \u0440\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u043b\u0435\u0433\u0448\u0435 \u0431\u0443\u043b\u043e \u0432\u0438\u0440\u0430\u0437\u0438\u0442\u0438 \\( y \\). \u0412\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u043c\u043e \u0432\u043b\u0430\u0441\u0442\u0438\u0432\u0456\u0441\u0442\u044c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0456\u0432 \\( \\ln a + \\ln b = \\ln ab \\). \u0423 \u0434\u0430\u043d\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443:</p> <p>\\( \\ln |y| = \\ln |Cx| \\)</p> <p>\u0422\u0435\u043f\u0435\u0440 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438 \u0442\u0430 \u043c\u043e\u0434\u0443\u043b\u0456 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u0438\u0431\u0440\u0430\u0442\u0438:</p> <p>\\( y = Cx \\)</p> <p>\u0424\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0443 \u044f\u0432\u043d\u043e\u043c\u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456. \u0426\u0435 \u0456 \u0454 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f.</p> <p>\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c: \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f: \\( y = Cx \\), \u0434\u0443 \\( C=const \\).</p> <p>\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0431\u0430\u0433\u0430\u0442\u044c\u043e\u0445 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c \u0434\u043e\u0441\u0438\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438. \u0423 \u043d\u0430\u0448\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0446\u0435 \u0440\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0437\u043e\u0432\u0441\u0456\u043c \u043f\u0440\u043e\u0441\u0442\u043e: \u0431\u0435\u0440\u0435\u043c\u043e \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f \\( y = Cx \\) \u0456 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u044e\u0454\u043c\u043e \u0439\u043e\u0433\u043e:</p> <p>\\( y' = (Cx)' = C \\)</p> <p>\u041f\u0456\u0441\u043b\u044f \u0447\u043e\u0433\u043e \u043f\u0456\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454\u043c\u043e \\( y = Cx \\) \u0442\u0430 \u043f\u043e\u0445\u0456\u0434\u043d\u0443 \\( y' = C \\) \u0443 \u0432\u0438\u0445\u0456\u0434\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f \\( xy' = y \\):</p> <p>\\( xC = Cx \\)</p> <p>\u041e\u0442\u0440\u0438\u043c\u0430\u043d\u043e \u0440\u0456\u0432\u043d\u0456\u0441\u0442\u044c, \u044f\u043a\u0430 \u0432\u0456\u0440\u043d\u0430 \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c \\( x \\) (\u0442\u043e\u0442\u043e\u0436\u043d\u0456\u0441\u0442\u044c), \u043e\u0442\u0436\u0435, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u0439 \\( y = Cx \\) \u0437\u0430\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044f\u0454 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044e \\( xy' = y \\), \u0449\u043e \u0456 \u0432\u0438\u043c\u0430\u0433\u0430\u043b\u043e\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438.</p> <p>\u041d\u0430\u0434\u0430\u044e\u0447\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0456 \\( C \\) \u0440\u0456\u0437\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f, \u043c\u043e\u0436\u043d\u0430 \u043e\u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u0431\u0435\u0437\u043b\u0456\u0447 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u0438\u0445 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u044c \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f. \u0417\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u0449\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u0430 \u0437 \u0444\u0443\u043d\u043a\u0446\u0456\u0439 \\( y = x \\), \\( y = 2x \\), \\( y = -3x \\) \u0456 \u0442. \u0434. \u0437\u0430\u0434\u043e\u0432\u043e\u043b\u044c\u043d\u044f\u0454 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044e \\( xy' = y \\).</p> <p>\u0406\u043d\u043e\u0434\u0456 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u0441\u0456\u043c\u0435\u0439\u0441\u0442\u0432\u043e\u043c \u0444\u0443\u043d\u043a\u0446\u0456\u0439. \u0423 \u0434\u0430\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f \\( y = Cx \\), \u0434\u0435 \\(C=const\\) \u2013 \u0446\u0435 \u0441\u0456\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u043b\u0456\u043d\u0456\u0439\u043d\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0456\u0439, \u0430 \u0442\u043e\u0447\u043d\u0456\u0448\u0435, \u0441\u0456\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u043f\u0440\u044f\u043c\u0438\u0445 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0456\u0439\u043d\u043e\u0441\u0442\u0435\u0439.</p> <p>\u041f\u0456\u0441\u043b\u044f \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u043e\u0437\u0431\u043e\u0440\u0443 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443 \u0434\u043e\u0440\u0435\u0447\u043d\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0441\u0442\u0438 \u043d\u0430 \u043a\u0456\u043b\u044c\u043a\u0430 \u043d\u0430\u0457\u0432\u043d\u0438\u0445 \u043f\u0438\u0442\u0430\u043d\u044c \u0449\u043e\u0434\u043e \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c:</p> <p>1) \u0423 \u0446\u044c\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u043d\u0430\u043c \u0432\u0434\u0430\u043b\u043e\u0441\u044f \u0440\u043e\u0437\u0434\u0456\u043b\u0438\u0442\u0438 \u0437\u043c\u0456\u043d\u043d\u0456. \u0427\u0438 \u0437\u0430\u0432\u0436\u0434\u0438 \u0446\u0435 \u043c\u043e\u0436\u043d\u0430 \u0437\u0440\u043e\u0431\u0438\u0442\u0438? \u041d\u0456, \u043d\u0435 \u0437\u0430\u0432\u0436\u0434\u0438. \u0406 \u043d\u0430\u0432\u0456\u0442\u044c \u0447\u0430\u0441\u0442\u0456\u0448\u0435 \u0437\u043c\u0456\u043d\u043d\u0456 \u0440\u043e\u0437\u0434\u0456\u043b\u0438\u0442\u0438 \u043d\u0435 \u043c\u043e\u0436\u043d\u0430. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0432 \u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f\u0445 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0441\u043f\u043e\u0447\u0430\u0442\u043a\u0443 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0437\u0430\u043c\u0456\u043d\u0443. \u0412 \u0456\u043d\u0448\u0438\u0445 \u0442\u0438\u043f\u0430\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0443 \u043b\u0456\u043d\u0456\u0439\u043d\u043e\u043c\u0443 \u043d\u0435\u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u043e\u043c\u0443 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u0456 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0440\u0456\u0437\u043d\u0456 \u043f\u0440\u0438\u0439\u043e\u043c\u0438 \u0442\u0430 \u043c\u0435\u0442\u043e\u0434\u0438 \u0434\u043b\u044f \u0437\u043d\u0430\u0445\u043e\u0434\u0436\u0435\u043d\u043d\u044f \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f. \u0420\u0456\u0432\u043d\u044f\u043d\u043d\u044f \u0437 \u0440\u043e\u0437\u0434\u0456\u043b\u044f\u044e\u0447\u0438\u043c\u0438 \u0437\u043c\u0456\u043d\u043d\u0438\u043c\u0438, \u044f\u043a\u0456 \u043c\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u0454\u043c\u043e \u043d\u0430 \u043f\u0435\u0440\u0448\u043e\u043c\u0443 \u0443\u0440\u043e\u0446\u0456, \u2013 \u043d\u0430\u0439\u043f\u0440\u043e\u0441\u0442\u0456\u0448\u0438\u0439 \u0442\u0438\u043f \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u0440\u0456\u0432\u043d\u044f\u043d\u044c.</p> <p>2) \u0427\u0438 \u0437\u0430\u0432\u0436\u0434\u0438 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u043e\u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u0442\u0438 \u0434\u0438\u0444\u0435\u0440\u0435\u043d\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f? \u041d\u0456, \u043d\u0435 \u0437\u0430\u0432\u0436\u0434\u0438. \u0414\u0443\u0436\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u0438 \u00ab\u043d\u0430\u0432\u043e\u0440\u043e\u0447\u0435\u043d\u0435\u00bb \u0440\u0456\u0432\u043d\u044f\u043d\u043d\u044f, \u044f\u043a\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u043f\u0440\u043e\u0456\u043d\u0442\u0435\u0433\u0440\u0443\u0432\u0430\u0442\u0438, \u043a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u0456\u0441\u043d\u0443\u044e\u0442\u044c \u0442\u0430\u043a\u0456 \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0438, \u044f\u043a\u0456 \u043d\u0435 \u043c\u043e\u0436\u043d\u0430 \u043e\u0431\u0447\u0438\u0441\u043b\u0438\u0442\u0438. \u0410\u043b\u0435 \u043f\u043e\u0434\u0456\u0431\u043d\u0456 \u0414\u0420 \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u0440\u0456\u0448\u0438\u0442\u0438 \u043d\u0430\u0431\u043b\u0438\u0436\u0435\u043d\u043e \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u0456\u0432.</p> <p>3) \u0423 \u0434\u0430\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u043c\u0438 \u043e\u0442\u0440\u0438\u043c\u0430\u043b\u0438 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0430 \\(\\ln|y|=\\ln|x|+\\ln|C|\\). \u0427\u0438 \u0437\u0430\u0432\u0436\u0434\u0438 \u043c\u043e\u0436\u043d\u0430 \u0437 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0430 \u0437\u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f, \u0442\u043e\u0431\u0442\u043e \u0432\u0438\u0440\u0430\u0437\u0438\u0442\u0438 \u00ab\u0456\u0433\u0440\u0438\u043a\u00bb \u0443 \u044f\u0432\u043d\u043e\u043c\u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456?* \u041d\u0456, \u043d\u0435 \u0437\u0430\u0432\u0436\u0434\u0438. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434: \\( y+\\ln|y|= \\arcsin x + xy^2 +C\\). \u041d\u0443 \u0456 \u044f\u043a \u0442\u0443\u0442 \u0432\u0438\u0440\u0430\u0437\u0438\u0442\u0438 \u00ab\u0456\u0433\u0440\u0438\u043a\u00bb?! \u0423 \u0442\u0430\u043a\u0438\u0445 \u0432\u0438\u043f\u0430\u0434\u043a\u0430\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0441\u043b\u0456\u0434 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0430. \u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u0456\u043d\u043e\u0434\u0456 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u0435 \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f \u043c\u043e\u0436\u043d\u0430 \u0437\u043d\u0430\u0439\u0442\u0438, \u0430\u043b\u0435 \u0432\u043e\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430\u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0433\u0440\u043e\u043c\u0456\u0437\u0434\u043a\u043e \u0456 \u043d\u0435\u0437\u0440\u0443\u0447\u043d\u043e, \u0449\u043e \u043a\u0440\u0430\u0449\u0435 \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0437\u0430\u0433\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u0430.</p> <p>4) ...\u041c\u0430\u0431\u0443\u0442\u044c, \u043f\u043e\u043a\u0438 \u0449\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e. \u0423 \u043f\u0435\u0440\u0448\u043e\u043c\u0443 \u0436 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0456 \u043c\u0438 \u0437\u0456\u0442\u043a\u043d\u0443\u043b\u0438\u0441\u044f \u0437 \u0449\u0435 \u043e\u0434\u043d\u0438\u043c \u0432\u0430\u0436\u043b\u0438\u0432\u0438\u043c \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u043c, \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0438\u043c \u0437 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u043d\u044f\u043c \u0437\u043c\u0456\u043d\u043d\u0438\u0445 \u0443 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a, \u0430\u043b\u0435 \u0449\u043e\u0431 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u00ab\u043d\u043e\u0432\u0430\u0447\u043a\u0456\u0432\u00bb \u043b\u0430\u0432\u0438\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0457, \u0437\u0430\u043b\u0438\u0448\u0443 \u0439\u043e\u0433\u043e \u0434\u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u043a\u0443.</p> <p>\u041d\u0435 \u0431\u0443\u0434\u0435\u043c\u043e \u043f\u043e\u0441\u043f\u0456\u0448\u0430\u0442\u0438. \u0429\u0435 \u043e\u0434\u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u0435 \u0414\u0420 \u0456 \u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0438\u043f\u043e\u0432\u0438\u0439 \u043f\u0440\u0438\u0439\u043e\u043c \u0440\u043e\u0437\u0432'\u044f\u0437\u0430\u043d\u043d\u044f:</p>"},{"location":"modes/","title":"\u041c\u043d\u043e\u0436\u0438\u043d\u0438. \u041e\u043f\u0435\u0440\u0430\u0446\u0456\u0457 \u043d\u0430\u0434 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438. \u0412\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d. \u041f\u043e\u0442\u0443\u0436\u043d\u0456\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d","text":""},{"location":"modes/#_2","title":"\u041c\u043d\u043e\u0436\u0438\u043d\u0430. \u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u043c\u043d\u043e\u0436\u0438\u043d","text":"<p>\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \u2013 \u0446\u0435 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u0442\u044f \u043d\u0435 \u043b\u0438\u0448\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438, \u0430 \u0439 \u0443\u0441\u044c\u043e\u0433\u043e \u043d\u0430\u0432\u043a\u043e\u043b\u0438\u0448\u043d\u044c\u043e\u0433\u043e \u0441\u0432\u0456\u0442\u0443. \u0412\u0456\u0437\u044c\u043c\u0456\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0437\u0430\u0440\u0430\u0437 \u0443 \u0440\u0443\u043a\u0443 \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442. \u041e\u0441\u044c \u0432\u0430\u043c \u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0430, \u0449\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430.</p> <p>\u0423 \u0448\u0438\u0440\u043e\u043a\u043e\u043c\u0443 \u0441\u0435\u043d\u0441\u0456, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u2013 \u0446\u0435 \u0441\u0443\u043a\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u043e\u0431'\u0454\u043a\u0442\u0456\u0432 (\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432), \u044f\u043a\u0456 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u044f\u043a \u0454\u0434\u0438\u043d\u0435 \u0446\u0456\u043b\u0435 (\u0437\u0430 \u0442\u0438\u043c\u0438 \u0447\u0438 \u0456\u043d\u0448\u0438\u043c\u0438 \u043e\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u043a\u0440\u0438\u0442\u0435\u0440\u0456\u044f\u043c\u0438 \u0430\u0431\u043e \u043e\u0431\u0441\u0442\u0430\u0432\u0438\u043d\u0430\u043c\u0438). \u041f\u0440\u0438\u0447\u043e\u043c\u0443, \u0446\u0435 \u043d\u0435 \u043b\u0438\u0448\u0435 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u044c\u043d\u0456 \u043e\u0431'\u0454\u043a\u0442\u0438, \u0430\u043b\u0435 \u0439 \u0431\u0443\u043a\u0432\u0438, \u0446\u0438\u0444\u0440\u0438, \u0442\u0435\u043e\u0440\u0435\u043c\u0438, \u0434\u0443\u043c\u043a\u0438, \u0435\u043c\u043e\u0446\u0456\u0457 \u0442\u043e\u0449\u043e.</p> <p>\u0417\u0430\u0437\u0432\u0438\u0447\u0430\u0439 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c\u0441\u044f \u0432\u0435\u043b\u0438\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0438\u043c\u0438 \u043b\u0456\u0442\u0435\u0440\u0430\u043c\u0438 \\( A, B, C, \\dots, X, Y, Z \\) (\u044f\u043a \u0432\u0430\u0440\u0456\u0430\u043d\u0442, \u0437 \u043f\u0456\u0434\u0440\u044f\u0434\u043a\u043e\u0432\u0438\u043c\u0438 \u0456\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438: \\( A_1, A_2, B_1 \\) \u0442\u043e\u0449\u043e), \u0430 \u0439\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u0437\u0430\u043f\u0438\u0441\u0443\u044e\u0442\u044c\u0441\u044f \u0443 \u0444\u0456\u0433\u0443\u0440\u043d\u0438\u0445 \u0434\u0443\u0436\u043a\u0430\u0445, \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:</p> <ul> <li>\\( A = \\{\u0430, \u0431, \u0432, \u0433, \\dots, \u044c, \u044e, \u044f\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443;</li> <li>\\( N = \\{1, 2, 3, 4, \\dots\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b;</li> </ul> <p>\u041d\u0443 \u0449\u043e \u0436, \u043d\u0430\u0441\u0442\u0430\u0432 \u0447\u0430\u0441 \u0442\u0440\u043e\u0445\u0438 \u043f\u043e\u0437\u043d\u0430\u0439\u043e\u043c\u0438\u0442\u0438\u0441\u044c:</p> <ul> <li>\\( S_1 = \\{\\text{\u0410\u043d\u043d\u0430, \u0412\u0430\u043d\u044f, \u0422\u0430\u043d\u044f, \u041f\u0435\u0442\u044f, \u042e\u043b\u044f, \u0413\u0430\u043b\u044f}\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0432 1-\u043c\u0443 \u0440\u044f\u0434\u0443.</li> </ul> <p>...\u0406 \u044f \u0440\u0430\u0434\u0438\u0439 \u0431\u0430\u0447\u0438\u0442\u0438 \u0432\u0430\u0448\u0456 \u0441\u0435\u0440\u0439\u043e\u0437\u043d\u0456 \u0442\u0430 \u0437\u043e\u0441\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u0456 \u043e\u0431\u043b\u0438\u0447\u0447\u044f =)</p> <p>\u041c\u043d\u043e\u0436\u0438\u043d\u0438 \\( A \\) \u0456 \\( S_1 \\) \u0454 \u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u043c\u0438 (\u0441\u043a\u043b\u0430\u0434\u0430\u044e\u0442\u044c\u0441\u044f \u0437 \u043a\u0456\u043d\u0446\u0435\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432), \u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( N \\) \u2013 \u0446\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u043e\u0457 \u043c\u043d\u043e\u0436\u0438\u043d\u0438. \u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e, \u0432 \u0442\u0435\u043e\u0440\u0456\u0457 \u0456 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0446\u0456 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0442\u0430\u043a \u0437\u0432\u0430\u043d\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0430:</p> <ul> <li>\\( \\emptyset \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430, \u0432 \u044f\u043a\u0456\u0439 \u043d\u0435\u043c\u0430\u0454 \u0436\u043e\u0434\u043d\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430.</li> </ul> <p>\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0430\u043c \u0434\u043e\u0431\u0440\u0435 \u0432\u0456\u0434\u043e\u043c\u0438\u0439 \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( S_1 \\) \u043d\u0430 \u0456\u0441\u043f\u0438\u0442\u0456 \u0447\u0430\u0441\u0442\u043a\u043e\u0432\u043e \u0431\u0443\u0432\u0430\u0454 \u043f\u043e\u0440\u043e\u0436\u043d\u044c\u043e\u044e =)</p> <p>\u041d\u0430\u043b\u0435\u0436\u043d\u0456\u0441\u0442\u044c \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0437\u0430\u043f\u0438\u0441\u0443\u0454\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c \\( \\in \\), \u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:</p> <ul> <li>\\( \u0454 \\in A \\) \u2013 \u0431\u0443\u043a\u0432\u0430 \"\u0454\" \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443;</li> <li>\\( \\epsilon \\notin A \\) \u2013 \u0431\u0443\u043a\u0432\u0430 \"\u0435\u043f\u0441\u0456\u043b\u043e\u043d\" \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443;</li> <li>\\( 5 \\in N \\) \u2013 \u0447\u0438\u0441\u043b\u043e 5 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b;</li> <li>\\( 5{,}5 \\notin N \\) \u2013 \u0430 \u043e\u0441\u044c \u0447\u0438\u0441\u043b\u043e 5,5 \u2013 \u0443\u0436\u0435 \u043d\u0456;</li> </ul> <p>\u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440 \\( \\notin S_1 \\) \u2013 \u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440 \u043d\u0435 \u0441\u0438\u0434\u0438\u0442\u044c \u0443 \u043f\u0435\u0440\u0448\u043e\u043c\u0443 \u0440\u044f\u0434\u0443 (\u0456 \u0442\u0438\u043c \u0431\u0456\u043b\u044c\u0448\u0435, \u043d\u0435 \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\) \u0430\u0431\u043e \\( N \\) =) )</p> <p>\u0412 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0456\u0439 \u0456 \u043d\u0435 \u0434\u0443\u0436\u0435 \u0430\u043b\u0433\u0435\u0431\u0440\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c\u0441\u044f \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u044c\u043a\u0438\u043c\u0438 \u043b\u0456\u0442\u0435\u0440\u0430\u043c\u0438 \\( a, b, c, \\dots, x, y, z \\), \u0456, \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e, \u0444\u0430\u043a\u0442 \u043d\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u0432 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u043c\u0443 \u0441\u0442\u0438\u043b\u0456:</p> <ul> <li>\\( x \\in X \\) \u2013 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \\( x \\) \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( X \\).</li> </ul> <p>\u041f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u0432\u0438\u0449\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0456 \u043f\u0440\u044f\u043c\u0438\u043c \u043f\u0435\u0440\u0435\u043b\u0456\u043a\u043e\u043c \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432, \u0430\u043b\u0435 \u0446\u0435 \u043d\u0435 \u0454\u0434\u0438\u043d\u0438\u0439 \u0441\u043f\u043e\u0441\u0456\u0431 \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0438: \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435 \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0442\u0438 \u0457\u0457 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u043f\u0435\u0432\u043d\u043e\u0457 \u043e\u0437\u043d\u0430\u043a\u0438 (\u0432\u043b\u0430\u0441\u0442\u0438\u0432\u043e\u0441\u0442\u0456), \u044f\u043a\u0438\u0439 \u043f\u0440\u0438\u0442\u0430\u043c\u0430\u043d\u043d\u0438\u0439 \u0443\u0441\u0456\u043c \u0457\u0457 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c. \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434:</p> <ul> <li>\\( N^* = \\{n \\in N \\mid n &lt; 100\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0432\u0441\u0456\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u043c\u0435\u043d\u0448\u0438\u0445 \u0437\u0430 \u0441\u0442\u043e.</li> </ul> <p>Info</p> <p>\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u0430 \u0440\u0438\u0441\u043a\u0430 \\( \\mid \\) \u0432\u0438\u0440\u0430\u0436\u0430\u0454 \u0441\u043b\u043e\u0432\u043e\u0441\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044f \"\u044f\u043a\u0456\", \"\u0442\u0430\u043a\u0438\u0445, \u0449\u043e\". \u0414\u043e\u0441\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u043e \u0437\u0430\u043c\u0456\u0441\u0442\u044c \u043d\u0435\u0457 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u0432\u043e\u043a\u0440\u0430\u043f\u043a\u0430: \\( N^* = \\{n \\in N : n &lt; 100\\} \\). \u0424\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0447\u0438\u0442\u0430\u0454\u0442\u044c\u0441\u044f \u044f\u043a: \"\u041c\u043d\u043e\u0436\u0438\u043d\u0430 \\( N^* \\) \u2013 \u0446\u0435 \u0441\u0443\u043a\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u0442\u0430\u043a\u0438\u0445 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0456\u0432, \u044f\u043a\u0456 \u043d\u0430\u043b\u0435\u0436\u0430\u0442\u044c \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( N \\) \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u0442\u0430\u043a\u0438\u0445, \u0449\u043e \\( n &lt; 100 \\)\". </p> <p>\u041c\u043e\u043b\u043e\u0434\u0446\u0456!</p> <p>\u0426\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u043c\u043e\u0436\u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u0438 \u0439 \u043f\u0440\u044f\u043c\u0438\u043c \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u0443\u0432\u0430\u043d\u043d\u044f\u043c:</p> <p>\\( N^* = \\{1, 2, 3, \\dots, 97, 98, 99\\} \\)</p> <p>\u0429\u0435 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438:</p> <p>\\( S_1 = \\{\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0438\\ \u0437\u0430\u0439\u043c\u0430\u044e\u0442\u044c\\ \u043c\u0456\u0441\u0446\u044f\\ \u0432\\ 1-\u043c\u0443\\ \u0440\u044f\u0434\u0443\\} \\) \u2013 \u0456 \u044f\u043a\u0449\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0432 1-\u043c\u0443 \u0440\u044f\u0434\u0443 \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e \u0431\u0430\u0433\u0430\u0442\u043e, \u0442\u043e \u0442\u0430\u043a\u0438\u0439 \u0437\u0430\u043f\u0438\u0441 \u043d\u0430\u0431\u0430\u0433\u0430\u0442\u043e \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435, \u043d\u0456\u0436 \u0457\u0445 \u043f\u0440\u044f\u043c\u0435 \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u0443\u0432\u0430\u043d\u043d\u044f.</p> <p>\\( O = \\{x \\mid 0 \\leq x \\leq 1\\} \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0447\u0438\u0441\u0435\u043b, \u0449\u043e \u043d\u0430\u043b\u0435\u0436\u0430\u0442\u044c \u0432\u0456\u0434\u0440\u0456\u0437\u043a\u0443 \\([0, 1]\\). \u0417\u0432\u0435\u0440\u043d\u0456\u0442\u044c \u0443\u0432\u0430\u0433\u0443, \u0449\u043e \u0442\u0443\u0442 \u043c\u0430\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u0443\u0432\u0430\u0437\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b (\u043f\u0440\u043e \u043d\u0438\u0445 \u043f\u0456\u0437\u043d\u0456\u0448\u0435), \u044f\u043a\u0456 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u0443\u0432\u0430\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0443 \u0432\u0436\u0435 \u043d\u0435 \u043c\u043e\u0436\u043b\u0438\u0432\u043e.</p> <p>\u0421\u043b\u0456\u0434 \u0437\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u0438, \u0449\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043d\u0435 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0431\u0443\u0442\u0438 \"\u043e\u0434\u043d\u043e\u0440\u0456\u0434\u043d\u0438\u043c\u0438\" \u0447\u0438 \u043b\u043e\u0433\u0456\u0447\u043d\u043e \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0438\u043c\u0438. \u0412\u0456\u0437\u044c\u043c\u0456\u0442\u044c \u0432\u0435\u043b\u0438\u043a\u0438\u0439 \u043f\u0430\u043a\u0435\u0442 \u0456 \u043f\u043e\u0447\u043d\u0456\u0442\u044c \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0442\u0438 \u0432 \u043d\u044c\u043e\u0433\u043e \u0440\u0456\u0437\u043d\u0456 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0438. \u0423 \u0446\u044c\u043e\u043c\u0443 \u043d\u0435\u043c\u0430\u0454 \u043d\u0456\u044f\u043a\u043e\u0457 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456, \u0430\u043b\u0435, \u0442\u0438\u043c \u043d\u0435 \u043c\u0435\u043d\u0448, \u0439\u0434\u0435\u0442\u044c\u0441\u044f \u043f\u0440\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0456\u0432. \u0406\u043d\u0430\u043a\u0448\u0435 \u043a\u0430\u0436\u0443\u0447\u0438, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u2013 \u0446\u0435 \u0456 \u0454 \u0432\u0456\u0434\u043e\u043a\u0440\u0435\u043c\u043b\u0435\u043d\u0438\u0439 \"\u043f\u0430\u043a\u0435\u0442\", \u0443 \u044f\u043a\u043e\u043c\u0443 \"\u0432\u043e\u043b\u0435\u044e \u0434\u043e\u043b\u0456\" \u0432\u0438\u044f\u0432\u0438\u043b\u0430\u0441\u044f \u0434\u0435\u044f\u043a\u0430 \u0441\u0443\u043a\u0443\u043f\u043d\u0456\u0441\u0442\u044c \u043e\u0431'\u0454\u043a\u0442\u0456\u0432.</p>"},{"location":"modes/#_3","title":"\u041f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0438","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e \u0432\u0441\u0435 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e \u0432\u0436\u0435 \u0437 \u0441\u0430\u043c\u043e\u0457 \u043d\u0430\u0437\u0432\u0438: \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( G' \\) \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( A \\), \u044f\u043a\u0449\u043e \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( G' \\) \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\). \u0406\u043d\u0430\u043a\u0448\u0435 \u043a\u0430\u0436\u0443\u0447\u0438, \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( G' \\) \u043c\u0456\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u0443 \u043c\u043d\u043e\u0436\u0438\u043d\u0456 \\( A \\):</p> \\[ G' \\subseteq A \\] <p>\u0417\u043d\u0430\u043a \\( \\subseteq \\) \u043d\u0430\u0437\u0438\u0432\u0430\u044e\u0442\u044c \u0437\u043d\u0430\u043a\u043e\u043c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f.</p> <p>\u041f\u043e\u0432\u0435\u0440\u043d\u0456\u043c\u043e\u0441\u044f \u0434\u043e \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443, \u0432 \u044f\u043a\u043e\u043c\u0443 \\( A \\) \u2013 \u0446\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0431\u0443\u043a\u0432 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443. \u041f\u043e\u0437\u043d\u0430\u0447\u0438\u043c\u043e \u0447\u0435\u0440\u0435\u0437 \\( G \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0439\u043e\u0433\u043e \u0433\u043e\u043b\u043e\u0441\u043d\u0438\u0445 \u0431\u0443\u043a\u0432. \u0422\u043e\u0434\u0456:</p> \\[ G \\subseteq A \\] <p>\u0422\u0430\u043a\u043e\u0436 \u043c\u043e\u0436\u043d\u0430 \u0432\u0438\u0434\u0456\u043b\u0438\u0442\u0438 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u043f\u0440\u0438\u0433\u043e\u043b\u043e\u0441\u043d\u0438\u0445 \u0431\u0443\u043a\u0432 \u0456 \u0432\u0437\u0430\u0433\u0430\u043b\u0456 \u2013 \u0434\u043e\u0432\u0456\u043b\u044c\u043d\u0443 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0443, \u0449\u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0437 \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 (\u0430\u043b\u0435 \u043d\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u044c\u043e\u0457) \u0432\u0437\u044f\u0442\u0438\u0445 \u043a\u0438\u0440\u0438\u043b\u0438\u0447\u043d\u0438\u0445 \u0431\u0443\u043a\u0432. \u0406, \u043e\u0442\u0436\u0435, \u0431\u0443\u0434\u044c-\u044f\u043a\u0430 \u0431\u0443\u043a\u0432\u0430 \u043a\u0438\u0440\u0438\u043b\u0438\u0446\u0456 \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( A \\).</p> <p>\u0412\u0437\u0430\u0454\u043c\u043e\u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044f \u043c\u0456\u0436 \u043c\u043d\u043e\u0436\u0438\u043d\u0430\u043c\u0438 \u0437\u0440\u0443\u0447\u043d\u043e \u0437\u043e\u0431\u0440\u0430\u0436\u0443\u0432\u0430\u0442\u0438 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0443\u043c\u043e\u0432\u043d\u043e\u0457 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0457 \u0441\u0445\u0435\u043c\u0438, \u044f\u043a\u0430 \u043d\u0430\u0437\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u043a\u0440\u0443\u0433\u0430\u043c\u0438 \u0415\u0439\u043b\u0435\u0440\u0430.</p> <p>\u041d\u0435\u0445\u0430\u0439 \\( S \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0443 1-\u043c\u0443 \u0440\u044f\u0434\u0443, \\( U \\) \u2013 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0433\u0440\u0443\u043f\u0438, \\( U = S \\cup S' \\), \u0434\u0435 \\( S' \\) \u2013 \u0456\u043d\u0448\u0456 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0438 \u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0443. \u0422\u043e\u0434\u0456 \u0432\u0456\u0434\u043d\u043e\u0448\u0435\u043d\u043d\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \\( S \\subseteq U \\) \u043c\u043e\u0436\u043d\u0430 \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c:  \u041c\u043d\u043e\u0436\u0438\u043d\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u0456\u043d\u0448\u043e\u0433\u043e \u0412\u041d\u0417 \u0441\u043b\u0456\u0434 \u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0438 \u043a\u0440\u0443\u0433\u043e\u043c, \u044f\u043a\u0438\u0439 \u043d\u0435 \u043f\u0435\u0440\u0435\u0442\u0438\u043d\u0430\u0454 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u0454 \u043a\u043e\u043b\u043e; \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0456\u0432 \u043a\u0440\u0430\u0457\u043d\u0438 \u2013 \u043a\u0440\u0443\u0433\u043e\u043c, \u044f\u043a\u0438\u0439 \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0443 \u0441\u043e\u0431\u0456 \u043e\u0431\u0438\u0434\u0432\u0430 \u0446\u0456 \u043a\u043e\u043b\u0430, \u0456 \u0442. \u0434.</p> <p>\u0422\u0438\u043f\u043e\u0432\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u043c\u0438 \u0441\u043f\u043e\u0441\u0442\u0435\u0440\u0456\u0433\u0430\u0454\u043c\u043e \u043f\u0440\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u0438\u0445 \u043c\u043d\u043e\u0436\u0438\u043d. \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u043c\u043e \u0448\u043a\u0456\u043b\u044c\u043d\u0438\u0439 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b, \u044f\u043a\u0438\u0439 \u0432\u0430\u0436\u043b\u0438\u0432\u043e \u0442\u0440\u0438\u043c\u0430\u0442\u0438 \u043d\u0430 \u0443\u0432\u0430\u0437\u0456 \u043f\u0456\u0434 \u0447\u0430\u0441 \u0432\u0438\u0432\u0447\u0435\u043d\u043d\u044f \u0432\u0438\u0449\u043e\u0457 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438:</p>"},{"location":"modes/#_4","title":"\u0427\u0438\u0441\u043b\u043e\u0432\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438","text":"<p>\u042f\u043a \u0432\u0456\u0434\u043e\u043c\u043e, \u0456\u0441\u0442\u043e\u0440\u0438\u0447\u043d\u043e \u043f\u0435\u0440\u0448\u0438\u043c\u0438 \u0437'\u044f\u0432\u0438\u043b\u0438\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0456 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0456 \u0434\u043b\u044f \u043f\u0456\u0434\u0440\u0430\u0445\u0443\u043d\u043a\u0443 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u043e\u0431'\u0454\u043a\u0442\u0456\u0432 (\u043b\u044e\u0434\u0435\u0439, \u043a\u0443\u0440\u0435\u0439, \u0434\u0443\u0431\u0456\u0432, \u043c\u043e\u043d\u0435\u0442 \u0442\u043e\u0449\u043e). \u0426\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0432\u0436\u0435 \u0437\u0443\u0441\u0442\u0440\u0456\u043b\u043e\u0441\u044f \u0432 \u0441\u0442\u0430\u0442\u0442\u0456, \u0454\u0434\u0438\u043d\u0435, \u0449\u043e \u0437\u0430\u0440\u0430\u0437 \u0442\u0440\u043e\u0445\u0438-\u0447\u0443\u0442\u044c \u0437\u043c\u0456\u043d\u044e\u0454\u043c\u043e \u0439\u043e\u0433\u043e \u043f\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f. \u0421\u043f\u0440\u0430\u0432\u0430 \u0432 \u0442\u043e\u043c\u0443, \u0449\u043e \u0446\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u0456 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u043e \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u0442\u0438 \u0436\u0438\u0440\u043d\u0438\u043c\u0438, \u0441\u0442\u0438\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0438\u043c\u0438 \u0430\u0431\u043e \u0441\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438. \u041d\u0430\u043c \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0436\u0438\u0440\u043d\u0438\u0439 \u0448\u0440\u0438\u0444\u0442:</p> <p>\\( \\mathbb{N} = \\{1, 2, 3, 4, 5, \\dots\\} \\)</p> <p>\u0406\u043d\u043e\u0434\u0456 \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0456\u0434\u043d\u043e\u0441\u044f\u0442\u044c \u043d\u0443\u043b\u044c.</p> <p>\u042f\u043a\u0449\u043e \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{N} \\) \u0434\u043e\u0434\u0430\u0442\u0438 \u0442\u0456 \u0436 \u0447\u0438\u0441\u043b\u0430 \u0437 \u043f\u0440\u043e\u0442\u0438\u043b\u0435\u0436\u043d\u0438\u043c \u0437\u043d\u0430\u043a\u043e\u043c \u0456 \u043d\u0443\u043b\u044c, \u0442\u043e \u0432\u0438\u0439\u0434\u0435 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> <p>\\( \\mathbb{Z} = \\{\\dots, -3, -2, -1, 0, 1, 2, 3, \\dots\\} \\), \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u0456\u0437\u0430\u0442\u043e\u0440\u0438 \u0456 \u043b\u0435\u0434\u0430\u0440\u0456 \u0437\u0430\u043f\u0438\u0441\u0443\u044e\u0442\u044c \u0439\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438 \u0437\u0456 \u0437\u043d\u0430\u0447\u043a\u0430\u043c\u0438 \u00ab\u043f\u043b\u044e\u0441 \u043c\u0456\u043d\u0443\u0441\u00bb))</p> <p>\\( \\mathbb{Z} = \\{0, \\pm 1, \\pm 2, \\pm 3, \\dots\\} \\)</p> <p>\u0426\u0456\u043b\u043a\u043e\u043c \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u0449\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> <p>\\( \\mathbb{N} \\subset \\mathbb{Z} \\) \u2013 \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043a\u043e\u0436\u0435\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{N} \\) \u043d\u0430\u043b\u0435\u0436\u0438\u0442\u044c \u0434\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{Z} \\). \u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u0441\u043c\u0456\u043b\u0438\u0432\u043e \u043d\u0430\u0437\u0432\u0430\u0442\u0438 \u0446\u0456\u043b\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.</p> <p>\u041d\u0430\u0437\u0432\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0442\u0435\u0436 \u00ab\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u00bb: \u0446\u0456\u043b\u0456 \u0447\u0438\u0441\u043b\u0430 \u2013 \u0446\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u044c, \u043d\u0456\u044f\u043a\u0438\u0445 \u0434\u0440\u043e\u0431\u0456\u0432.</p> <p>\u0406 \u044f\u043a\u0449\u043e \u0432\u0436\u0435 \u043f\u0440\u043e \u0446\u0456\u043b\u0456, \u0442\u043e \u043e\u0434\u0440\u0430\u0437\u0443 \u0436 \u0437\u0433\u0430\u0434\u0430\u0454\u043c\u043e \u0432\u0430\u0436\u043b\u0438\u0432\u0456 \u043e\u0437\u043d\u0430\u043a\u0438 \u0457\u0445 \u043f\u043e\u0434\u0456\u043b\u044c\u043d\u043e\u0441\u0442\u0456 \u043d\u0430 2, 3, 4, 5 \u0456 10, \u044f\u043a\u0456 \u0434\u043e\u043f\u043e\u043c\u0430\u0433\u0430\u044e\u0442\u044c \u0440\u043e\u0437\u0432'\u044f\u0437\u0443\u0432\u0430\u0442\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u0456 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0432\u0430\u043b\u044c\u043d\u0456 \u0437\u0430\u0434\u0430\u0447\u0456 \u0447\u0438 \u043d\u0435 \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u0434\u043d\u044f:</p> <p>\u0426\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 2 \u0431\u0435\u0437 \u0437\u0430\u043b\u0438\u0448\u043a\u0443, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u043e \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430 0, 2, 4, 6 \u0430\u0431\u043e 8 (\u0442\u043e\u0431\u0442\u043e \u043d\u0430 \u0431\u0443\u0434\u044c-\u044f\u043a\u0443 \u043f\u0430\u0440\u043d\u0443 \u0446\u0438\u0444\u0440\u0443). \u041d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, \u0447\u0438\u0441\u043b\u0430:</p> <ul> <li>-160, -1502, -24, 66996, 818 \u2013 \u0434\u0456\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0430 2 \u0431\u0435\u0437 \u0437\u0430\u043b\u0438\u0448\u043a\u0443.</li> </ul> <p>\u0406 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0436 \u043e\u0434\u0440\u0430\u0437\u0443 \u0437\u0433\u0430\u0434\u0430\u0454\u043c\u043e \u0449\u0435 \u043e\u0434\u0438\u043d \u00ab\u0441\u043f\u043e\u0440\u0456\u0434\u043d\u0435\u043d\u0438\u0439\u00bb \u043f\u0440\u0438\u0437\u043d\u0430\u043a: \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4, \u044f\u043a\u0449\u043e \u0447\u0438\u0441\u043b\u043e, \u0441\u043a\u043b\u0430\u0434\u0435\u043d\u0435 \u0437 \u0434\u0432\u043e\u0445 \u0439\u043e\u0433\u043e \u043e\u0441\u0442\u0430\u043d\u043d\u0456\u0445 \u0446\u0438\u0444\u0440 (\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0457\u0445 \u0441\u043b\u0456\u0434\u0443\u0432\u0430\u043d\u043d\u044f), \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4.</p> <ul> <li>400 \u2013 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 00 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4);</li> <li>24 \u2013 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 24 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4);</li> <li>-96 \u2013 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 96 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4);</li> <li>818 \u2013 \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4 (\u0442\u0430\u043a \u044f\u043a 18 \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 4).</li> </ul> <p>\u0421\u0430\u043c\u043e\u0441\u0442\u0456\u0439\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0456\u0442\u044c \u043d\u0435\u0441\u043a\u043b\u0430\u0434\u043d\u0435 \u043e\u0431\u0491\u0440\u0443\u043d\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0446\u044c\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0443.</p> <p>\u0417 \u043f\u043e\u0434\u0456\u043b\u044c\u043d\u0456\u0441\u0442\u044e \u043d\u0430 3 \u0442\u0440\u043e\u0445\u0438 \u0441\u043a\u043b\u0430\u0434\u043d\u0456\u0448\u0435: \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0431\u0435\u0437 \u0437\u0430\u043b\u0438\u0448\u043a\u0443, \u044f\u043a\u0449\u043e \u0441\u0443\u043c\u0430 \u0446\u0438\u0444\u0440, \u0449\u043e \u0432\u0445\u043e\u0434\u044f\u0442\u044c \u0434\u043e \u043d\u044c\u043e\u0433\u043e, \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3.</p> <p>\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u043c\u043e, \u0447\u0438 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0447\u0438\u0441\u043b\u043e \\( 27901 \\). \u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u0443\u0454\u043c\u043e \u0439\u043e\u0433\u043e \u0446\u0438\u0444\u0440\u0438: \\( 2 + 7 + 9 + 0 + 1 = 19 \\) \u2014 \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a: \\( 27901 \\) \u043d\u0435 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3</p> <p>\u041f\u0440\u043e\u0441\u0443\u043c\u0443\u0454\u043c\u043e \u0446\u0438\u0444\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \\(-825432\\): \\( 8 + 2 + 5 + 4 + 3 + 2 = 24 \\) \u2014 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3 \u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a: \\(-825432\\) \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 3</p> <p>\u0426\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 5, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u043e \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u043f'\u044f\u0442\u0456\u0440\u043a\u043e\u044e \u0430\u0431\u043e \u043d\u0443\u043b\u0435\u043c: \\( 775, -2390 \\) \u2014 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 5</p> <p>\u0426\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 10, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u043e \u0437\u0430\u043a\u0456\u043d\u0447\u0443\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0443\u043b\u044c: \\( 798400 \\) \u2014 \u0434\u0456\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430 10 (\u0456, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043d\u0430 100). \u041d\u0443 \u0456, \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u043e, \u043d\u0435 \u0437\u0430\u0431\u0443\u0432\u0430\u0439\u0442\u0435, \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0449\u043e\u0431 \u043f\u043e\u0434\u0456\u043b\u0438\u0442\u0438 \u043d\u0430 10, \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0438\u0431\u0440\u0430\u0442\u0438 \u043e\u0434\u0438\u043d \u043d\u0443\u043b\u044c: \\( 79840 \\)</p> <p>\u0422\u0430\u043a\u043e\u0436 \u0456\u0441\u043d\u0443\u044e\u0442\u044c \u043e\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u0434\u0456\u043b\u044c\u043d\u043e\u0441\u0442\u0456 \u043d\u0430 6, 8, 9, 11 \u0442\u043e\u0449\u043e, \u0430\u043b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0441\u0435\u043d\u0441\u0443 \u0432\u0456\u0434 \u043d\u0438\u0445 \u043c\u0430\u0439\u0436\u0435 \u043d\u0435\u043c\u0430\u0454 =)</p> <p>\u0421\u043b\u0456\u0434 \u0437\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u0438, \u0449\u043e \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043e\u0437\u043d\u0430\u043a\u0438 (\u0437\u0434\u0430\u0454\u0442\u044c\u0441\u044f, \u0442\u0430\u043a\u0456 \u043f\u0440\u043e\u0441\u0442\u0456) \u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0432\u043e\u0434\u044f\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u043e\u0440\u0456\u0457 \u0447\u0438\u0441\u0435\u043b. \u0426\u0435\u0439 \u0440\u043e\u0437\u0434\u0456\u043b \u0430\u043b\u0433\u0435\u0431\u0440\u0438 \u0432\u0437\u0430\u0433\u0430\u043b\u0456 \u0434\u043e\u0441\u0438\u0442\u044c \u0446\u0456\u043a\u0430\u0432\u0438\u0439, \u043e\u0434\u043d\u0430\u043a \u0439\u043e\u0433\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0438... \u043f\u0440\u044f\u043c\u043e \u0441\u0443\u0447\u0430\u0441\u043d\u0430 \u043a\u0438\u0442\u0430\u0439\u0441\u044c\u043a\u0430 \u043a\u0430\u0440\u0430 =) \u0410 \u0412\u043e\u043b\u044c\u0434\u0435\u043c\u0430\u0440\u0443 \u0437\u0430 \u043e\u0441\u0442\u0430\u043d\u043d\u044c\u043e\u044e \u043f\u0430\u0440\u0442\u043e\u044e \u0456 \u0442\u043e\u0433\u043e \u0432\u0438\u0441\u0442\u0430\u0447\u0438\u043b\u043e..., \u0430\u043b\u0435 \u043d\u0456\u0447\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u0448\u043d\u043e\u0433\u043e, \u0441\u043a\u043e\u0440\u043e \u043c\u0438 \u0437\u0430\u0439\u043c\u0435\u043c\u043e\u0441\u044f \u0446\u0456\u043a\u0430\u0432\u0438\u043c\u0438 \u0444\u0456\u0437\u0438\u0447\u043d\u0438\u043c\u0438 \u0432\u043f\u0440\u0430\u0432\u0430\u043c\u0438 =)</p> <p>\u041d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[ Q = \\left\\{ \\frac{m}{n} \\middle| m \\in \\mathbb{Z}, n \\in \\mathbb{N} \\right\\} \\] <p>\u2014 \u0442\u043e\u0431\u0442\u043e \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0435 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0434\u0440\u043e\u0431\u0443 \\( \\frac{m}{n} \\), \u0434\u0435 \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043a \u0454 \u0446\u0456\u043b\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c, \u0430 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0438\u043c.</p> <p>\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0449\u043e \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0454 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u043e\u044e \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:</p> \\[ \\mathbb{N} \\subset \\mathbb{Z} \\subset Q \\] <p>\u0406 \u043d\u0430\u0441\u043f\u0440\u0430\u0432\u0434\u0456 \u0442\u0430\u043a \u2014 \u0430\u0434\u0436\u0435 \u0431\u0443\u0434\u044c-\u044f\u043a\u0435 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0438 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0440\u043e\u0431\u0443:</p> <p>\\( 2 = \\frac{2}{1}, \\quad -2 = \\frac{-2}{1}, \\quad \\frac{5}{1} = 5 \\)</p> <p>\u0422\u0430\u043a\u0438\u043c \u0447\u0438\u043d\u043e\u043c, \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u0436\u043d\u0430 \u0431\u0435\u0437 \u0432\u0430\u0433\u0430\u043d\u044c \u043d\u0430\u0437\u0438\u0432\u0430\u0442\u0438 \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.</p> <p>\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u043e\u044e \u00ab\u0432\u043f\u0456\u0437\u043d\u0430\u0432\u0430\u043d\u043e\u044e\u00bb \u043e\u0437\u043d\u0430\u043a\u043e\u044e \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0454 \u0442\u0435, \u0449\u043e \u043f\u0440\u0438 \u0434\u0456\u043b\u0435\u043d\u043d\u0456 \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0438\u043a\u0430 \u043d\u0430 \u0437\u043d\u0430\u043c\u0435\u043d\u043d\u0438\u043a \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u0442\u044c\u0441\u044f \u0430\u0431\u043e \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e:</p> <p>\\( \\frac{6}{2} = 3 \\) \u2014 \u0446\u0456\u043b\u0435 \u0447\u0438\u0441\u043b\u043e, \u0430\u0431\u043e \\( \\frac{3}{8} = 0.375 \\)\u2014 \u043a\u0456\u043d\u0446\u0435\u0432\u0430 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u0430 \u0434\u0440\u043e\u0431, \u0430\u0431\u043e </p> \\[ \\frac{7}{11} = 0.\\underline{636363}... \\] <p>\u2014 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u0439 \u043f\u0435\u0440\u0456\u043e\u0434\u0438\u0447\u043d\u0438\u0439 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u0438\u0439 \u0434\u0440\u0456\u0431 (\u043f\u043e\u0432\u0442\u043e\u0440 \u043c\u043e\u0436\u0435 \u043f\u043e\u0447\u0430\u0442\u0438\u0441\u044f \u043d\u0435 \u043e\u0434\u0440\u0430\u0437\u0443).</p> <p>\u0421\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0439\u0442\u0435\u0441\u044f \u0434\u0456\u043b\u0435\u043d\u043d\u044f\u043c \u0456 \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044f \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u0446\u0435 \u044f\u043a \u043c\u043e\u0436\u043d\u0430 \u0440\u0456\u0434\u0448\u0435! \u0412 \u043e\u0440\u0433\u0430\u043d\u0456\u0437\u0430\u0446\u0456\u0439\u043d\u0456\u0439 \u0441\u0442\u0430\u0442\u0442\u0456 \u0412\u0438\u0449\u0430 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u0456\u0432 \u0456 \u043d\u0430 \u0456\u043d\u0448\u0438\u0445 \u0443\u0440\u043e\u043a\u0430\u0445 \u044f \u043d\u0435\u043e\u0434\u043d\u043e\u0440\u0430\u0437\u043e\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0432\u0430\u0432, \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u044e, \u0456 \u0431\u0443\u0434\u0443 \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0432\u0430\u0442\u0438 \u0446\u044e \u043c\u0430\u043d\u0442\u0440\u0443:</p> <p>\u0412\u0438\u0449\u0456\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0446\u0456 \u0432\u0441\u0456 \u0434\u0456\u0457 \u043f\u0440\u0430\u0433\u043d\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u043d\u0443\u0432\u0430\u0442\u0438 \u0432 \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u0445 (\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0445 \u0442\u0430 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0445) \u0434\u0440\u043e\u0431\u0430\u0445.</p> <p>\u0417\u0433\u043e\u0434\u044c\u0442\u0435\u0441\u044f, \u0449\u043e \u043c\u0430\u0442\u0438 \u0441\u043f\u0440\u0430\u0432\u0443 \u0437 \u0434\u0440\u043e\u0431\u043e\u043c \\( \\frac{3}{8} \\) \u0437\u043d\u0430\u0447\u043d\u043e \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435, \u043d\u0456\u0436 \u0437 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c 0,375 (\u043d\u0435 \u043a\u0430\u0436\u0443\u0447\u0438 \u0432\u0436\u0435 \u043f\u0440\u043e \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0456 \u0434\u0440\u043e\u0431\u0438).</p> <p>\u0410\u043b\u0435 \u0434\u0430\u043b\u0456. \u041e\u043a\u0440\u0456\u043c \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0456\u0441\u043d\u0443\u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0430 \\( I \\) \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0436\u043d\u0435 \u0437 \u044f\u043a\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u043e\u0457 \u041d\u0415\u043f\u0435\u0440\u0456\u043e\u0434\u0438\u0447\u043d\u043e\u0457 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432\u043e\u0457 \u0434\u0440\u043e\u0431\u0438. (\u041e\u0441\u043e\u0431\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u0446\u0438\u0445 \"\u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u0445 \u0445\u0432\u043e\u0441\u0442\u0456\u0432\" \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u043c\u0430\u0454 \u043d\u0456\u044f\u043a\u043e\u0457 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456):</p> \\[ \\pi = 3,1415926535..., \\quad e = 2,7182818284...,  \\quad \\sqrt{2} = 1,414213562... \\] <p>\u0456 \u0442.\u0434.</p> <p>\u041f\u0440\u043e \u0437\u043d\u0430\u043c\u0435\u043d\u0438\u0442\u0456 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438 \"\u043f\u0456\" \u0456 \"\u0435\" \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0457 \u0434\u043e\u0441\u0442\u0430\u0442\u043d\u044c\u043e, \u0442\u043e\u043c\u0443 \u043d\u0430 \u043d\u0438\u0445 \u044f \u043d\u0435 \u0437\u0443\u043f\u0438\u043d\u044f\u044e\u0441\u044f.</p> <p>\u041e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0456 \u0456\u0440\u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0443\u0442\u0432\u043e\u0440\u044e\u0454 \u043c\u043d\u043e\u0436\u0438\u043d\u0443 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 (\u0440\u0435\u0447\u043e\u0432\u0438\u043d\u043d\u0438\u0445) \u0447\u0438\u0441\u0435\u043b:</p> \\[ Q \\cup I = \\mathbb{R} \\] <p>\\(\\cup\\) \u2014 \u0437\u043d\u0430\u043a \u043e\u0431'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u043c\u043d\u043e\u0436\u0438\u043d.</p> <p>\u0413\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430 \u0456\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0456\u044f \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \\( \\mathbb{R} \\) \u0432\u0430\u043c \u0434\u043e\u0431\u0440\u0435 \u0437\u043d\u0430\u0439\u043e\u043c\u0430 \u2014 \u0446\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u0430 \u043f\u0440\u044f\u043c\u0430:</p> \\[ \\begin{aligned}     &amp;-2 &amp; -1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; x \\\\     &amp;\\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots \\end{aligned} \\] <p>\u041a\u043e\u0436\u043d\u043e\u043c\u0443 \u0434\u0456\u0439\u0441\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u043f\u0435\u0432\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0457 \u043f\u0440\u044f\u043c\u043e\u0457, \u0456 \u043d\u0430\u0432\u043f\u0430\u043a\u0438 \u2014 \u043a\u043e\u0436\u043d\u0456\u0439 \u0442\u043e\u0447\u0446\u0456 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0457 \u043f\u0440\u044f\u043c\u043e\u0457 \u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0434\u0435\u044f\u043a\u0435 \u0434\u0456\u0439\u0441\u043d\u0435 \u0447\u0438\u0441\u043b\u043e. \u041f\u043e \u0441\u0443\u0442\u0456, \u0437\u0430\u0440\u0430\u0437 \u044f \u0441\u0444\u043e\u0440\u043c\u0443\u043b\u044e\u044e \u0432\u043b\u0430\u0441\u0442\u0438\u0432\u0456\u0441\u0442\u044c \u043d\u0435\u043f\u0435\u0440\u0435\u0440\u0432\u043d\u043e\u0441\u0442\u0456 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0435 \u0445\u043e\u0447 \u0456 \u0437\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0438\u043c, \u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u0443\u0440\u0441\u0456 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0456\u0437\u0443.</p> <p>\u0427\u0438\u0441\u043b\u043e\u0432\u0443 \u043f\u0440\u044f\u043c\u0443 \u0442\u0430\u043a\u043e\u0436 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u044c \u043d\u0435\u0441\u043a\u0456\u043d\u0447\u0435\u043d\u043d\u0438\u043c \u0456\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \\((-\\infty; +\\infty)\\), \u0430 \u0437\u0430\u043f\u0438\u0441 \\(x \\in \\mathbb{R}\\) \u0430\u0431\u043e \u0436 \u0435\u043a\u0432\u0456\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0430 \u0457\u0439 \u0437\u0430\u043f\u0438\u0441 \\(x \\in \\mathbb{R}\\) \u0441\u0438\u043c\u0432\u043e\u043b\u0456\u0437\u0443\u0454 \u0442\u043e\u0439 \u0444\u0430\u043a\u0442, \u0449\u043e \\(x\\) \u0454 \u043e\u0434\u043d\u0438\u043c \u0437 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043d\u0438\u043a\u0456\u0432 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b (\u0430\u0431\u043e, \u0456\u043d\u0448\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u2014 \u0434\u0456\u0439\u0441\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c).</p> <p>\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u0432\u0441\u044c\u043e\u0433\u043e \u0431\u0435\u0437\u043f\u043e\u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e \u0440\u0430\u0446\u0456\u043e\u043d\u0430\u043b\u044c\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \\(Q\\) \u2014 \u0446\u0435 \u043f\u0456\u0434\u043c\u043d\u043e\u0436\u0438\u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u043d\u0438 \u0434\u0456\u0439\u0441\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \\( \\mathbb{R} \\).</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Train a custom model\nmodel = YOLO(\"yolov8n.pt\")\nmodel.train(data=\"path/to/dataset.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code>yolo train data=path/to/dataset.yaml epochs=100 imgsz=640\n</code></pre>"},{"location":"modes/benchmark/","title":"Model Benchmarking with Ultralytics YOLO","text":""},{"location":"modes/benchmark/#introduction","title":"Introduction","text":"<p>Once your model is trained and validated, the next logical step is to evaluate its performance in various real-world scenarios. Benchmark mode in Ultralytics YOLOv8 serves this purpose by providing a robust framework for assessing the speed and accuracy of your model across a range of export formats.</p> <p> Watch: Ultralytics Modes Tutorial: Benchmark </p>"},{"location":"modes/benchmark/#why-is-benchmarking-crucial","title":"Why Is Benchmarking Crucial?","text":"<ul> <li>Informed Decisions: Gain insights into the trade-offs between speed and accuracy.</li> <li>Resource Allocation: Understand how different export formats perform on different hardware.</li> <li>Optimization: Learn which export format offers the best performance for your specific use case.</li> <li>Cost Efficiency: Make more efficient use of hardware resources based on benchmark results.</li> </ul>"},{"location":"modes/benchmark/#key-metrics-in-benchmark-mode","title":"Key Metrics in Benchmark Mode","text":"<ul> <li>mAP50-95: For object detection, segmentation, and pose estimation.</li> <li>accuracy_top5: For image classification.</li> <li>Inference Time: Time taken for each image in milliseconds.</li> </ul>"},{"location":"modes/benchmark/#supported-export-formats","title":"Supported Export Formats","text":"<ul> <li>ONNX: For optimal CPU performance</li> <li>TensorRT: For maximal GPU efficiency</li> <li>OpenVINO: For Intel hardware optimization</li> <li>CoreML, TensorFlow SavedModel, and More: For diverse deployment needs.</li> </ul> <p>Tip</p> <ul> <li>Export to ONNX or OpenVINO for up to 3x CPU speedup.</li> <li>Export to TensorRT for up to 5x GPU speedup.</li> </ul>"},{"location":"modes/benchmark/#usage-examples","title":"Usage Examples","text":"<p>Run YOLOv8n benchmarks on all supported export formats including ONNX, TensorRT etc. See Arguments section below for a full list of export arguments.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics.utils.benchmarks import benchmark\n\n# Benchmark on GPU\nbenchmark(model=\"yolov8n.pt\", data=\"coco8.yaml\", imgsz=640, half=False, device=0)\n</code></pre> <pre><code>yolo benchmark model=yolov8n.pt data='coco8.yaml' imgsz=640 half=False device=0\n</code></pre>"},{"location":"modes/benchmark/#arguments","title":"Arguments","text":"<p>Arguments such as <code>model</code>, <code>data</code>, <code>imgsz</code>, <code>half</code>, <code>device</code>, and <code>verbose</code> provide users with the flexibility to fine-tune the benchmarks to their specific needs and compare the performance of different export formats with ease.</p> Key Default Value Description <code>model</code> <code>None</code> Specifies the path to the model file. Accepts both <code>.pt</code> and <code>.yaml</code> formats, e.g., <code>\"yolov8n.pt\"</code> for pre-trained models or configuration files. <code>data</code> <code>None</code> Path to a YAML file defining the dataset for benchmarking, typically including paths and settings for validation data. Example: <code>\"coco8.yaml\"</code>. <code>imgsz</code> <code>640</code> The input image size for the model. Can be a single integer for square images or a tuple <code>(width, height)</code> for non-square, e.g., <code>(640, 480)</code>. <code>half</code> <code>False</code> Enables FP16 (half-precision) inference, reducing memory usage and possibly increasing speed on compatible hardware. Use <code>half=True</code> to enable. <code>int8</code> <code>False</code> Activates INT8 quantization for further optimized performance on supported devices, especially useful for edge devices. Set <code>int8=True</code> to use. <code>device</code> <code>None</code> Defines the computation device(s) for benchmarking, such as <code>\"cpu\"</code>, <code>\"cuda:0\"</code>, or a list of devices like <code>\"cuda:0,1\"</code> for multi-GPU setups. <code>verbose</code> <code>False</code> Controls the level of detail in logging output. A boolean value; set <code>verbose=True</code> for detailed logs or a float for thresholding errors."},{"location":"modes/benchmark/#export-formats","title":"Export Formats","text":"<p>Benchmarks will attempt to run automatically on all possible export formats below.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code> <p>See full <code>export</code> details in the Export page.</p>"},{"location":"modes/benchmark/#faq","title":"FAQ","text":""},{"location":"modes/benchmark/#how-do-i-benchmark-my-yolov8-models-performance-using-ultralytics","title":"How do I benchmark my YOLOv8 model's performance using Ultralytics?","text":"<p>Ultralytics YOLOv8 offers a Benchmark mode to assess your model's performance across different export formats. This mode provides insights into key metrics such as mean Average Precision (mAP50-95), accuracy, and inference time in milliseconds. To run benchmarks, you can use either Python or CLI commands. For example, to benchmark on a GPU:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics.utils.benchmarks import benchmark\n\n# Benchmark on GPU\nbenchmark(model=\"yolov8n.pt\", data=\"coco8.yaml\", imgsz=640, half=False, device=0)\n</code></pre> <pre><code>yolo benchmark model=yolov8n.pt data='coco8.yaml' imgsz=640 half=False device=0\n</code></pre> <p>For more details on benchmark arguments, visit the Arguments section.</p>"},{"location":"modes/benchmark/#what-are-the-benefits-of-exporting-yolov8-models-to-different-formats","title":"What are the benefits of exporting YOLOv8 models to different formats?","text":"<p>Exporting YOLOv8 models to different formats such as ONNX, TensorRT, and OpenVINO allows you to optimize performance based on your deployment environment. For instance:</p> <ul> <li>ONNX: Provides up to 3x CPU speedup.</li> <li>TensorRT: Offers up to 5x GPU speedup.</li> <li>OpenVINO: Specifically optimized for Intel hardware.     These formats enhance both the speed and accuracy of your models, making them more efficient for various real-world applications. Visit the Export page for complete details.</li> </ul>"},{"location":"modes/benchmark/#why-is-benchmarking-crucial-in-evaluating-yolov8-models","title":"Why is benchmarking crucial in evaluating YOLOv8 models?","text":"<p>Benchmarking your YOLOv8 models is essential for several reasons:</p> <ul> <li>Informed Decisions: Understand the trade-offs between speed and accuracy.</li> <li>Resource Allocation: Gauge the performance across different hardware options.</li> <li>Optimization: Determine which export format offers the best performance for specific use cases.</li> <li>Cost Efficiency: Optimize hardware usage based on benchmark results.     Key metrics such as mAP50-95, Top-5 accuracy, and inference time help in making these evaluations. Refer to the Key Metrics section for more information.</li> </ul>"},{"location":"modes/benchmark/#which-export-formats-are-supported-by-yolov8-and-what-are-their-advantages","title":"Which export formats are supported by YOLOv8, and what are their advantages?","text":"<p>YOLOv8 supports a variety of export formats, each tailored for specific hardware and use cases:</p> <ul> <li>ONNX: Best for CPU performance.</li> <li>TensorRT: Ideal for GPU efficiency.</li> <li>OpenVINO: Optimized for Intel hardware.</li> <li>CoreML &amp; TensorFlow: Useful for iOS and general ML applications.     For a complete list of supported formats and their respective advantages, check out the Supported Export Formats section.</li> </ul>"},{"location":"modes/benchmark/#what-arguments-can-i-use-to-fine-tune-my-yolov8-benchmarks","title":"What arguments can I use to fine-tune my YOLOv8 benchmarks?","text":"<p>When running benchmarks, several arguments can be customized to suit specific needs:</p> <ul> <li>model: Path to the model file (e.g., \"yolov8n.pt\").</li> <li>data: Path to a YAML file defining the dataset (e.g., \"coco8.yaml\").</li> <li>imgsz: The input image size, either as a single integer or a tuple.</li> <li>half: Enable FP16 inference for better performance.</li> <li>int8: Activate INT8 quantization for edge devices.</li> <li>device: Specify the computation device (e.g., \"cpu\", \"cuda:0\").</li> <li>verbose: Control the level of logging detail.     For a full list of arguments, refer to the Arguments section.</li> </ul>"},{"location":"modes/export/","title":"Model Export with Ultralytics YOLO","text":""},{"location":"modes/export/#introduction","title":"Introduction","text":"<p>The ultimate goal of training a model is to deploy it for real-world applications. Export mode in Ultralytics YOLOv8 offers a versatile range of options for exporting your trained model to different formats, making it deployable across various platforms and devices. This comprehensive guide aims to walk you through the nuances of model exporting, showcasing how to achieve maximum compatibility and performance.</p> <p> Watch: How To Export Custom Trained Ultralytics YOLOv8 Model and Run Live Inference on Webcam. </p>"},{"location":"modes/export/#why-choose-yolov8s-export-mode","title":"Why Choose YOLOv8's Export Mode?","text":"<ul> <li>Versatility: Export to multiple formats including ONNX, TensorRT, CoreML, and more.</li> <li>Performance: Gain up to 5x GPU speedup with TensorRT and 3x CPU speedup with ONNX or OpenVINO.</li> <li>Compatibility: Make your model universally deployable across numerous hardware and software environments.</li> <li>Ease of Use: Simple CLI and Python API for quick and straightforward model exporting.</li> </ul>"},{"location":"modes/export/#key-features-of-export-mode","title":"Key Features of Export Mode","text":"<p>Here are some of the standout functionalities:</p> <ul> <li>One-Click Export: Simple commands for exporting to different formats.</li> <li>Batch Export: Export batched-inference capable models.</li> <li>Optimized Inference: Exported models are optimized for quicker inference times.</li> <li>Tutorial Videos: In-depth guides and tutorials for a smooth exporting experience.</li> </ul> <p>Tip</p> <ul> <li>Export to ONNX or OpenVINO for up to 3x CPU speedup.</li> <li>Export to TensorRT for up to 5x GPU speedup.</li> </ul>"},{"location":"modes/export/#usage-examples","title":"Usage Examples","text":"<p>Export a YOLOv8n model to a different format like ONNX or TensorRT. See Arguments section below for a full list of export arguments.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre>"},{"location":"modes/export/#arguments","title":"Arguments","text":"<p>This table details the configurations and options available for exporting YOLO models to different formats. These settings are critical for optimizing the exported model's performance, size, and compatibility across various platforms and environments. Proper configuration ensures that the model is ready for deployment in the intended application with optimal efficiency.</p> Argument Type Default Description <code>format</code> <code>str</code> <code>'torchscript'</code> Target format for the exported model, such as <code>'onnx'</code>, <code>'torchscript'</code>, <code>'tensorflow'</code>, or others, defining compatibility with various deployment environments. <code>imgsz</code> <code>int</code> or <code>tuple</code> <code>640</code> Desired image size for the model input. Can be an integer for square images or a tuple <code>(height, width)</code> for specific dimensions. <code>keras</code> <code>bool</code> <code>False</code> Enables export to Keras format for TensorFlow SavedModel, providing compatibility with TensorFlow serving and APIs. <code>optimize</code> <code>bool</code> <code>False</code> Applies optimization for mobile devices when exporting to TorchScript, potentially reducing model size and improving performance. <code>half</code> <code>bool</code> <code>False</code> Enables FP16 (half-precision) quantization, reducing model size and potentially speeding up inference on supported hardware. <code>int8</code> <code>bool</code> <code>False</code> Activates INT8 quantization, further compressing the model and speeding up inference with minimal accuracy loss, primarily for edge devices. <code>dynamic</code> <code>bool</code> <code>False</code> Allows dynamic input sizes for ONNX and TensorRT exports, enhancing flexibility in handling varying image dimensions. <code>simplify</code> <code>bool</code> <code>False</code> Simplifies the model graph for ONNX exports with <code>onnxslim</code>, potentially improving performance and compatibility. <code>opset</code> <code>int</code> <code>None</code> Specifies the ONNX opset version for compatibility with different ONNX parsers and runtimes. If not set, uses the latest supported version. <code>workspace</code> <code>float</code> <code>4.0</code> Sets the maximum workspace size in GiB for TensorRT optimizations, balancing memory usage and performance. <code>nms</code> <code>bool</code> <code>False</code> Adds Non-Maximum Suppression (NMS) to the CoreML export, essential for accurate and efficient detection post-processing. <code>batch</code> <code>int</code> <code>1</code> Specifies export model batch inference size or the max number of images the exported model will process concurrently in <code>predict</code> mode. <p>Adjusting these parameters allows for customization of the export process to fit specific requirements, such as deployment environment, hardware constraints, and performance targets. Selecting the appropriate format and settings is essential for achieving the best balance between model size, speed, and accuracy.</p>"},{"location":"modes/export/#export-formats","title":"Export Formats","text":"<p>Available YOLOv8 export formats are in the table below. You can export to any format using the <code>format</code> argument, i.e. <code>format='onnx'</code> or <code>format='engine'</code>. You can predict or validate directly on exported models, i.e. <code>yolo predict model=yolov8n.onnx</code>. Usage examples are shown for your model after export completes.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code>"},{"location":"modes/export/#faq","title":"FAQ","text":""},{"location":"modes/export/#how-do-i-export-a-yolov8-model-to-onnx-format","title":"How do I export a YOLOv8 model to ONNX format?","text":"<p>Exporting a YOLOv8 model to ONNX format is straightforward with Ultralytics. It provides both Python and CLI methods for exporting models.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre> <p>For more details on the process, including advanced options like handling different input sizes, refer to the ONNX section.</p>"},{"location":"modes/export/#what-are-the-benefits-of-using-tensorrt-for-model-export","title":"What are the benefits of using TensorRT for model export?","text":"<p>Using TensorRT for model export offers significant performance improvements. YOLOv8 models exported to TensorRT can achieve up to a 5x GPU speedup, making it ideal for real-time inference applications.</p> <ul> <li>Versatility: Optimize models for a specific hardware setup.</li> <li>Speed: Achieve faster inference through advanced optimizations.</li> <li>Compatibility: Integrate smoothly with NVIDIA hardware.</li> </ul> <p>To learn more about integrating TensorRT, see the TensorRT integration guide.</p>"},{"location":"modes/export/#how-do-i-enable-int8-quantization-when-exporting-my-yolov8-model","title":"How do I enable INT8 quantization when exporting my YOLOv8 model?","text":"<p>INT8 quantization is an excellent way to compress the model and speed up inference, especially on edge devices. Here's how you can enable INT8 quantization:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\nmodel = YOLO(\"yolov8n.pt\")  # Load a model\nmodel.export(format=\"onnx\", int8=True)\n</code></pre> <pre><code>yolo export model=yolov8n.pt format=onnx int8=True   # export model with INT8 quantization\n</code></pre> <p>INT8 quantization can be applied to various formats, such as TensorRT and CoreML. More details can be found in the Export section.</p>"},{"location":"modes/export/#why-is-dynamic-input-size-important-when-exporting-models","title":"Why is dynamic input size important when exporting models?","text":"<p>Dynamic input size allows the exported model to handle varying image dimensions, providing flexibility and optimizing processing efficiency for different use cases. When exporting to formats like ONNX or TensorRT, enabling dynamic input size ensures that the model can adapt to different input shapes seamlessly.</p> <p>To enable this feature, use the <code>dynamic=True</code> flag during export:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\nmodel = YOLO(\"yolov8n.pt\")\nmodel.export(format=\"onnx\", dynamic=True)\n</code></pre> <pre><code>yolo export model=yolov8n.pt format=onnx dynamic=True\n</code></pre> <p>For additional context, refer to the dynamic input size configuration.</p>"},{"location":"modes/export/#what-are-the-key-export-arguments-to-consider-for-optimizing-model-performance","title":"What are the key export arguments to consider for optimizing model performance?","text":"<p>Understanding and configuring export arguments is crucial for optimizing model performance:</p> <ul> <li><code>format:</code> The target format for the exported model (e.g., <code>onnx</code>, <code>torchscript</code>, <code>tensorflow</code>).</li> <li><code>imgsz:</code> Desired image size for the model input (e.g., <code>640</code> or <code>(height, width)</code>).</li> <li><code>half:</code> Enables FP16 quantization, reducing model size and potentially speeding up inference.</li> <li><code>optimize:</code> Applies specific optimizations for mobile or constrained environments.</li> <li><code>int8:</code> Enables INT8 quantization, highly beneficial for edge deployments.</li> </ul> <p>For a detailed list and explanations of all the export arguments, visit the Export Arguments section.</p>"},{"location":"modes/predict/","title":"Model Prediction with Ultralytics YOLO","text":""},{"location":"modes/predict/#introduction","title":"Introduction","text":"<p>In the world of machine learning and computer vision, the process of making sense out of visual data is called 'inference' or 'prediction'. Ultralytics YOLOv8 offers a powerful feature known as predict mode that is tailored for high-performance, real-time inference on a wide range of data sources.</p> <p> Watch: How to Extract the Outputs from Ultralytics YOLOv8 Model for Custom Projects. </p>"},{"location":"modes/predict/#real-world-applications","title":"Real-world Applications","text":"Manufacturing Sports Safety Vehicle Spare Parts Detection Football Player Detection People Fall Detection"},{"location":"modes/predict/#why-use-ultralytics-yolo-for-inference","title":"Why Use Ultralytics YOLO for Inference?","text":"<p>Here's why you should consider YOLOv8's predict mode for your various inference needs:</p> <ul> <li>Versatility: Capable of making inferences on images, videos, and even live streams.</li> <li>Performance: Engineered for real-time, high-speed processing without sacrificing accuracy.</li> <li>Ease of Use: Intuitive Python and CLI interfaces for rapid deployment and testing.</li> <li>Highly Customizable: Various settings and parameters to tune the model's inference behavior according to your specific requirements.</li> </ul>"},{"location":"modes/predict/#key-features-of-predict-mode","title":"Key Features of Predict Mode","text":"<p>YOLOv8's predict mode is designed to be robust and versatile, featuring:</p> <ul> <li>Multiple Data Source Compatibility: Whether your data is in the form of individual images, a collection of images, video files, or real-time video streams, predict mode has you covered.</li> <li>Streaming Mode: Use the streaming feature to generate a memory-efficient generator of <code>Results</code> objects. Enable this by setting <code>stream=True</code> in the predictor's call method.</li> <li>Batch Processing: The ability to process multiple images or video frames in a single batch, further speeding up inference time.</li> <li>Integration Friendly: Easily integrate with existing data pipelines and other software components, thanks to its flexible API.</li> </ul> <p>Ultralytics YOLO models return either a Python list of <code>Results</code> objects, or a memory-efficient Python generator of <code>Results</code> objects when <code>stream=True</code> is passed to the model during inference:</p> <p>Predict</p> Return a list with <code>stream=False</code>Return a generator with <code>stream=True</code> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # pretrained YOLOv8n model\n\n# Run batched inference on a list of images\nresults = model([\"im1.jpg\", \"im2.jpg\"])  # return a list of Results objects\n\n# Process results list\nfor result in results:\n    boxes = result.boxes  # Boxes object for bounding box outputs\n    masks = result.masks  # Masks object for segmentation masks outputs\n    keypoints = result.keypoints  # Keypoints object for pose outputs\n    probs = result.probs  # Probs object for classification outputs\n    obb = result.obb  # Oriented boxes object for OBB outputs\n    result.show()  # display to screen\n    result.save(filename=\"result.jpg\")  # save to disk\n</code></pre> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # pretrained YOLOv8n model\n\n# Run batched inference on a list of images\nresults = model([\"im1.jpg\", \"im2.jpg\"], stream=True)  # return a generator of Results objects\n\n# Process results generator\nfor result in results:\n    boxes = result.boxes  # Boxes object for bounding box outputs\n    masks = result.masks  # Masks object for segmentation masks outputs\n    keypoints = result.keypoints  # Keypoints object for pose outputs\n    probs = result.probs  # Probs object for classification outputs\n    obb = result.obb  # Oriented boxes object for OBB outputs\n    result.show()  # display to screen\n    result.save(filename=\"result.jpg\")  # save to disk\n</code></pre>"},{"location":"modes/predict/#inference-sources","title":"Inference Sources","text":"<p>YOLOv8 can process different types of input sources for inference, as shown in the table below. The sources include static images, video streams, and various data formats. The table also indicates whether each source can be used in streaming mode with the argument <code>stream=True</code> \u2705. Streaming mode is beneficial for processing videos or live streams as it creates a generator of results instead of loading all frames into memory.</p> <p>Tip</p> <p>Use <code>stream=True</code> for processing long videos or large datasets to efficiently manage memory. When <code>stream=False</code>, the results for all frames or data points are stored in memory, which can quickly add up and cause out-of-memory errors for large inputs. In contrast, <code>stream=True</code> utilizes a generator, which only keeps the results of the current frame or data point in memory, significantly reducing memory consumption and preventing out-of-memory issues.</p> Source Argument Type Notes image <code>'image.jpg'</code> <code>str</code> or <code>Path</code> Single image file. URL <code>'https://ultralytics.com/images/bus.jpg'</code> <code>str</code> URL to an image. screenshot <code>'screen'</code> <code>str</code> Capture a screenshot. PIL <code>Image.open('im.jpg')</code> <code>PIL.Image</code> HWC format with RGB channels. OpenCV <code>cv2.imread('im.jpg')</code> <code>np.ndarray</code> HWC format with BGR channels <code>uint8 (0-255)</code>. numpy <code>np.zeros((640,1280,3))</code> <code>np.ndarray</code> HWC format with BGR channels <code>uint8 (0-255)</code>. torch <code>torch.zeros(16,3,320,640)</code> <code>torch.Tensor</code> BCHW format with RGB channels <code>float32 (0.0-1.0)</code>. CSV <code>'sources.csv'</code> <code>str</code> or <code>Path</code> CSV file containing paths to images, videos, or directories. video \u2705 <code>'video.mp4'</code> <code>str</code> or <code>Path</code> Video file in formats like MP4, AVI, etc. directory \u2705 <code>'path/'</code> <code>str</code> or <code>Path</code> Path to a directory containing images or videos. glob \u2705 <code>'path/*.jpg'</code> <code>str</code> Glob pattern to match multiple files. Use the <code>*</code> character as a wildcard. YouTube \u2705 <code>'https://youtu.be/LNwODJXcvt4'</code> <code>str</code> URL to a YouTube video. stream \u2705 <code>'rtsp://example.com/media.mp4'</code> <code>str</code> URL for streaming protocols such as RTSP, RTMP, TCP, or an IP address. multi-stream \u2705 <code>'list.streams'</code> <code>str</code> or <code>Path</code> <code>*.streams</code> text file with one stream URL per row, i.e. 8 streams will run at batch-size 8. <p>Below are code examples for using each source type:</p> <p>Prediction sources</p> imagescreenshotURLPILOpenCVnumpytorchCSVvideodirectoryglobYouTubeStreams <p>Run inference on an image file. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define path to the image file\nsource = \"path/to/image.jpg\"\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on the current screen content as a screenshot. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define current screenshot as source\nsource = \"screen\"\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on an image or video hosted remotely via URL. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define remote image or video URL\nsource = \"https://ultralytics.com/images/bus.jpg\"\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on an image opened with Python Imaging Library (PIL). <pre><code>from PIL import Image\n\nfrom ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Open an image using PIL\nsource = Image.open(\"path/to/image.jpg\")\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on an image read with OpenCV. <pre><code>import cv2\n\nfrom ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Read an image using OpenCV\nsource = cv2.imread(\"path/to/image.jpg\")\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on an image represented as a numpy array. <pre><code>import numpy as np\n\nfrom ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Create a random numpy array of HWC shape (640, 640, 3) with values in range [0, 255] and type uint8\nsource = np.random.randint(low=0, high=255, size=(640, 640, 3), dtype=\"uint8\")\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on an image represented as a PyTorch tensor. <pre><code>import torch\n\nfrom ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Create a random torch tensor of BCHW shape (1, 3, 640, 640) with values in range [0, 1] and type float32\nsource = torch.rand(1, 3, 640, 640, dtype=torch.float32)\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on a collection of images, URLs, videos and directories listed in a CSV file. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define a path to a CSV file with images, URLs, videos and directories\nsource = \"path/to/file.csv\"\n\n# Run inference on the source\nresults = model(source)  # list of Results objects\n</code></pre></p> <p>Run inference on a video file. By using <code>stream=True</code>, you can create a generator of Results objects to reduce memory usage. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define path to video file\nsource = \"path/to/video.mp4\"\n\n# Run inference on the source\nresults = model(source, stream=True)  # generator of Results objects\n</code></pre></p> <p>Run inference on all images and videos in a directory. To also capture images and videos in subdirectories use a glob pattern, i.e. <code>path/to/dir/**/*</code>. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define path to directory containing images and videos for inference\nsource = \"path/to/dir\"\n\n# Run inference on the source\nresults = model(source, stream=True)  # generator of Results objects\n</code></pre></p> <p>Run inference on all images and videos that match a glob expression with <code>*</code> characters. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define a glob search for all JPG files in a directory\nsource = \"path/to/dir/*.jpg\"\n\n# OR define a recursive glob search for all JPG files including subdirectories\nsource = \"path/to/dir/**/*.jpg\"\n\n# Run inference on the source\nresults = model(source, stream=True)  # generator of Results objects\n</code></pre></p> <p>Run inference on a YouTube video. By using <code>stream=True</code>, you can create a generator of Results objects to reduce memory usage for long videos. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Define source as YouTube video URL\nsource = \"https://youtu.be/LNwODJXcvt4\"\n\n# Run inference on the source\nresults = model(source, stream=True)  # generator of Results objects\n</code></pre></p> <p>Run inference on remote streaming sources using RTSP, RTMP, TCP and IP address protocols. If multiple streams are provided in a <code>*.streams</code> text file then batched inference will run, i.e. 8 streams will run at batch-size 8, otherwise single streams will run at batch-size 1. <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Single stream with batch-size 1 inference\nsource = \"rtsp://example.com/media.mp4\"  # RTSP, RTMP, TCP or IP streaming address\n\n# Multiple streams with batched inference (i.e. batch-size 8 for 8 streams)\nsource = \"path/to/list.streams\"  # *.streams text file with one streaming address per row\n\n# Run inference on the source\nresults = model(source, stream=True)  # generator of Results objects\n</code></pre></p>"},{"location":"modes/predict/#inference-arguments","title":"Inference Arguments","text":"<p><code>model.predict()</code> accepts multiple arguments that can be passed at inference time to override defaults:</p> <p>Example</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Run inference on 'bus.jpg' with arguments\nmodel.predict(\"bus.jpg\", save=True, imgsz=320, conf=0.5)\n</code></pre> <p>Inference arguments:</p> Argument Type Default Description <code>source</code> <code>str</code> <code>'ultralytics/assets'</code> Specifies the data source for inference. Can be an image path, video file, directory, URL, or device ID for live feeds. Supports a wide range of formats and sources, enabling flexible application across different types of input. <code>conf</code> <code>float</code> <code>0.25</code> Sets the minimum confidence threshold for detections. Objects detected with confidence below this threshold will be disregarded. Adjusting this value can help reduce false positives. <code>iou</code> <code>float</code> <code>0.7</code> Intersection Over Union (IoU) threshold for Non-Maximum Suppression (NMS). Lower values result in fewer detections by eliminating overlapping boxes, useful for reducing duplicates. <code>imgsz</code> <code>int or tuple</code> <code>640</code> Defines the image size for inference. Can be a single integer <code>640</code> for square resizing or a (height, width) tuple. Proper sizing can improve detection accuracy and processing speed. <code>half</code> <code>bool</code> <code>False</code> Enables half-precision (FP16) inference, which can speed up model inference on supported GPUs with minimal impact on accuracy. <code>device</code> <code>str</code> <code>None</code> Specifies the device for inference (e.g., <code>cpu</code>, <code>cuda:0</code> or <code>0</code>). Allows users to select between CPU, a specific GPU, or other compute devices for model execution. <code>max_det</code> <code>int</code> <code>300</code> Maximum number of detections allowed per image. Limits the total number of objects the model can detect in a single inference, preventing excessive outputs in dense scenes. <code>vid_stride</code> <code>int</code> <code>1</code> Frame stride for video inputs. Allows skipping frames in videos to speed up processing at the cost of temporal resolution. A value of 1 processes every frame, higher values skip frames. <code>stream_buffer</code> <code>bool</code> <code>False</code> Determines if all frames should be buffered when processing video streams (<code>True</code>), or if the model should return the most recent frame (<code>False</code>). Useful for real-time applications. <code>visualize</code> <code>bool</code> <code>False</code> Activates visualization of model features during inference, providing insights into what the model is \"seeing\". Useful for debugging and model interpretation. <code>augment</code> <code>bool</code> <code>False</code> Enables test-time augmentation (TTA) for predictions, potentially improving detection robustness at the cost of inference speed. <code>agnostic_nms</code> <code>bool</code> <code>False</code> Enables class-agnostic Non-Maximum Suppression (NMS), which merges overlapping boxes of different classes. Useful in multi-class detection scenarios where class overlap is common. <code>classes</code> <code>list[int]</code> <code>None</code> Filters predictions to a set of class IDs. Only detections belonging to the specified classes will be returned. Useful for focusing on relevant objects in multi-class detection tasks. <code>retina_masks</code> <code>bool</code> <code>False</code> Uses high-resolution segmentation masks if available in the model. This can enhance mask quality for segmentation tasks, providing finer detail. <code>embed</code> <code>list[int]</code> <code>None</code> Specifies the layers from which to extract feature vectors or embeddings. Useful for downstream tasks like clustering or similarity search. <p>Visualization arguments:</p> Argument Type Default Description <code>show</code> <code>bool</code> <code>False</code> If <code>True</code>, displays the annotated images or videos in a window. Useful for immediate visual feedback during development or testing. <code>save</code> <code>bool</code> <code>False</code> Enables saving of the annotated images or videos to file. Useful for documentation, further analysis, or sharing results. <code>save_frames</code> <code>bool</code> <code>False</code> When processing videos, saves individual frames as images. Useful for extracting specific frames or for detailed frame-by-frame analysis. <code>save_txt</code> <code>bool</code> <code>False</code> Saves detection results in a text file, following the format <code>[class] [x_center] [y_center] [width] [height] [confidence]</code>. Useful for integration with other analysis tools. <code>save_conf</code> <code>bool</code> <code>False</code> Includes confidence scores in the saved text files. Enhances the detail available for post-processing and analysis. <code>save_crop</code> <code>bool</code> <code>False</code> Saves cropped images of detections. Useful for dataset augmentation, analysis, or creating focused datasets for specific objects. <code>show_labels</code> <code>bool</code> <code>True</code> Displays labels for each detection in the visual output. Provides immediate understanding of detected objects. <code>show_conf</code> <code>bool</code> <code>True</code> Displays the confidence score for each detection alongside the label. Gives insight into the model's certainty for each detection. <code>show_boxes</code> <code>bool</code> <code>True</code> Draws bounding boxes around detected objects. Essential for visual identification and location of objects in images or video frames. <code>line_width</code> <code>None or int</code> <code>None</code> Specifies the line width of bounding boxes. If <code>None</code>, the line width is automatically adjusted based on the image size. Provides visual customization for clarity."},{"location":"modes/predict/#image-and-video-formats","title":"Image and Video Formats","text":"<p>YOLOv8 supports various image and video formats, as specified in ultralytics/data/utils.py. See the tables below for the valid suffixes and example predict commands.</p>"},{"location":"modes/predict/#images","title":"Images","text":"<p>The below table contains valid Ultralytics image formats.</p> Image Suffixes Example Predict Command Reference <code>.bmp</code> <code>yolo predict source=image.bmp</code> Microsoft BMP File Format <code>.dng</code> <code>yolo predict source=image.dng</code> Adobe DNG <code>.jpeg</code> <code>yolo predict source=image.jpeg</code> JPEG <code>.jpg</code> <code>yolo predict source=image.jpg</code> JPEG <code>.mpo</code> <code>yolo predict source=image.mpo</code> Multi Picture Object <code>.png</code> <code>yolo predict source=image.png</code> Portable Network Graphics <code>.tif</code> <code>yolo predict source=image.tif</code> Tag Image File Format <code>.tiff</code> <code>yolo predict source=image.tiff</code> Tag Image File Format <code>.webp</code> <code>yolo predict source=image.webp</code> WebP <code>.pfm</code> <code>yolo predict source=image.pfm</code> Portable FloatMap"},{"location":"modes/predict/#videos","title":"Videos","text":"<p>The below table contains valid Ultralytics video formats.</p> Video Suffixes Example Predict Command Reference <code>.asf</code> <code>yolo predict source=video.asf</code> Advanced Systems Format <code>.avi</code> <code>yolo predict source=video.avi</code> Audio Video Interleave <code>.gif</code> <code>yolo predict source=video.gif</code> Graphics Interchange Format <code>.m4v</code> <code>yolo predict source=video.m4v</code> MPEG-4 Part 14 <code>.mkv</code> <code>yolo predict source=video.mkv</code> Matroska <code>.mov</code> <code>yolo predict source=video.mov</code> QuickTime File Format <code>.mp4</code> <code>yolo predict source=video.mp4</code> MPEG-4 Part 14 - Wikipedia <code>.mpeg</code> <code>yolo predict source=video.mpeg</code> MPEG-1 Part 2 <code>.mpg</code> <code>yolo predict source=video.mpg</code> MPEG-1 Part 2 <code>.ts</code> <code>yolo predict source=video.ts</code> MPEG Transport Stream <code>.wmv</code> <code>yolo predict source=video.wmv</code> Windows Media Video <code>.webm</code> <code>yolo predict source=video.webm</code> WebM Project"},{"location":"modes/predict/#working-with-results","title":"Working with Results","text":"<p>All Ultralytics <code>predict()</code> calls will return a list of <code>Results</code> objects:</p> <p>Results</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Run inference on an image\nresults = model(\"bus.jpg\")  # list of 1 Results object\nresults = model([\"bus.jpg\", \"zidane.jpg\"])  # list of 2 Results objects\n</code></pre> <p><code>Results</code> objects have the following attributes:</p> Attribute Type Description <code>orig_img</code> <code>numpy.ndarray</code> The original image as a numpy array. <code>orig_shape</code> <code>tuple</code> The original image shape in (height, width) format. <code>boxes</code> <code>Boxes, optional</code> A Boxes object containing the detection bounding boxes. <code>masks</code> <code>Masks, optional</code> A Masks object containing the detection masks. <code>probs</code> <code>Probs, optional</code> A Probs object containing probabilities of each class for classification task. <code>keypoints</code> <code>Keypoints, optional</code> A Keypoints object containing detected keypoints for each object. <code>obb</code> <code>OBB, optional</code> An OBB object containing oriented bounding boxes. <code>speed</code> <code>dict</code> A dictionary of preprocess, inference, and postprocess speeds in milliseconds per image. <code>names</code> <code>dict</code> A dictionary of class names. <code>path</code> <code>str</code> The path to the image file. <p><code>Results</code> objects have the following methods:</p> Method Return Type Description <code>update()</code> <code>None</code> Update the boxes, masks, and probs attributes of the Results object. <code>cpu()</code> <code>Results</code> Return a copy of the Results object with all tensors on CPU memory. <code>numpy()</code> <code>Results</code> Return a copy of the Results object with all tensors as numpy arrays. <code>cuda()</code> <code>Results</code> Return a copy of the Results object with all tensors on GPU memory. <code>to()</code> <code>Results</code> Return a copy of the Results object with tensors on the specified device and dtype. <code>new()</code> <code>Results</code> Return a new Results object with the same image, path, and names. <code>plot()</code> <code>numpy.ndarray</code> Plots the detection results. Returns a numpy array of the annotated image. <code>show()</code> <code>None</code> Show annotated results to screen. <code>save()</code> <code>None</code> Save annotated results to file. <code>verbose()</code> <code>str</code> Return log string for each task. <code>save_txt()</code> <code>None</code> Save predictions into a txt file. <code>save_crop()</code> <code>None</code> Save cropped predictions to <code>save_dir/cls/file_name.jpg</code>. <code>tojson()</code> <code>str</code> Convert the object to JSON format. <p>For more details see the <code>Results</code> class documentation.</p>"},{"location":"modes/predict/#boxes","title":"Boxes","text":"<p><code>Boxes</code> object can be used to index, manipulate, and convert bounding boxes to different formats.</p> <p>Boxes</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Run inference on an image\nresults = model(\"bus.jpg\")  # results list\n\n# View results\nfor r in results:\n    print(r.boxes)  # print the Boxes object containing the detection bounding boxes\n</code></pre> <p>Here is a table for the <code>Boxes</code> class methods and properties, including their name, type, and description:</p> Name Type Description <code>cpu()</code> Method Move the object to CPU memory. <code>numpy()</code> Method Convert the object to a numpy array. <code>cuda()</code> Method Move the object to CUDA memory. <code>to()</code> Method Move the object to the specified device. <code>xyxy</code> Property (<code>torch.Tensor</code>) Return the boxes in xyxy format. <code>conf</code> Property (<code>torch.Tensor</code>) Return the confidence values of the boxes. <code>cls</code> Property (<code>torch.Tensor</code>) Return the class values of the boxes. <code>id</code> Property (<code>torch.Tensor</code>) Return the track IDs of the boxes (if available). <code>xywh</code> Property (<code>torch.Tensor</code>) Return the boxes in xywh format. <code>xyxyn</code> Property (<code>torch.Tensor</code>) Return the boxes in xyxy format normalized by original image size. <code>xywhn</code> Property (<code>torch.Tensor</code>) Return the boxes in xywh format normalized by original image size. <p>For more details see the <code>Boxes</code> class documentation.</p>"},{"location":"modes/predict/#masks","title":"Masks","text":"<p><code>Masks</code> object can be used index, manipulate and convert masks to segments.</p> <p>Masks</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n-seg Segment model\nmodel = YOLO(\"yolov8n-seg.pt\")\n\n# Run inference on an image\nresults = model(\"bus.jpg\")  # results list\n\n# View results\nfor r in results:\n    print(r.masks)  # print the Masks object containing the detected instance masks\n</code></pre> <p>Here is a table for the <code>Masks</code> class methods and properties, including their name, type, and description:</p> Name Type Description <code>cpu()</code> Method Returns the masks tensor on CPU memory. <code>numpy()</code> Method Returns the masks tensor as a numpy array. <code>cuda()</code> Method Returns the masks tensor on GPU memory. <code>to()</code> Method Returns the masks tensor with the specified device and dtype. <code>xyn</code> Property (<code>torch.Tensor</code>) A list of normalized segments represented as tensors. <code>xy</code> Property (<code>torch.Tensor</code>) A list of segments in pixel coordinates represented as tensors. <p>For more details see the <code>Masks</code> class documentation.</p>"},{"location":"modes/predict/#keypoints","title":"Keypoints","text":"<p><code>Keypoints</code> object can be used index, manipulate and normalize coordinates.</p> <p>Keypoints</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n-pose Pose model\nmodel = YOLO(\"yolov8n-pose.pt\")\n\n# Run inference on an image\nresults = model(\"bus.jpg\")  # results list\n\n# View results\nfor r in results:\n    print(r.keypoints)  # print the Keypoints object containing the detected keypoints\n</code></pre> <p>Here is a table for the <code>Keypoints</code> class methods and properties, including their name, type, and description:</p> Name Type Description <code>cpu()</code> Method Returns the keypoints tensor on CPU memory. <code>numpy()</code> Method Returns the keypoints tensor as a numpy array. <code>cuda()</code> Method Returns the keypoints tensor on GPU memory. <code>to()</code> Method Returns the keypoints tensor with the specified device and dtype. <code>xyn</code> Property (<code>torch.Tensor</code>) A list of normalized keypoints represented as tensors. <code>xy</code> Property (<code>torch.Tensor</code>) A list of keypoints in pixel coordinates represented as tensors. <code>conf</code> Property (<code>torch.Tensor</code>) Returns confidence values of keypoints if available, else None. <p>For more details see the <code>Keypoints</code> class documentation.</p>"},{"location":"modes/predict/#probs","title":"Probs","text":"<p><code>Probs</code> object can be used index, get <code>top1</code> and <code>top5</code> indices and scores of classification.</p> <p>Probs</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n-cls Classify model\nmodel = YOLO(\"yolov8n-cls.pt\")\n\n# Run inference on an image\nresults = model(\"bus.jpg\")  # results list\n\n# View results\nfor r in results:\n    print(r.probs)  # print the Probs object containing the detected class probabilities\n</code></pre> <p>Here's a table summarizing the methods and properties for the <code>Probs</code> class:</p> Name Type Description <code>cpu()</code> Method Returns a copy of the probs tensor on CPU memory. <code>numpy()</code> Method Returns a copy of the probs tensor as a numpy array. <code>cuda()</code> Method Returns a copy of the probs tensor on GPU memory. <code>to()</code> Method Returns a copy of the probs tensor with the specified device and dtype. <code>top1</code> Property (<code>int</code>) Index of the top 1 class. <code>top5</code> Property (<code>list[int]</code>) Indices of the top 5 classes. <code>top1conf</code> Property (<code>torch.Tensor</code>) Confidence of the top 1 class. <code>top5conf</code> Property (<code>torch.Tensor</code>) Confidences of the top 5 classes. <p>For more details see the <code>Probs</code> class documentation.</p>"},{"location":"modes/predict/#obb","title":"OBB","text":"<p><code>OBB</code> object can be used to index, manipulate, and convert oriented bounding boxes to different formats.</p> <p>OBB</p> <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n-obb.pt\")\n\n# Run inference on an image\nresults = model(\"bus.jpg\")  # results list\n\n# View results\nfor r in results:\n    print(r.obb)  # print the OBB object containing the oriented detection bounding boxes\n</code></pre> <p>Here is a table for the <code>OBB</code> class methods and properties, including their name, type, and description:</p> Name Type Description <code>cpu()</code> Method Move the object to CPU memory. <code>numpy()</code> Method Convert the object to a numpy array. <code>cuda()</code> Method Move the object to CUDA memory. <code>to()</code> Method Move the object to the specified device. <code>conf</code> Property (<code>torch.Tensor</code>) Return the confidence values of the boxes. <code>cls</code> Property (<code>torch.Tensor</code>) Return the class values of the boxes. <code>id</code> Property (<code>torch.Tensor</code>) Return the track IDs of the boxes (if available). <code>xyxy</code> Property (<code>torch.Tensor</code>) Return the horizontal boxes in xyxy format. <code>xywhr</code> Property (<code>torch.Tensor</code>) Return the rotated boxes in xywhr format. <code>xyxyxyxy</code> Property (<code>torch.Tensor</code>) Return the rotated boxes in xyxyxyxy format. <code>xyxyxyxyn</code> Property (<code>torch.Tensor</code>) Return the rotated boxes in xyxyxyxy format normalized by image size. <p>For more details see the <code>OBB</code> class documentation.</p>"},{"location":"modes/predict/#plotting-results","title":"Plotting Results","text":"<p>The <code>plot()</code> method in <code>Results</code> objects facilitates visualization of predictions by overlaying detected objects (such as bounding boxes, masks, keypoints, and probabilities) onto the original image. This method returns the annotated image as a NumPy array, allowing for easy display or saving.</p> <p>Plotting</p> <pre><code>from PIL import Image\n\nfrom ultralytics import YOLO\n\n# Load a pretrained YOLOv8n model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Run inference on 'bus.jpg'\nresults = model([\"bus.jpg\", \"zidane.jpg\"])  # results list\n\n# Visualize the results\nfor i, r in enumerate(results):\n    # Plot results image\n    im_bgr = r.plot()  # BGR-order numpy array\n    im_rgb = Image.fromarray(im_bgr[..., ::-1])  # RGB-order PIL image\n\n    # Show results to screen (in supported environments)\n    r.show()\n\n    # Save results to disk\n    r.save(filename=f\"results{i}.jpg\")\n</code></pre>"},{"location":"modes/predict/#plot-method-parameters","title":"<code>plot()</code> Method Parameters","text":"<p>The <code>plot()</code> method supports various arguments to customize the output:</p> Argument Type Description Default <code>conf</code> <code>bool</code> Include detection confidence scores. <code>True</code> <code>line_width</code> <code>float</code> Line width of bounding boxes. Scales with image size if <code>None</code>. <code>None</code> <code>font_size</code> <code>float</code> Text font size. Scales with image size if <code>None</code>. <code>None</code> <code>font</code> <code>str</code> Font name for text annotations. <code>'Arial.ttf'</code> <code>pil</code> <code>bool</code> Return image as a PIL Image object. <code>False</code> <code>img</code> <code>numpy.ndarray</code> Alternative image for plotting. Uses the original image if <code>None</code>. <code>None</code> <code>im_gpu</code> <code>torch.Tensor</code> GPU-accelerated image for faster mask plotting. Shape: (1, 3, 640, 640). <code>None</code> <code>kpt_radius</code> <code>int</code> Radius for drawn keypoints. <code>5</code> <code>kpt_line</code> <code>bool</code> Connect keypoints with lines. <code>True</code> <code>labels</code> <code>bool</code> Include class labels in annotations. <code>True</code> <code>boxes</code> <code>bool</code> Overlay bounding boxes on the image. <code>True</code> <code>masks</code> <code>bool</code> Overlay masks on the image. <code>True</code> <code>probs</code> <code>bool</code> Include classification probabilities. <code>True</code> <code>show</code> <code>bool</code> Display the annotated image directly using the default image viewer. <code>False</code> <code>save</code> <code>bool</code> Save the annotated image to a file specified by <code>filename</code>. <code>False</code> <code>filename</code> <code>str</code> Path and name of the file to save the annotated image if <code>save</code> is <code>True</code>. <code>None</code>"},{"location":"modes/predict/#thread-safe-inference","title":"Thread-Safe Inference","text":"<p>Ensuring thread safety during inference is crucial when you are running multiple YOLO models in parallel across different threads. Thread-safe inference guarantees that each thread's predictions are isolated and do not interfere with one another, avoiding race conditions and ensuring consistent and reliable outputs.</p> <p>When using YOLO models in a multi-threaded application, it's important to instantiate separate model objects for each thread or employ thread-local storage to prevent conflicts:</p> <p>Thread-Safe Inference</p> <p>Instantiate a single model inside each thread for thread-safe inference: <pre><code>from threading import Thread\n\nfrom ultralytics import YOLO\n\n\ndef thread_safe_predict(image_path):\n    \"\"\"Performs thread-safe prediction on an image using a locally instantiated YOLO model.\"\"\"\n    local_model = YOLO(\"yolov8n.pt\")\n    results = local_model.predict(image_path)\n    # Process results\n\n\n# Starting threads that each have their own model instance\nThread(target=thread_safe_predict, args=(\"image1.jpg\",)).start()\nThread(target=thread_safe_predict, args=(\"image2.jpg\",)).start()\n</code></pre></p> <p>For an in-depth look at thread-safe inference with YOLO models and step-by-step instructions, please refer to our YOLO Thread-Safe Inference Guide. This guide will provide you with all the necessary information to avoid common pitfalls and ensure that your multi-threaded inference runs smoothly.</p>"},{"location":"modes/predict/#streaming-source-for-loop","title":"Streaming Source <code>for</code>-loop","text":"<p>Here's a Python script using OpenCV (<code>cv2</code>) and YOLOv8 to run inference on video frames. This script assumes you have already installed the necessary packages (<code>opencv-python</code> and <code>ultralytics</code>).</p> <p>Streaming for-loop</p> <pre><code>import cv2\n\nfrom ultralytics import YOLO\n\n# Load the YOLOv8 model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Open the video file\nvideo_path = \"path/to/your/video/file.mp4\"\ncap = cv2.VideoCapture(video_path)\n\n# Loop through the video frames\nwhile cap.isOpened():\n    # Read a frame from the video\n    success, frame = cap.read()\n\n    if success:\n        # Run YOLOv8 inference on the frame\n        results = model(frame)\n\n        # Visualize the results on the frame\n        annotated_frame = results[0].plot()\n\n        # Display the annotated frame\n        cv2.imshow(\"YOLOv8 Inference\", annotated_frame)\n\n        # Break the loop if 'q' is pressed\n        if cv2.waitKey(1) &amp; 0xFF == ord(\"q\"):\n            break\n    else:\n        # Break the loop if the end of the video is reached\n        break\n\n# Release the video capture object and close the display window\ncap.release()\ncv2.destroyAllWindows()\n</code></pre> <p>This script will run predictions on each frame of the video, visualize the results, and display them in a window. The loop can be exited by pressing 'q'.</p>"},{"location":"modes/predict/#faq","title":"FAQ","text":""},{"location":"modes/predict/#what-is-ultralytics-yolov8-and-its-predict-mode-for-real-time-inference","title":"What is Ultralytics YOLOv8 and its predict mode for real-time inference?","text":"<p>Ultralytics YOLOv8 is a state-of-the-art model for real-time object detection, segmentation, and classification. Its predict mode allows users to perform high-speed inference on various data sources such as images, videos, and live streams. Designed for performance and versatility, it also offers batch processing and streaming modes. For more details on its features, check out the Ultralytics YOLOv8 predict mode.</p>"},{"location":"modes/predict/#how-can-i-run-inference-using-ultralytics-yolov8-on-different-data-sources","title":"How can I run inference using Ultralytics YOLOv8 on different data sources?","text":"<p>Ultralytics YOLOv8 can process a wide range of data sources, including individual images, videos, directories, URLs, and streams. You can specify the data source in the <code>model.predict()</code> call. For example, use <code>'image.jpg'</code> for a local image or <code>'https://ultralytics.com/images/bus.jpg'</code> for a URL. Check out the detailed examples for various inference sources in the documentation.</p>"},{"location":"modes/predict/#how-do-i-optimize-yolov8-inference-speed-and-memory-usage","title":"How do I optimize YOLOv8 inference speed and memory usage?","text":"<p>To optimize inference speed and manage memory efficiently, you can use the streaming mode by setting <code>stream=True</code> in the predictor's call method. The streaming mode generates a memory-efficient generator of <code>Results</code> objects instead of loading all frames into memory. For processing long videos or large datasets, streaming mode is particularly useful. Learn more about streaming mode.</p>"},{"location":"modes/predict/#what-inference-arguments-does-ultralytics-yolov8-support","title":"What inference arguments does Ultralytics YOLOv8 support?","text":"<p>The <code>model.predict()</code> method in YOLOv8 supports various arguments such as <code>conf</code>, <code>iou</code>, <code>imgsz</code>, <code>device</code>, and more. These arguments allow you to customize the inference process, setting parameters like confidence thresholds, image size, and the device used for computation. Detailed descriptions of these arguments can be found in the inference arguments section.</p>"},{"location":"modes/predict/#how-can-i-visualize-and-save-the-results-of-yolov8-predictions","title":"How can I visualize and save the results of YOLOv8 predictions?","text":"<p>After running inference with YOLOv8, the <code>Results</code> objects contain methods for displaying and saving annotated images. You can use methods like <code>result.show()</code> and <code>result.save(filename=\"result.jpg\")</code> to visualize and save the results. For a comprehensive list of these methods, refer to the working with results section.</p>"},{"location":"modes/track/","title":"Multi-Object Tracking with Ultralytics YOLO","text":"<p>Object tracking in the realm of video analytics is a critical task that not only identifies the location and class of objects within the frame but also maintains a unique ID for each detected object as the video progresses. The applications are limitless\u2014ranging from surveillance and security to real-time sports analytics.</p>"},{"location":"modes/track/#why-choose-ultralytics-yolo-for-object-tracking","title":"Why Choose Ultralytics YOLO for Object Tracking?","text":"<p>The output from Ultralytics trackers is consistent with standard object detection but has the added value of object IDs. This makes it easy to track objects in video streams and perform subsequent analytics. Here's why you should consider using Ultralytics YOLO for your object tracking needs:</p> <ul> <li>Efficiency: Process video streams in real-time without compromising accuracy.</li> <li>Flexibility: Supports multiple tracking algorithms and configurations.</li> <li>Ease of Use: Simple Python API and CLI options for quick integration and deployment.</li> <li>Customizability: Easy to use with custom trained YOLO models, allowing integration into domain-specific applications.</li> </ul> <p> Watch: Object Detection and Tracking with Ultralytics YOLOv8. </p>"},{"location":"modes/track/#real-world-applications","title":"Real-world Applications","text":"Transportation Retail Aquaculture Vehicle Tracking People Tracking Fish Tracking"},{"location":"modes/track/#features-at-a-glance","title":"Features at a Glance","text":"<p>Ultralytics YOLO extends its object detection features to provide robust and versatile object tracking:</p> <ul> <li>Real-Time Tracking: Seamlessly track objects in high-frame-rate videos.</li> <li>Multiple Tracker Support: Choose from a variety of established tracking algorithms.</li> <li>Customizable Tracker Configurations: Tailor the tracking algorithm to meet specific requirements by adjusting various parameters.</li> </ul>"},{"location":"modes/track/#available-trackers","title":"Available Trackers","text":"<p>Ultralytics YOLO supports the following tracking algorithms. They can be enabled by passing the relevant YAML configuration file such as <code>tracker=tracker_type.yaml</code>:</p> <ul> <li>BoT-SORT - Use <code>botsort.yaml</code> to enable this tracker.</li> <li>ByteTrack - Use <code>bytetrack.yaml</code> to enable this tracker.</li> </ul> <p>The default tracker is BoT-SORT.</p>"},{"location":"modes/track/#tracking","title":"Tracking","text":"<p>Tracker Threshold Information</p> <p>If object confidence score will be low, i.e lower than <code>track_high_thresh</code>, then there will be no tracks successfully returned and updated.</p> <p>To run the tracker on video streams, use a trained Detect, Segment or Pose model such as YOLOv8n, YOLOv8n-seg and YOLOv8n-pose.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load an official or custom model\nmodel = YOLO(\"yolov8n.pt\")  # Load an official Detect model\nmodel = YOLO(\"yolov8n-seg.pt\")  # Load an official Segment model\nmodel = YOLO(\"yolov8n-pose.pt\")  # Load an official Pose model\nmodel = YOLO(\"path/to/best.pt\")  # Load a custom trained model\n\n# Perform tracking with the model\nresults = model.track(\"https://youtu.be/LNwODJXcvt4\", show=True)  # Tracking with default tracker\nresults = model.track(\"https://youtu.be/LNwODJXcvt4\", show=True, tracker=\"bytetrack.yaml\")  # with ByteTrack\n</code></pre> <pre><code># Perform tracking with various models using the command line interface\nyolo track model=yolov8n.pt source=\"https://youtu.be/LNwODJXcvt4\"  # Official Detect model\nyolo track model=yolov8n-seg.pt source=\"https://youtu.be/LNwODJXcvt4\"  # Official Segment model\nyolo track model=yolov8n-pose.pt source=\"https://youtu.be/LNwODJXcvt4\"  # Official Pose model\nyolo track model=path/to/best.pt source=\"https://youtu.be/LNwODJXcvt4\"  # Custom trained model\n\n# Track using ByteTrack tracker\nyolo track model=path/to/best.pt tracker=\"bytetrack.yaml\"\n</code></pre> <p>As can be seen in the above usage, tracking is available for all Detect, Segment and Pose models run on videos or streaming sources.</p>"},{"location":"modes/track/#configuration","title":"Configuration","text":"<p>Tracker Threshold Information</p> <p>If object confidence score will be low, i.e lower than <code>track_high_thresh</code>, then there will be no tracks successfully returned and updated.</p>"},{"location":"modes/track/#tracking-arguments","title":"Tracking Arguments","text":"<p>Tracking configuration shares properties with Predict mode, such as <code>conf</code>, <code>iou</code>, and <code>show</code>. For further configurations, refer to the Predict model page.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Configure the tracking parameters and run the tracker\nmodel = YOLO(\"yolov8n.pt\")\nresults = model.track(source=\"https://youtu.be/LNwODJXcvt4\", conf=0.3, iou=0.5, show=True)\n</code></pre> <pre><code># Configure tracking parameters and run the tracker using the command line interface\nyolo track model=yolov8n.pt source=\"https://youtu.be/LNwODJXcvt4\" conf=0.3, iou=0.5 show\n</code></pre>"},{"location":"modes/track/#tracker-selection","title":"Tracker Selection","text":"<p>Ultralytics also allows you to use a modified tracker configuration file. To do this, simply make a copy of a tracker config file (for example, <code>custom_tracker.yaml</code>) from ultralytics/cfg/trackers and modify any configurations (except the <code>tracker_type</code>) as per your needs.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load the model and run the tracker with a custom configuration file\nmodel = YOLO(\"yolov8n.pt\")\nresults = model.track(source=\"https://youtu.be/LNwODJXcvt4\", tracker=\"custom_tracker.yaml\")\n</code></pre> <pre><code># Load the model and run the tracker with a custom configuration file using the command line interface\nyolo track model=yolov8n.pt source=\"https://youtu.be/LNwODJXcvt4\" tracker='custom_tracker.yaml'\n</code></pre> <p>For a comprehensive list of tracking arguments, refer to the ultralytics/cfg/trackers page.</p>"},{"location":"modes/track/#python-examples","title":"Python Examples","text":""},{"location":"modes/track/#persisting-tracks-loop","title":"Persisting Tracks Loop","text":"<p>Here is a Python script using OpenCV (<code>cv2</code>) and YOLOv8 to run object tracking on video frames. This script still assumes you have already installed the necessary packages (<code>opencv-python</code> and <code>ultralytics</code>). The <code>persist=True</code> argument tells the tracker that the current image or frame is the next in a sequence and to expect tracks from the previous image in the current image.</p> <p>Streaming for-loop with tracking</p> <pre><code>import cv2\n\nfrom ultralytics import YOLO\n\n# Load the YOLOv8 model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Open the video file\nvideo_path = \"path/to/video.mp4\"\ncap = cv2.VideoCapture(video_path)\n\n# Loop through the video frames\nwhile cap.isOpened():\n    # Read a frame from the video\n    success, frame = cap.read()\n\n    if success:\n        # Run YOLOv8 tracking on the frame, persisting tracks between frames\n        results = model.track(frame, persist=True)\n\n        # Visualize the results on the frame\n        annotated_frame = results[0].plot()\n\n        # Display the annotated frame\n        cv2.imshow(\"YOLOv8 Tracking\", annotated_frame)\n\n        # Break the loop if 'q' is pressed\n        if cv2.waitKey(1) &amp; 0xFF == ord(\"q\"):\n            break\n    else:\n        # Break the loop if the end of the video is reached\n        break\n\n# Release the video capture object and close the display window\ncap.release()\ncv2.destroyAllWindows()\n</code></pre> <p>Please note the change from <code>model(frame)</code> to <code>model.track(frame)</code>, which enables object tracking instead of simple detection. This modified script will run the tracker on each frame of the video, visualize the results, and display them in a window. The loop can be exited by pressing 'q'.</p>"},{"location":"modes/track/#plotting-tracks-over-time","title":"Plotting Tracks Over Time","text":"<p>Visualizing object tracks over consecutive frames can provide valuable insights into the movement patterns and behavior of detected objects within a video. With Ultralytics YOLOv8, plotting these tracks is a seamless and efficient process.</p> <p>In the following example, we demonstrate how to utilize YOLOv8's tracking capabilities to plot the movement of detected objects across multiple video frames. This script involves opening a video file, reading it frame by frame, and utilizing the YOLO model to identify and track various objects. By retaining the center points of the detected bounding boxes and connecting them, we can draw lines that represent the paths followed by the tracked objects.</p> <p>Plotting tracks over multiple video frames</p> <pre><code>from collections import defaultdict\n\nimport cv2\nimport numpy as np\n\nfrom ultralytics import YOLO\n\n# Load the YOLOv8 model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Open the video file\nvideo_path = \"path/to/video.mp4\"\ncap = cv2.VideoCapture(video_path)\n\n# Store the track history\ntrack_history = defaultdict(lambda: [])\n\n# Loop through the video frames\nwhile cap.isOpened():\n    # Read a frame from the video\n    success, frame = cap.read()\n\n    if success:\n        # Run YOLOv8 tracking on the frame, persisting tracks between frames\n        results = model.track(frame, persist=True)\n\n        # Get the boxes and track IDs\n        boxes = results[0].boxes.xywh.cpu()\n        track_ids = results[0].boxes.id.int().cpu().tolist()\n\n        # Visualize the results on the frame\n        annotated_frame = results[0].plot()\n\n        # Plot the tracks\n        for box, track_id in zip(boxes, track_ids):\n            x, y, w, h = box\n            track = track_history[track_id]\n            track.append((float(x), float(y)))  # x, y center point\n            if len(track) &gt; 30:  # retain 90 tracks for 90 frames\n                track.pop(0)\n\n            # Draw the tracking lines\n            points = np.hstack(track).astype(np.int32).reshape((-1, 1, 2))\n            cv2.polylines(annotated_frame, [points], isClosed=False, color=(230, 230, 230), thickness=10)\n\n        # Display the annotated frame\n        cv2.imshow(\"YOLOv8 Tracking\", annotated_frame)\n\n        # Break the loop if 'q' is pressed\n        if cv2.waitKey(1) &amp; 0xFF == ord(\"q\"):\n            break\n    else:\n        # Break the loop if the end of the video is reached\n        break\n\n# Release the video capture object and close the display window\ncap.release()\ncv2.destroyAllWindows()\n</code></pre>"},{"location":"modes/track/#multithreaded-tracking","title":"Multithreaded Tracking","text":"<p>Multithreaded tracking provides the capability to run object tracking on multiple video streams simultaneously. This is particularly useful when handling multiple video inputs, such as from multiple surveillance cameras, where concurrent processing can greatly enhance efficiency and performance.</p> <p>In the provided Python script, we make use of Python's <code>threading</code> module to run multiple instances of the tracker concurrently. Each thread is responsible for running the tracker on one video file, and all the threads run simultaneously in the background.</p> <p>To ensure that each thread receives the correct parameters (the video file, the model to use and the file index), we define a function <code>run_tracker_in_thread</code> that accepts these parameters and contains the main tracking loop. This function reads the video frame by frame, runs the tracker, and displays the results.</p> <p>Two different models are used in this example: <code>yolov8n.pt</code> and <code>yolov8n-seg.pt</code>, each tracking objects in a different video file. The video files are specified in <code>video_file1</code> and <code>video_file2</code>.</p> <p>The <code>daemon=True</code> parameter in <code>threading.Thread</code> means that these threads will be closed as soon as the main program finishes. We then start the threads with <code>start()</code> and use <code>join()</code> to make the main thread wait until both tracker threads have finished.</p> <p>Finally, after all threads have completed their task, the windows displaying the results are closed using <code>cv2.destroyAllWindows()</code>.</p> <p>Streaming for-loop with tracking</p> <pre><code>import threading\n\nimport cv2\n\nfrom ultralytics import YOLO\n\n\ndef run_tracker_in_thread(filename, model, file_index):\n    \"\"\"\n    Runs a video file or webcam stream concurrently with the YOLOv8 model using threading.\n\n    This function captures video frames from a given file or camera source and utilizes the YOLOv8 model for object\n    tracking. The function runs in its own thread for concurrent processing.\n\n    Args:\n        filename (str): The path to the video file or the identifier for the webcam/external camera source.\n        model (obj): The YOLOv8 model object.\n        file_index (int): An index to uniquely identify the file being processed, used for display purposes.\n\n    Note:\n        Press 'q' to quit the video display window.\n    \"\"\"\n    video = cv2.VideoCapture(filename)  # Read the video file\n\n    while True:\n        ret, frame = video.read()  # Read the video frames\n\n        # Exit the loop if no more frames in either video\n        if not ret:\n            break\n\n        # Track objects in frames if available\n        results = model.track(frame, persist=True)\n        res_plotted = results[0].plot()\n        cv2.imshow(f\"Tracking_Stream_{file_index}\", res_plotted)\n\n        key = cv2.waitKey(1)\n        if key == ord(\"q\"):\n            break\n\n    # Release video sources\n    video.release()\n\n\n# Load the models\nmodel1 = YOLO(\"yolov8n.pt\")\nmodel2 = YOLO(\"yolov8n-seg.pt\")\n\n# Define the video files for the trackers\nvideo_file1 = \"path/to/video1.mp4\"  # Path to video file, 0 for webcam\nvideo_file2 = 0  # Path to video file, 0 for webcam, 1 for external camera\n\n# Create the tracker threads\ntracker_thread1 = threading.Thread(target=run_tracker_in_thread, args=(video_file1, model1, 1), daemon=True)\ntracker_thread2 = threading.Thread(target=run_tracker_in_thread, args=(video_file2, model2, 2), daemon=True)\n\n# Start the tracker threads\ntracker_thread1.start()\ntracker_thread2.start()\n\n# Wait for the tracker threads to finish\ntracker_thread1.join()\ntracker_thread2.join()\n\n# Clean up and close windows\ncv2.destroyAllWindows()\n</code></pre> <p>This example can easily be extended to handle more video files and models by creating more threads and applying the same methodology.</p>"},{"location":"modes/track/#contribute-new-trackers","title":"Contribute New Trackers","text":"<p>Are you proficient in multi-object tracking and have successfully implemented or adapted a tracking algorithm with Ultralytics YOLO? We invite you to contribute to our Trackers section in ultralytics/cfg/trackers! Your real-world applications and solutions could be invaluable for users working on tracking tasks.</p> <p>By contributing to this section, you help expand the scope of tracking solutions available within the Ultralytics YOLO framework, adding another layer of functionality and utility for the community.</p> <p>To initiate your contribution, please refer to our Contributing Guide for comprehensive instructions on submitting a Pull Request (PR) \ud83d\udee0\ufe0f. We are excited to see what you bring to the table!</p> <p>Together, let's enhance the tracking capabilities of the Ultralytics YOLO ecosystem \ud83d\ude4f!</p>"},{"location":"modes/track/#faq","title":"FAQ","text":""},{"location":"modes/track/#what-is-multi-object-tracking-and-how-does-ultralytics-yolo-support-it","title":"What is Multi-Object Tracking and how does Ultralytics YOLO support it?","text":"<p>Multi-object tracking in video analytics involves both identifying objects and maintaining a unique ID for each detected object across video frames. Ultralytics YOLO supports this by providing real-time tracking along with object IDs, facilitating tasks such as security surveillance and sports analytics. The system uses trackers like BoT-SORT and ByteTrack, which can be configured via YAML files.</p>"},{"location":"modes/track/#how-do-i-configure-a-custom-tracker-for-ultralytics-yolo","title":"How do I configure a custom tracker for Ultralytics YOLO?","text":"<p>You can configure a custom tracker by copying an existing tracker configuration file (e.g., <code>custom_tracker.yaml</code>) from the Ultralytics tracker configuration directory and modifying parameters as needed, except for the <code>tracker_type</code>. Use this file in your tracking model like so:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\nmodel = YOLO(\"yolov8n.pt\")\nresults = model.track(source=\"https://youtu.be/LNwODJXcvt4\", tracker=\"custom_tracker.yaml\")\n</code></pre> <pre><code>yolo track model=yolov8n.pt source=\"https://youtu.be/LNwODJXcvt4\" tracker='custom_tracker.yaml'\n</code></pre>"},{"location":"modes/track/#how-can-i-run-object-tracking-on-multiple-video-streams-simultaneously","title":"How can I run object tracking on multiple video streams simultaneously?","text":"<p>To run object tracking on multiple video streams simultaneously, you can use Python's <code>threading</code> module. Each thread will handle a separate video stream. Here's an example of how you can set this up:</p> <p>Multithreaded Tracking</p> <pre><code>import threading\n\nimport cv2\n\nfrom ultralytics import YOLO\n\n\ndef run_tracker_in_thread(filename, model, file_index):\n    video = cv2.VideoCapture(filename)\n    while True:\n        ret, frame = video.read()\n        if not ret:\n            break\n        results = model.track(frame, persist=True)\n        res_plotted = results[0].plot()\n        cv2.imshow(f\"Tracking_Stream_{file_index}\", res_plotted)\n        if cv2.waitKey(1) &amp; 0xFF == ord(\"q\"):\n            break\n    video.release()\n\n\nmodel1 = YOLO(\"yolov8n.pt\")\nmodel2 = YOLO(\"yolov8n-seg.pt\")\nvideo_file1 = \"path/to/video1.mp4\"\nvideo_file2 = 0  # Path to a second video file, or 0 for a webcam\n\ntracker_thread1 = threading.Thread(target=run_tracker_in_thread, args=(video_file1, model1, 1), daemon=True)\ntracker_thread2 = threading.Thread(target=run_tracker_in_thread, args=(video_file2, model2, 2), daemon=True)\n\ntracker_thread1.start()\ntracker_thread2.start()\n\ntracker_thread1.join()\ntracker_thread2.join()\n\ncv2.destroyAllWindows()\n</code></pre>"},{"location":"modes/track/#what-are-the-real-world-applications-of-multi-object-tracking-with-ultralytics-yolo","title":"What are the real-world applications of multi-object tracking with Ultralytics YOLO?","text":"<p>Multi-object tracking with Ultralytics YOLO has numerous applications, including:</p> <ul> <li>Transportation: Vehicle tracking for traffic management and autonomous driving.</li> <li>Retail: People tracking for in-store analytics and security.</li> <li>Aquaculture: Fish tracking for monitoring aquatic environments.</li> </ul> <p>These applications benefit from Ultralytics YOLO's ability to process high-frame-rate videos in real time.</p>"},{"location":"modes/track/#how-can-i-visualize-object-tracks-over-multiple-video-frames-with-ultralytics-yolo","title":"How can I visualize object tracks over multiple video frames with Ultralytics YOLO?","text":"<p>To visualize object tracks over multiple video frames, you can use the YOLO model's tracking features along with OpenCV to draw the paths of detected objects. Here's an example script that demonstrates this:</p> <p>Plotting tracks over multiple video frames</p> <pre><code>from collections import defaultdict\n\nimport cv2\nimport numpy as np\n\nfrom ultralytics import YOLO\n\nmodel = YOLO(\"yolov8n.pt\")\nvideo_path = \"path/to/video.mp4\"\ncap = cv2.VideoCapture(video_path)\ntrack_history = defaultdict(lambda: [])\n\nwhile cap.isOpened():\n    success, frame = cap.read()\n    if success:\n        results = model.track(frame, persist=True)\n        boxes = results[0].boxes.xywh.cpu()\n        track_ids = results[0].boxes.id.int().cpu().tolist()\n        annotated_frame = results[0].plot()\n        for box, track_id in zip(boxes, track_ids):\n            x, y, w, h = box\n            track = track_history[track_id]\n            track.append((float(x), float(y)))\n            if len(track) &gt; 30:\n                track.pop(0)\n            points = np.hstack(track).astype(np.int32).reshape((-1, 1, 2))\n            cv2.polylines(annotated_frame, [points], isClosed=False, color=(230, 230, 230), thickness=10)\n        cv2.imshow(\"YOLOv8 Tracking\", annotated_frame)\n        if cv2.waitKey(1) &amp; 0xFF == ord(\"q\"):\n            break\n    else:\n        break\ncap.release()\ncv2.destroyAllWindows()\n</code></pre> <p>This script will plot the tracking lines showing the movement paths of the tracked objects over time.</p>"},{"location":"modes/train/","title":"Model Training with Ultralytics YOLO","text":""},{"location":"modes/train/#introduction","title":"Introduction","text":"<p>Training a deep learning model involves feeding it data and adjusting its parameters so that it can make accurate predictions. Train mode in Ultralytics YOLOv8 is engineered for effective and efficient training of object detection models, fully utilizing modern hardware capabilities. This guide aims to cover all the details you need to get started with training your own models using YOLOv8's robust set of features.</p> <p> Watch: How to Train a YOLOv8 model on Your Custom Dataset in Google Colab. </p>"},{"location":"modes/train/#why-choose-ultralytics-yolo-for-training","title":"Why Choose Ultralytics YOLO for Training?","text":"<p>Here are some compelling reasons to opt for YOLOv8's Train mode:</p> <ul> <li>Efficiency: Make the most out of your hardware, whether you're on a single-GPU setup or scaling across multiple GPUs.</li> <li>Versatility: Train on custom datasets in addition to readily available ones like COCO, VOC, and ImageNet.</li> <li>User-Friendly: Simple yet powerful CLI and Python interfaces for a straightforward training experience.</li> <li>Hyperparameter Flexibility: A broad range of customizable hyperparameters to fine-tune model performance.</li> </ul>"},{"location":"modes/train/#key-features-of-train-mode","title":"Key Features of Train Mode","text":"<p>The following are some notable features of YOLOv8's Train mode:</p> <ul> <li>Automatic Dataset Download: Standard datasets like COCO, VOC, and ImageNet are downloaded automatically on first use.</li> <li>Multi-GPU Support: Scale your training efforts seamlessly across multiple GPUs to expedite the process.</li> <li>Hyperparameter Configuration: The option to modify hyperparameters through YAML configuration files or CLI arguments.</li> <li>Visualization and Monitoring: Real-time tracking of training metrics and visualization of the learning process for better insights.</li> </ul> <p>Tip</p> <ul> <li>YOLOv8 datasets like COCO, VOC, ImageNet and many others automatically download on first use, i.e. <code>yolo train data=coco.yaml</code></li> </ul>"},{"location":"modes/train/#usage-examples","title":"Usage Examples","text":"<p>Train YOLOv8n on the COCO8 dataset for 100 epochs at image size 640. The training device can be specified using the <code>device</code> argument. If no argument is passed GPU <code>device=0</code> will be used if available, otherwise <code>device='cpu'</code> will be used. See Arguments section below for a full list of training arguments.</p> <p>Single-GPU and CPU Training Example</p> <p>Device is determined automatically. If a GPU is available then it will be used, otherwise training will start on CPU.</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n.pt\")  # load a pretrained model (recommended for training)\nmodel = YOLO(\"yolov8n.yaml\").load(\"yolov8n.pt\")  # build from YAML and transfer weights\n\n# Train the model\nresults = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code># Build a new model from YAML and start training from scratch\nyolo detect train data=coco8.yaml model=yolov8n.yaml epochs=100 imgsz=640\n\n# Start training from a pretrained *.pt model\nyolo detect train data=coco8.yaml model=yolov8n.pt epochs=100 imgsz=640\n\n# Build a new model from YAML, transfer pretrained weights to it and start training\nyolo detect train data=coco8.yaml model=yolov8n.yaml pretrained=yolov8n.pt epochs=100 imgsz=640\n</code></pre>"},{"location":"modes/train/#multi-gpu-training","title":"Multi-GPU Training","text":"<p>Multi-GPU training allows for more efficient utilization of available hardware resources by distributing the training load across multiple GPUs. This feature is available through both the Python API and the command-line interface. To enable multi-GPU training, specify the GPU device IDs you wish to use.</p> <p>Multi-GPU Training Example</p> <p>To train with 2 GPUs, CUDA devices 0 and 1 use the following commands. Expand to additional GPUs as required.</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load a pretrained model (recommended for training)\n\n# Train the model with 2 GPUs\nresults = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640, device=[0, 1])\n</code></pre> <pre><code># Start training from a pretrained *.pt model using GPUs 0 and 1\nyolo detect train data=coco8.yaml model=yolov8n.pt epochs=100 imgsz=640 device=0,1\n</code></pre>"},{"location":"modes/train/#apple-m1-and-m2-mps-training","title":"Apple M1 and M2 MPS Training","text":"<p>With the support for Apple M1 and M2 chips integrated in the Ultralytics YOLO models, it's now possible to train your models on devices utilizing the powerful Metal Performance Shaders (MPS) framework. The MPS offers a high-performance way of executing computation and image processing tasks on Apple's custom silicon.</p> <p>To enable training on Apple M1 and M2 chips, you should specify 'mps' as your device when initiating the training process. Below is an example of how you could do this in Python and via the command line:</p> <p>MPS Training Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load a pretrained model (recommended for training)\n\n# Train the model with 2 GPUs\nresults = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640, device=\"mps\")\n</code></pre> <pre><code># Start training from a pretrained *.pt model using GPUs 0 and 1\nyolo detect train data=coco8.yaml model=yolov8n.pt epochs=100 imgsz=640 device=mps\n</code></pre> <p>While leveraging the computational power of the M1/M2 chips, this enables more efficient processing of the training tasks. For more detailed guidance and advanced configuration options, please refer to the PyTorch MPS documentation.</p>"},{"location":"modes/train/#resuming-interrupted-trainings","title":"Resuming Interrupted Trainings","text":"<p>Resuming training from a previously saved state is a crucial feature when working with deep learning models. This can come in handy in various scenarios, like when the training process has been unexpectedly interrupted, or when you wish to continue training a model with new data or for more epochs.</p> <p>When training is resumed, Ultralytics YOLO loads the weights from the last saved model and also restores the optimizer state, learning rate scheduler, and the epoch number. This allows you to continue the training process seamlessly from where it was left off.</p> <p>You can easily resume training in Ultralytics YOLO by setting the <code>resume</code> argument to <code>True</code> when calling the <code>train</code> method, and specifying the path to the <code>.pt</code> file containing the partially trained model weights.</p> <p>Below is an example of how to resume an interrupted training using Python and via the command line:</p> <p>Resume Training Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"path/to/last.pt\")  # load a partially trained model\n\n# Resume training\nresults = model.train(resume=True)\n</code></pre> <pre><code># Resume an interrupted training\nyolo train resume model=path/to/last.pt\n</code></pre> <p>By setting <code>resume=True</code>, the <code>train</code> function will continue training from where it left off, using the state stored in the 'path/to/last.pt' file. If the <code>resume</code> argument is omitted or set to <code>False</code>, the <code>train</code> function will start a new training session.</p> <p>Remember that checkpoints are saved at the end of every epoch by default, or at fixed interval using the <code>save_period</code> argument, so you must complete at least 1 epoch to resume a training run.</p>"},{"location":"modes/train/#train-settings","title":"Train Settings","text":"<p>The training settings for YOLO models encompass various hyperparameters and configurations used during the training process. These settings influence the model's performance, speed, and accuracy. Key training settings include batch size, learning rate, momentum, and weight decay. Additionally, the choice of optimizer, loss function, and training dataset composition can impact the training process. Careful tuning and experimentation with these settings are crucial for optimizing performance.</p> Argument Default Description <code>model</code> <code>None</code> Specifies the model file for training. Accepts a path to either a <code>.pt</code> pretrained model or a <code>.yaml</code> configuration file. Essential for defining the model structure or initializing weights. <code>data</code> <code>None</code> Path to the dataset configuration file (e.g., <code>coco8.yaml</code>). This file contains dataset-specific parameters, including paths to training and validation data, class names, and number of classes. <code>epochs</code> <code>100</code> Total number of training epochs. Each epoch represents a full pass over the entire dataset. Adjusting this value can affect training duration and model performance. <code>time</code> <code>None</code> Maximum training time in hours. If set, this overrides the <code>epochs</code> argument, allowing training to automatically stop after the specified duration. Useful for time-constrained training scenarios. <code>patience</code> <code>100</code> Number of epochs to wait without improvement in validation metrics before early stopping the training. Helps prevent overfitting by stopping training when performance plateaus. <code>batch</code> <code>16</code> Batch size, with three modes: set as an integer (e.g., <code>batch=16</code>), auto mode for 60% GPU memory utilization (<code>batch=-1</code>), or auto mode with specified utilization fraction (<code>batch=0.70</code>). <code>imgsz</code> <code>640</code> Target image size for training. All images are resized to this dimension before being fed into the model. Affects model accuracy and computational complexity. <code>save</code> <code>True</code> Enables saving of training checkpoints and final model weights. Useful for resuming training or model deployment. <code>save_period</code> <code>-1</code> Frequency of saving model checkpoints, specified in epochs. A value of -1 disables this feature. Useful for saving interim models during long training sessions. <code>cache</code> <code>False</code> Enables caching of dataset images in memory (<code>True</code>/<code>ram</code>), on disk (<code>disk</code>), or disables it (<code>False</code>). Improves training speed by reducing disk I/O at the cost of increased memory usage. <code>device</code> <code>None</code> Specifies the computational device(s) for training: a single GPU (<code>device=0</code>), multiple GPUs (<code>device=0,1</code>), CPU (<code>device=cpu</code>), or MPS for Apple silicon (<code>device=mps</code>). <code>workers</code> <code>8</code> Number of worker threads for data loading (per <code>RANK</code> if Multi-GPU training). Influences the speed of data preprocessing and feeding into the model, especially useful in multi-GPU setups. <code>project</code> <code>None</code> Name of the project directory where training outputs are saved. Allows for organized storage of different experiments. <code>name</code> <code>None</code> Name of the training run. Used for creating a subdirectory within the project folder, where training logs and outputs are stored. <code>exist_ok</code> <code>False</code> If True, allows overwriting of an existing project/name directory. Useful for iterative experimentation without needing to manually clear previous outputs. <code>pretrained</code> <code>True</code> Determines whether to start training from a pretrained model. Can be a boolean value or a string path to a specific model from which to load weights. Enhances training efficiency and model performance. <code>optimizer</code> <code>'auto'</code> Choice of optimizer for training. Options include <code>SGD</code>, <code>Adam</code>, <code>AdamW</code>, <code>NAdam</code>, <code>RAdam</code>, <code>RMSProp</code> etc., or <code>auto</code> for automatic selection based on model configuration. Affects convergence speed and stability. <code>verbose</code> <code>False</code> Enables verbose output during training, providing detailed logs and progress updates. Useful for debugging and closely monitoring the training process. <code>seed</code> <code>0</code> Sets the random seed for training, ensuring reproducibility of results across runs with the same configurations. <code>deterministic</code> <code>True</code> Forces deterministic algorithm use, ensuring reproducibility but may affect performance and speed due to the restriction on non-deterministic algorithms. <code>single_cls</code> <code>False</code> Treats all classes in multi-class datasets as a single class during training. Useful for binary classification tasks or when focusing on object presence rather than classification. <code>rect</code> <code>False</code> Enables rectangular training, optimizing batch composition for minimal padding. Can improve efficiency and speed but may affect model accuracy. <code>cos_lr</code> <code>False</code> Utilizes a cosine learning rate scheduler, adjusting the learning rate following a cosine curve over epochs. Helps in managing learning rate for better convergence. <code>close_mosaic</code> <code>10</code> Disables mosaic data augmentation in the last N epochs to stabilize training before completion. Setting to 0 disables this feature. <code>resume</code> <code>False</code> Resumes training from the last saved checkpoint. Automatically loads model weights, optimizer state, and epoch count, continuing training seamlessly. <code>amp</code> <code>True</code> Enables Automatic Mixed Precision (AMP) training, reducing memory usage and possibly speeding up training with minimal impact on accuracy. <code>fraction</code> <code>1.0</code> Specifies the fraction of the dataset to use for training. Allows for training on a subset of the full dataset, useful for experiments or when resources are limited. <code>profile</code> <code>False</code> Enables profiling of ONNX and TensorRT speeds during training, useful for optimizing model deployment. <code>freeze</code> <code>None</code> Freezes the first N layers of the model or specified layers by index, reducing the number of trainable parameters. Useful for fine-tuning or transfer learning. <code>lr0</code> <code>0.01</code> Initial learning rate (i.e. <code>SGD=1E-2</code>, <code>Adam=1E-3</code>) . Adjusting this value is crucial for the optimization process, influencing how rapidly model weights are updated. <code>lrf</code> <code>0.01</code> Final learning rate as a fraction of the initial rate = (<code>lr0 * lrf</code>), used in conjunction with schedulers to adjust the learning rate over time. <code>momentum</code> <code>0.937</code> Momentum factor for SGD or beta1 for Adam optimizers, influencing the incorporation of past gradients in the current update. <code>weight_decay</code> <code>0.0005</code> L2 regularization term, penalizing large weights to prevent overfitting. <code>warmup_epochs</code> <code>3.0</code> Number of epochs for learning rate warmup, gradually increasing the learning rate from a low value to the initial learning rate to stabilize training early on. <code>warmup_momentum</code> <code>0.8</code> Initial momentum for warmup phase, gradually adjusting to the set momentum over the warmup period. <code>warmup_bias_lr</code> <code>0.1</code> Learning rate for bias parameters during the warmup phase, helping stabilize model training in the initial epochs. <code>box</code> <code>7.5</code> Weight of the box loss component in the loss function, influencing how much emphasis is placed on accurately predicting bounding box coordinates. <code>cls</code> <code>0.5</code> Weight of the classification loss in the total loss function, affecting the importance of correct class prediction relative to other components. <code>dfl</code> <code>1.5</code> Weight of the distribution focal loss, used in certain YOLO versions for fine-grained classification. <code>pose</code> <code>12.0</code> Weight of the pose loss in models trained for pose estimation, influencing the emphasis on accurately predicting pose keypoints. <code>kobj</code> <code>2.0</code> Weight of the keypoint objectness loss in pose estimation models, balancing detection confidence with pose accuracy. <code>label_smoothing</code> <code>0.0</code> Applies label smoothing, softening hard labels to a mix of the target label and a uniform distribution over labels, can improve generalization. <code>nbs</code> <code>64</code> Nominal batch size for normalization of loss. <code>overlap_mask</code> <code>True</code> Determines whether segmentation masks should overlap during training, applicable in instance segmentation tasks. <code>mask_ratio</code> <code>4</code> Downsample ratio for segmentation masks, affecting the resolution of masks used during training. <code>dropout</code> <code>0.0</code> Dropout rate for regularization in classification tasks, preventing overfitting by randomly omitting units during training. <code>val</code> <code>True</code> Enables validation during training, allowing for periodic evaluation of model performance on a separate dataset. <code>plots</code> <code>False</code> Generates and saves plots of training and validation metrics, as well as prediction examples, providing visual insights into model performance and learning progression. <p>Note on Batch-size Settings</p> <p>The <code>batch</code> argument can be configured in three ways:</p> <ul> <li>Fixed Batch Size: Set an integer value (e.g., <code>batch=16</code>), specifying the number of images per batch directly.</li> <li>Auto Mode (60% GPU Memory): Use <code>batch=-1</code> to automatically adjust batch size for approximately 60% CUDA memory utilization.</li> <li>Auto Mode with Utilization Fraction: Set a fraction value (e.g., <code>batch=0.70</code>) to adjust batch size based on the specified fraction of GPU memory usage.</li> </ul>"},{"location":"modes/train/#augmentation-settings-and-hyperparameters","title":"Augmentation Settings and Hyperparameters","text":"<p>Augmentation techniques are essential for improving the robustness and performance of YOLO models by introducing variability into the training data, helping the model generalize better to unseen data. The following table outlines the purpose and effect of each augmentation argument:</p> Argument Type Default Range Description <code>hsv_h</code> <code>float</code> <code>0.015</code> <code>0.0 - 1.0</code> Adjusts the hue of the image by a fraction of the color wheel, introducing color variability. Helps the model generalize across different lighting conditions. <code>hsv_s</code> <code>float</code> <code>0.7</code> <code>0.0 - 1.0</code> Alters the saturation of the image by a fraction, affecting the intensity of colors. Useful for simulating different environmental conditions. <code>hsv_v</code> <code>float</code> <code>0.4</code> <code>0.0 - 1.0</code> Modifies the value (brightness) of the image by a fraction, helping the model to perform well under various lighting conditions. <code>degrees</code> <code>float</code> <code>0.0</code> <code>-180 - +180</code> Rotates the image randomly within the specified degree range, improving the model's ability to recognize objects at various orientations. <code>translate</code> <code>float</code> <code>0.1</code> <code>0.0 - 1.0</code> Translates the image horizontally and vertically by a fraction of the image size, aiding in learning to detect partially visible objects. <code>scale</code> <code>float</code> <code>0.5</code> <code>&gt;=0.0</code> Scales the image by a gain factor, simulating objects at different distances from the camera. <code>shear</code> <code>float</code> <code>0.0</code> <code>-180 - +180</code> Shears the image by a specified degree, mimicking the effect of objects being viewed from different angles. <code>perspective</code> <code>float</code> <code>0.0</code> <code>0.0 - 0.001</code> Applies a random perspective transformation to the image, enhancing the model's ability to understand objects in 3D space. <code>flipud</code> <code>float</code> <code>0.0</code> <code>0.0 - 1.0</code> Flips the image upside down with the specified probability, increasing the data variability without affecting the object's characteristics. <code>fliplr</code> <code>float</code> <code>0.5</code> <code>0.0 - 1.0</code> Flips the image left to right with the specified probability, useful for learning symmetrical objects and increasing dataset diversity. <code>bgr</code> <code>float</code> <code>0.0</code> <code>0.0 - 1.0</code> Flips the image channels from RGB to BGR with the specified probability, useful for increasing robustness to incorrect channel ordering. <code>mosaic</code> <code>float</code> <code>1.0</code> <code>0.0 - 1.0</code> Combines four training images into one, simulating different scene compositions and object interactions. Highly effective for complex scene understanding. <code>mixup</code> <code>float</code> <code>0.0</code> <code>0.0 - 1.0</code> Blends two images and their labels, creating a composite image. Enhances the model's ability to generalize by introducing label noise and visual variability. <code>copy_paste</code> <code>float</code> <code>0.0</code> <code>0.0 - 1.0</code> Copies objects from one image and pastes them onto another, useful for increasing object instances and learning object occlusion. <code>auto_augment</code> <code>str</code> <code>randaugment</code> - Automatically applies a predefined augmentation policy (<code>randaugment</code>, <code>autoaugment</code>, <code>augmix</code>), optimizing for classification tasks by diversifying the visual features. <code>erasing</code> <code>float</code> <code>0.4</code> <code>0.0 - 0.9</code> Randomly erases a portion of the image during classification training, encouraging the model to focus on less obvious features for recognition. <code>crop_fraction</code> <code>float</code> <code>1.0</code> <code>0.1 - 1.0</code> Crops the classification image to a fraction of its size to emphasize central features and adapt to object scales, reducing background distractions. <p>These settings can be adjusted to meet the specific requirements of the dataset and task at hand. Experimenting with different values can help find the optimal augmentation strategy that leads to the best model performance.</p> <p>Info</p> <p>For more information about training augmentation operations, see the reference section.</p>"},{"location":"modes/train/#logging","title":"Logging","text":"<p>In training a YOLOv8 model, you might find it valuable to keep track of the model's performance over time. This is where logging comes into play. Ultralytics' YOLO provides support for three types of loggers - Comet, ClearML, and TensorBoard.</p> <p>To use a logger, select it from the dropdown menu in the code snippet above and run it. The chosen logger will be installed and initialized.</p>"},{"location":"modes/train/#comet","title":"Comet","text":"<p>Comet is a platform that allows data scientists and developers to track, compare, explain and optimize experiments and models. It provides functionalities such as real-time metrics, code diffs, and hyperparameters tracking.</p> <p>To use Comet:</p> <p>Example</p> Python <pre><code># pip install comet_ml\nimport comet_ml\n\ncomet_ml.init()\n</code></pre> <p>Remember to sign in to your Comet account on their website and get your API key. You will need to add this to your environment variables or your script to log your experiments.</p>"},{"location":"modes/train/#clearml","title":"ClearML","text":"<p>ClearML is an open-source platform that automates tracking of experiments and helps with efficient sharing of resources. It is designed to help teams manage, execute, and reproduce their ML work more efficiently.</p> <p>To use ClearML:</p> <p>Example</p> Python <pre><code># pip install clearml\nimport clearml\n\nclearml.browser_login()\n</code></pre> <p>After running this script, you will need to sign in to your ClearML account on the browser and authenticate your session.</p>"},{"location":"modes/train/#tensorboard","title":"TensorBoard","text":"<p>TensorBoard is a visualization toolkit for TensorFlow. It allows you to visualize your TensorFlow graph, plot quantitative metrics about the execution of your graph, and show additional data like images that pass through it.</p> <p>To use TensorBoard in Google Colab:</p> <p>Example</p> CLI <pre><code>load_ext tensorboard\ntensorboard --logdir ultralytics/runs  # replace with 'runs' directory\n</code></pre> <p>To use TensorBoard locally run the below command and view results at http://localhost:6006/.</p> <p>Example</p> CLI <pre><code>tensorboard --logdir ultralytics/runs  # replace with 'runs' directory\n</code></pre> <p>This will load TensorBoard and direct it to the directory where your training logs are saved.</p> <p>After setting up your logger, you can then proceed with your model training. All training metrics will be automatically logged in your chosen platform, and you can access these logs to monitor your model's performance over time, compare different models, and identify areas for improvement.</p>"},{"location":"modes/train/#faq","title":"FAQ","text":""},{"location":"modes/train/#how-do-i-train-an-object-detection-model-using-ultralytics-yolov8","title":"How do I train an object detection model using Ultralytics YOLOv8?","text":"<p>To train an object detection model using Ultralytics YOLOv8, you can either use the Python API or the CLI. Below is an example for both:</p> <p>Single-GPU and CPU Training Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load a pretrained model (recommended for training)\n\n# Train the model\nresults = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code>yolo detect train data=coco8.yaml model=yolov8n.pt epochs=100 imgsz=640\n</code></pre> <p>For more details, refer to the Train Settings section.</p>"},{"location":"modes/train/#what-are-the-key-features-of-ultralytics-yolov8s-train-mode","title":"What are the key features of Ultralytics YOLOv8's Train mode?","text":"<p>The key features of Ultralytics YOLOv8's Train mode include:</p> <ul> <li>Automatic Dataset Download: Automatically downloads standard datasets like COCO, VOC, and ImageNet.</li> <li>Multi-GPU Support: Scale training across multiple GPUs for faster processing.</li> <li>Hyperparameter Configuration: Customize hyperparameters through YAML files or CLI arguments.</li> <li>Visualization and Monitoring: Real-time tracking of training metrics for better insights.</li> </ul> <p>These features make training efficient and customizable to your needs. For more details, see the Key Features of Train Mode section.</p>"},{"location":"modes/train/#how-do-i-resume-training-from-an-interrupted-session-in-ultralytics-yolov8","title":"How do I resume training from an interrupted session in Ultralytics YOLOv8?","text":"<p>To resume training from an interrupted session, set the <code>resume</code> argument to <code>True</code> and specify the path to the last saved checkpoint.</p> <p>Resume Training Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load the partially trained model\nmodel = YOLO(\"path/to/last.pt\")\n\n# Resume training\nresults = model.train(resume=True)\n</code></pre> <pre><code>yolo train resume model=path/to/last.pt\n</code></pre> <p>Check the section on Resuming Interrupted Trainings for more information.</p>"},{"location":"modes/train/#can-i-train-yolov8-models-on-apple-m1-and-m2-chips","title":"Can I train YOLOv8 models on Apple M1 and M2 chips?","text":"<p>Yes, Ultralytics YOLOv8 supports training on Apple M1 and M2 chips utilizing the Metal Performance Shaders (MPS) framework. Specify 'mps' as your training device.</p> <p>MPS Training Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a pretrained model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Train the model on M1/M2 chip\nresults = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640, device=\"mps\")\n</code></pre> <pre><code>yolo detect train data=coco8.yaml model=yolov8n.pt epochs=100 imgsz=640 device=mps\n</code></pre> <p>For more details, refer to the Apple M1 and M2 MPS Training section.</p>"},{"location":"modes/train/#what-are-the-common-training-settings-and-how-do-i-configure-them","title":"What are the common training settings, and how do I configure them?","text":"<p>Ultralytics YOLOv8 allows you to configure a variety of training settings such as batch size, learning rate, epochs, and more through arguments. Here's a brief overview:</p> Argument Default Description <code>model</code> <code>None</code> Path to the model file for training. <code>data</code> <code>None</code> Path to the dataset configuration file (e.g., <code>coco8.yaml</code>). <code>epochs</code> <code>100</code> Total number of training epochs. <code>batch</code> <code>16</code> Batch size, adjustable as integer or auto mode. <code>imgsz</code> <code>640</code> Target image size for training. <code>device</code> <code>None</code> Computational device(s) for training like <code>cpu</code>, <code>0</code>, <code>0,1</code>, or <code>mps</code>. <code>save</code> <code>True</code> Enables saving of training checkpoints and final model weights. <p>For an in-depth guide on training settings, check the Train Settings section.</p>"},{"location":"modes/val/","title":"Model Validation with Ultralytics YOLO","text":""},{"location":"modes/val/#introduction","title":"Introduction","text":"<p>Validation is a critical step in the machine learning pipeline, allowing you to assess the quality of your trained models. Val mode in Ultralytics YOLOv8 provides a robust suite of tools and metrics for evaluating the performance of your object detection models. This guide serves as a complete resource for understanding how to effectively use the Val mode to ensure that your models are both accurate and reliable.</p> <p> Watch: Ultralytics Modes Tutorial: Validation </p>"},{"location":"modes/val/#why-validate-with-ultralytics-yolo","title":"Why Validate with Ultralytics YOLO?","text":"<p>Here's why using YOLOv8's Val mode is advantageous:</p> <ul> <li>Precision: Get accurate metrics like mAP50, mAP75, and mAP50-95 to comprehensively evaluate your model.</li> <li>Convenience: Utilize built-in features that remember training settings, simplifying the validation process.</li> <li>Flexibility: Validate your model with the same or different datasets and image sizes.</li> <li>Hyperparameter Tuning: Use validation metrics to fine-tune your model for better performance.</li> </ul>"},{"location":"modes/val/#key-features-of-val-mode","title":"Key Features of Val Mode","text":"<p>These are the notable functionalities offered by YOLOv8's Val mode:</p> <ul> <li>Automated Settings: Models remember their training configurations for straightforward validation.</li> <li>Multi-Metric Support: Evaluate your model based on a range of accuracy metrics.</li> <li>CLI and Python API: Choose from command-line interface or Python API based on your preference for validation.</li> <li>Data Compatibility: Works seamlessly with datasets used during the training phase as well as custom datasets.</li> </ul> <p>Tip</p> <ul> <li>YOLOv8 models automatically remember their training settings, so you can validate a model at the same image size and on the original dataset easily with just <code>yolo val model=yolov8n.pt</code> or <code>model('yolov8n.pt').val()</code></li> </ul>"},{"location":"modes/val/#usage-examples","title":"Usage Examples","text":"<p>Validate trained YOLOv8n model accuracy on the COCO8 dataset. No argument need to passed as the <code>model</code> retains its training <code>data</code> and arguments as model attributes. See Arguments section below for a full list of export arguments.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, dataset and settings remembered\nmetrics.box.map  # map50-95\nmetrics.box.map50  # map50\nmetrics.box.map75  # map75\nmetrics.box.maps  # a list contains map50-95 of each category\n</code></pre> <pre><code>yolo detect val model=yolov8n.pt  # val official model\nyolo detect val model=path/to/best.pt  # val custom model\n</code></pre>"},{"location":"modes/val/#arguments-for-yolo-model-validation","title":"Arguments for YOLO Model Validation","text":"<p>When validating YOLO models, several arguments can be fine-tuned to optimize the evaluation process. These arguments control aspects such as input image size, batch processing, and performance thresholds. Below is a detailed breakdown of each argument to help you customize your validation settings effectively.</p> Argument Type Default Description <code>data</code> <code>str</code> <code>None</code> Specifies the path to the dataset configuration file (e.g., <code>coco8.yaml</code>). This file includes paths to validation data, class names, and number of classes. <code>imgsz</code> <code>int</code> <code>640</code> Defines the size of input images. All images are resized to this dimension before processing. <code>batch</code> <code>int</code> <code>16</code> Sets the number of images per batch. Use <code>-1</code> for AutoBatch, which automatically adjusts based on GPU memory availability. <code>save_json</code> <code>bool</code> <code>False</code> If <code>True</code>, saves the results to a JSON file for further analysis or integration with other tools. <code>save_hybrid</code> <code>bool</code> <code>False</code> If <code>True</code>, saves a hybrid version of labels that combines original annotations with additional model predictions. <code>conf</code> <code>float</code> <code>0.001</code> Sets the minimum confidence threshold for detections. Detections with confidence below this threshold are discarded. <code>iou</code> <code>float</code> <code>0.6</code> Sets the Intersection Over Union (IoU) threshold for Non-Maximum Suppression (NMS). Helps in reducing duplicate detections. <code>max_det</code> <code>int</code> <code>300</code> Limits the maximum number of detections per image. Useful in dense scenes to prevent excessive detections. <code>half</code> <code>bool</code> <code>True</code> Enables half-precision (FP16) computation, reducing memory usage and potentially increasing speed with minimal impact on accuracy. <code>device</code> <code>str</code> <code>None</code> Specifies the device for validation (<code>cpu</code>, <code>cuda:0</code>, etc.). Allows flexibility in utilizing CPU or GPU resources. <code>dnn</code> <code>bool</code> <code>False</code> If <code>True</code>, uses the OpenCV DNN module for ONNX model inference, offering an alternative to PyTorch inference methods. <code>plots</code> <code>bool</code> <code>False</code> When set to <code>True</code>, generates and saves plots of predictions versus ground truth for visual evaluation of the model's performance. <code>rect</code> <code>bool</code> <code>False</code> If <code>True</code>, uses rectangular inference for batching, reducing padding and potentially increasing speed and efficiency. <code>split</code> <code>str</code> <code>val</code> Determines the dataset split to use for validation (<code>val</code>, <code>test</code>, or <code>train</code>). Allows flexibility in choosing the data segment for performance evaluation. <p>Each of these settings plays a vital role in the validation process, allowing for a customizable and efficient evaluation of YOLO models. Adjusting these parameters according to your specific needs and resources can help achieve the best balance between accuracy and performance.</p>"},{"location":"modes/val/#example-validation-with-arguments","title":"Example Validation with Arguments","text":"<p>The below examples showcase YOLO model validation with custom arguments in Python and CLI.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Customize validation settings\nvalidation_results = model.val(data=\"coco8.yaml\", imgsz=640, batch=16, conf=0.25, iou=0.6, device=\"0\")\n</code></pre> <pre><code>yolo val model=yolov8n.pt data=coco8.yaml imgsz=640 batch=16 conf=0.25 iou=0.6 device=0\n</code></pre>"},{"location":"modes/val/#faq","title":"FAQ","text":""},{"location":"modes/val/#how-do-i-validate-my-yolov8-model-with-ultralytics","title":"How do I validate my YOLOv8 model with Ultralytics?","text":"<p>To validate your YOLOv8 model, you can use the Val mode provided by Ultralytics. For example, using the Python API, you can load a model and run validation with:</p> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Validate the model\nmetrics = model.val()\nprint(metrics.box.map)  # map50-95\n</code></pre> <p>Alternatively, you can use the command-line interface (CLI):</p> <pre><code>yolo val model=yolov8n.pt\n</code></pre> <p>For further customization, you can adjust various arguments like <code>imgsz</code>, <code>batch</code>, and <code>conf</code> in both Python and CLI modes. Check the Arguments for YOLO Model Validation section for the full list of parameters.</p>"},{"location":"modes/val/#what-metrics-can-i-get-from-yolov8-model-validation","title":"What metrics can I get from YOLOv8 model validation?","text":"<p>YOLOv8 model validation provides several key metrics to assess model performance. These include:</p> <ul> <li>mAP50 (mean Average Precision at IoU threshold 0.5)</li> <li>mAP75 (mean Average Precision at IoU threshold 0.75)</li> <li>mAP50-95 (mean Average Precision across multiple IoU thresholds from 0.5 to 0.95)</li> </ul> <p>Using the Python API, you can access these metrics as follows:</p> <pre><code>metrics = model.val()  # assumes `model` has been loaded\nprint(metrics.box.map)  # mAP50-95\nprint(metrics.box.map50)  # mAP50\nprint(metrics.box.map75)  # mAP75\nprint(metrics.box.maps)  # list of mAP50-95 for each category\n</code></pre> <p>For a complete performance evaluation, it's crucial to review all these metrics. For more details, refer to the Key Features of Val Mode.</p>"},{"location":"modes/val/#what-are-the-advantages-of-using-ultralytics-yolo-for-validation","title":"What are the advantages of using Ultralytics YOLO for validation?","text":"<p>Using Ultralytics YOLO for validation provides several advantages:</p> <ul> <li>Precision: YOLOv8 offers accurate performance metrics including mAP50, mAP75, and mAP50-95.</li> <li>Convenience: The models remember their training settings, making validation straightforward.</li> <li>Flexibility: You can validate against the same or different datasets and image sizes.</li> <li>Hyperparameter Tuning: Validation metrics help in fine-tuning models for better performance.</li> </ul> <p>These benefits ensure that your models are evaluated thoroughly and can be optimized for superior results. Learn more about these advantages in the Why Validate with Ultralytics YOLO section.</p>"},{"location":"modes/val/#can-i-validate-my-yolov8-model-using-a-custom-dataset","title":"Can I validate my YOLOv8 model using a custom dataset?","text":"<p>Yes, you can validate your YOLOv8 model using a custom dataset. Specify the <code>data</code> argument with the path to your dataset configuration file. This file should include paths to the validation data, class names, and other relevant details.</p> <p>Example in Python:</p> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Validate with a custom dataset\nmetrics = model.val(data=\"path/to/your/custom_dataset.yaml\")\nprint(metrics.box.map)  # map50-95\n</code></pre> <p>Example using CLI:</p> <pre><code>yolo val model=yolov8n.pt data=path/to/your/custom_dataset.yaml\n</code></pre> <p>For more customizable options during validation, see the Example Validation with Arguments section.</p>"},{"location":"modes/val/#how-do-i-save-validation-results-to-a-json-file-in-yolov8","title":"How do I save validation results to a JSON file in YOLOv8?","text":"<p>To save the validation results to a JSON file, you can set the <code>save_json</code> argument to <code>True</code> when running validation. This can be done in both the Python API and CLI.</p> <p>Example in Python:</p> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Save validation results to JSON\nmetrics = model.val(save_json=True)\n</code></pre> <p>Example using CLI:</p> <pre><code>yolo val model=yolov8n.pt save_json=True\n</code></pre> <p>This functionality is particularly useful for further analysis or integration with other tools. Check the Arguments for YOLO Model Validation for more details.</p>"},{"location":"tasks/","title":"Ultralytics YOLOv8 Tasks","text":"<p>YOLOv8 is an AI framework that supports multiple computer vision tasks. The framework can be used to perform detection, segmentation, obb, classification, and pose estimation. Each of these tasks has a different objective and use case.</p> <p> Watch: Explore Ultralytics YOLO Tasks: Object Detection, Segmentation, OBB, Tracking, and Pose Estimation. </p>"},{"location":"tasks/#detection","title":"Detection","text":"<p>Detection is the primary task supported by YOLOv8. It involves detecting objects in an image or video frame and drawing bounding boxes around them. The detected objects are classified into different categories based on their features. YOLOv8 can detect multiple objects in a single image or video frame with high accuracy and speed.</p> <p>Detection Examples</p>"},{"location":"tasks/#segmentation","title":"Segmentation","text":"<p>Segmentation is a task that involves segmenting an image into different regions based on the content of the image. Each region is assigned a label based on its content. This task is useful in applications such as image segmentation and medical imaging. YOLOv8 uses a variant of the U-Net architecture to perform segmentation.</p> <p>Segmentation Examples</p>"},{"location":"tasks/#classification","title":"Classification","text":"<p>Classification is a task that involves classifying an image into different categories. YOLOv8 can be used to classify images based on their content. It uses a variant of the EfficientNet architecture to perform classification.</p> <p>Classification Examples</p>"},{"location":"tasks/#pose","title":"Pose","text":"<p>Pose/keypoint detection is a task that involves detecting specific points in an image or video frame. These points are referred to as keypoints and are used to track movement or pose estimation. YOLOv8 can detect keypoints in an image or video frame with high accuracy and speed.</p> <p>Pose Examples</p>"},{"location":"tasks/#obb","title":"OBB","text":"<p>Oriented object detection goes a step further than regular object detection with introducing an extra angle to locate objects more accurate in an image. YOLOv8 can detect rotated objects in an image or video frame with high accuracy and speed.</p> <p>Oriented Detection</p>"},{"location":"tasks/#conclusion","title":"Conclusion","text":"<p>YOLOv8 supports multiple tasks, including detection, segmentation, classification, oriented object detection and keypoints detection. Each of these tasks has different objectives and use cases. By understanding the differences between these tasks, you can choose the appropriate task for your computer vision application.</p>"},{"location":"tasks/#faq","title":"FAQ","text":""},{"location":"tasks/#what-tasks-can-ultralytics-yolov8-perform","title":"What tasks can Ultralytics YOLOv8 perform?","text":"<p>Ultralytics YOLOv8 is a versatile AI framework capable of performing various computer vision tasks with high accuracy and speed. These tasks include:</p> <ul> <li>Detection: Identifying and localizing objects in images or video frames by drawing bounding boxes around them.</li> <li>Segmentation: Segmenting images into different regions based on their content, useful for applications like medical imaging.</li> <li>Classification: Categorizing entire images based on their content, leveraging variants of the EfficientNet architecture.</li> <li>Pose estimation: Detecting specific keypoints in an image or video frame to track movements or poses.</li> <li>Oriented Object Detection (OBB): Detecting rotated objects with an added orientation angle for enhanced accuracy.</li> </ul>"},{"location":"tasks/#how-do-i-use-ultralytics-yolov8-for-object-detection","title":"How do I use Ultralytics YOLOv8 for object detection?","text":"<p>To use Ultralytics YOLOv8 for object detection, follow these steps:</p> <ol> <li>Prepare your dataset in the appropriate format.</li> <li>Train the YOLOv8 model using the detection task.</li> <li>Use the model to make predictions by feeding in new images or video frames.</li> </ol> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\nmodel = YOLO(\"yolov8n.pt\")  # Load pre-trained model\nresults = model.predict(source=\"image.jpg\")  # Perform object detection\nresults[0].show()\n</code></pre> <pre><code>yolo detect model=yolov8n.pt source='image.jpg'\n</code></pre> <p>For more detailed instructions, check out our detection examples.</p>"},{"location":"tasks/#what-are-the-benefits-of-using-yolov8-for-segmentation-tasks","title":"What are the benefits of using YOLOv8 for segmentation tasks?","text":"<p>Using YOLOv8 for segmentation tasks provides several advantages:</p> <ol> <li>High Accuracy: The segmentation task leverages a variant of the U-Net architecture to achieve precise segmentation.</li> <li>Speed: YOLOv8 is optimized for real-time applications, offering quick processing even for high-resolution images.</li> <li>Multiple Applications: It is ideal for medical imaging, autonomous driving, and other applications requiring detailed image segmentation.</li> </ol> <p>Learn more about the benefits and use cases of YOLOv8 for segmentation in the segmentation section.</p>"},{"location":"tasks/#can-ultralytics-yolov8-handle-pose-estimation-and-keypoint-detection","title":"Can Ultralytics YOLOv8 handle pose estimation and keypoint detection?","text":"<p>Yes, Ultralytics YOLOv8 can effectively perform pose estimation and keypoint detection with high accuracy and speed. This feature is particularly useful for tracking movements in sports analytics, healthcare, and human-computer interaction applications. YOLOv8 detects keypoints in an image or video frame, allowing for precise pose estimation.</p> <p>For more details and implementation tips, visit our pose estimation examples.</p>"},{"location":"tasks/#why-should-i-choose-ultralytics-yolov8-for-oriented-object-detection-obb","title":"Why should I choose Ultralytics YOLOv8 for oriented object detection (OBB)?","text":"<p>Oriented Object Detection (OBB) with YOLOv8 provides enhanced precision by detecting objects with an additional angle parameter. This feature is beneficial for applications requiring accurate localization of rotated objects, such as aerial imagery analysis and warehouse automation.</p> <ul> <li>Increased Precision: The angle component reduces false positives for rotated objects.</li> <li>Versatile Applications: Useful for tasks in geospatial analysis, robotics, etc.</li> </ul> <p>Check out the Oriented Object Detection section for more details and examples.</p>"},{"location":"tasks/classify/","title":"Image Classification","text":"<p>Image classification is the simplest of the three tasks and involves classifying an entire image into one of a set of predefined classes.</p> <p>The output of an image classifier is a single class label and a confidence score. Image classification is useful when you need to know only what class an image belongs to and don't need to know where objects of that class are located or what their exact shape is.</p> <p> Watch: Explore Ultralytics YOLO Tasks: Image Classification using Ultralytics HUB </p> <p>Tip</p> <p>YOLOv8 Classify models use the <code>-cls</code> suffix, i.e. <code>yolov8n-cls.pt</code> and are pretrained on ImageNet.</p>"},{"location":"tasks/classify/#models","title":"Models","text":"<p>YOLOv8 pretrained Classify models are shown here. Detect, Segment and Pose models are pretrained on the COCO dataset, while Classify models are pretrained on the ImageNet dataset.</p> <p>Models download automatically from the latest Ultralytics release on first use.</p> Model size<sup>(pixels) acc<sup>top1 acc<sup>top5 Speed<sup>CPU ONNX(ms) Speed<sup>A100 TensorRT(ms) params<sup>(M) FLOPs<sup>(B) at 640 YOLOv8n-cls 224 69.0 88.3 12.9 0.31 2.7 4.3 YOLOv8s-cls 224 73.8 91.7 23.4 0.35 6.4 13.5 YOLOv8m-cls 224 76.8 93.5 85.4 0.62 17.0 42.7 YOLOv8l-cls 224 76.8 93.5 163.0 0.87 37.5 99.7 YOLOv8x-cls 224 79.0 94.6 232.0 1.01 57.4 154.8 <ul> <li>acc values are model accuracies on the ImageNet dataset validation set. Reproduce by <code>yolo val classify data=path/to/ImageNet device=0</code></li> <li>Speed averaged over ImageNet val images using an Amazon EC2 P4d instance. Reproduce by <code>yolo val classify data=path/to/ImageNet batch=1 device=0|cpu</code></li> </ul>"},{"location":"tasks/classify/#train","title":"Train","text":"<p>Train YOLOv8n-cls on the MNIST160 dataset for 100 epochs at image size 64. For a full list of available arguments see the Configuration page.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n-cls.pt\")  # load a pretrained model (recommended for training)\nmodel = YOLO(\"yolov8n-cls.yaml\").load(\"yolov8n-cls.pt\")  # build from YAML and transfer weights\n\n# Train the model\nresults = model.train(data=\"mnist160\", epochs=100, imgsz=64)\n</code></pre> <pre><code># Build a new model from YAML and start training from scratch\nyolo classify train data=mnist160 model=yolov8n-cls.yaml epochs=100 imgsz=64\n\n# Start training from a pretrained *.pt model\nyolo classify train data=mnist160 model=yolov8n-cls.pt epochs=100 imgsz=64\n\n# Build a new model from YAML, transfer pretrained weights to it and start training\nyolo classify train data=mnist160 model=yolov8n-cls.yaml pretrained=yolov8n-cls.pt epochs=100 imgsz=64\n</code></pre>"},{"location":"tasks/classify/#dataset-format","title":"Dataset format","text":"<p>YOLO classification dataset format can be found in detail in the Dataset Guide.</p>"},{"location":"tasks/classify/#val","title":"Val","text":"<p>Validate trained YOLOv8n-cls model accuracy on the MNIST160 dataset. No argument need to passed as the <code>model</code> retains its training <code>data</code> and arguments as model attributes.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, dataset and settings remembered\nmetrics.top1  # top1 accuracy\nmetrics.top5  # top5 accuracy\n</code></pre> <pre><code>yolo classify val model=yolov8n-cls.pt  # val official model\nyolo classify val model=path/to/best.pt  # val custom model\n</code></pre>"},{"location":"tasks/classify/#predict","title":"Predict","text":"<p>Use a trained YOLOv8n-cls model to run predictions on images.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Predict with the model\nresults = model(\"https://ultralytics.com/images/bus.jpg\")  # predict on an image\n</code></pre> <pre><code>yolo classify predict model=yolov8n-cls.pt source='https://ultralytics.com/images/bus.jpg'  # predict with official model\nyolo classify predict model=path/to/best.pt source='https://ultralytics.com/images/bus.jpg'  # predict with custom model\n</code></pre> <p>See full <code>predict</code> mode details in the Predict page.</p>"},{"location":"tasks/classify/#export","title":"Export","text":"<p>Export a YOLOv8n-cls model to a different format like ONNX, CoreML, etc.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-cls.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre> <p>Available YOLOv8-cls export formats are in the table below. You can export to any format using the <code>format</code> argument, i.e. <code>format='onnx'</code> or <code>format='engine'</code>. You can predict or validate directly on exported models, i.e. <code>yolo predict model=yolov8n-cls.onnx</code>. Usage examples are shown for your model after export completes.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n-cls.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n-cls.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n-cls.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n-cls_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n-cls.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n-cls.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n-cls_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n-cls.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n-cls.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n-cls_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n-cls_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n-cls_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n-cls_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code> <p>See full <code>export</code> details in the Export page.</p>"},{"location":"tasks/classify/#faq","title":"FAQ","text":""},{"location":"tasks/classify/#what-is-the-purpose-of-yolov8-in-image-classification","title":"What is the purpose of YOLOv8 in image classification?","text":"<p>YOLOv8 models, such as <code>yolov8n-cls.pt</code>, are designed for efficient image classification. They assign a single class label to an entire image along with a confidence score. This is particularly useful for applications where knowing the specific class of an image is sufficient, rather than identifying the location or shape of objects within the image.</p>"},{"location":"tasks/classify/#how-do-i-train-a-yolov8-model-for-image-classification","title":"How do I train a YOLOv8 model for image classification?","text":"<p>To train a YOLOv8 model, you can use either Python or CLI commands. For example, to train a <code>yolov8n-cls</code> model on the MNIST160 dataset for 100 epochs at an image size of 64:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.pt\")  # load a pretrained model (recommended for training)\n\n# Train the model\nresults = model.train(data=\"mnist160\", epochs=100, imgsz=64)\n</code></pre> <pre><code>yolo classify train data=mnist160 model=yolov8n-cls.pt epochs=100 imgsz=64\n</code></pre> <p>For more configuration options, visit the Configuration page.</p>"},{"location":"tasks/classify/#where-can-i-find-pretrained-yolov8-classification-models","title":"Where can I find pretrained YOLOv8 classification models?","text":"<p>Pretrained YOLOv8 classification models can be found in the Models section. Models like <code>yolov8n-cls.pt</code>, <code>yolov8s-cls.pt</code>, <code>yolov8m-cls.pt</code>, etc., are pretrained on the ImageNet dataset and can be easily downloaded and used for various image classification tasks.</p>"},{"location":"tasks/classify/#how-can-i-export-a-trained-yolov8-model-to-different-formats","title":"How can I export a trained YOLOv8 model to different formats?","text":"<p>You can export a trained YOLOv8 model to various formats using Python or CLI commands. For instance, to export a model to ONNX format:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.pt\")  # load the trained model\n\n# Export the model to ONNX\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-cls.pt format=onnx  # export the trained model to ONNX format\n</code></pre> <p>For detailed export options, refer to the Export page.</p>"},{"location":"tasks/classify/#how-do-i-validate-a-trained-yolov8-classification-model","title":"How do I validate a trained YOLOv8 classification model?","text":"<p>To validate a trained model's accuracy on a dataset like MNIST160, you can use the following Python or CLI commands:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-cls.pt\")  # load the trained model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, uses the dataset and settings from training\nmetrics.top1  # top1 accuracy\nmetrics.top5  # top5 accuracy\n</code></pre> <pre><code>yolo classify val model=yolov8n-cls.pt  # validate the trained model\n</code></pre> <p>For more information, visit the Validate section.</p>"},{"location":"tasks/detect/","title":"Object Detection","text":"<p>Object detection is a task that involves identifying the location and class of objects in an image or video stream.</p> <p>The output of an object detector is a set of bounding boxes that enclose the objects in the image, along with class labels and confidence scores for each box. Object detection is a good choice when you need to identify objects of interest in a scene, but don't need to know exactly where the object is or its exact shape.</p> <p> Watch: Object Detection with Pre-trained Ultralytics YOLOv8 Model. </p> <p>Tip</p> <p>YOLOv8 Detect models are the default YOLOv8 models, i.e. <code>yolov8n.pt</code> and are pretrained on COCO.</p>"},{"location":"tasks/detect/#models","title":"Models","text":"<p>YOLOv8 pretrained Detect models are shown here. Detect, Segment and Pose models are pretrained on the COCO dataset, while Classify models are pretrained on the ImageNet dataset.</p> <p>Models download automatically from the latest Ultralytics release on first use.</p> Model size<sup>(pixels) mAP<sup>val50-95 Speed<sup>CPU ONNX(ms) Speed<sup>A100 TensorRT(ms) params<sup>(M) FLOPs<sup>(B) YOLOv8n 640 37.3 80.4 0.99 3.2 8.7 YOLOv8s 640 44.9 128.4 1.20 11.2 28.6 YOLOv8m 640 50.2 234.7 1.83 25.9 78.9 YOLOv8l 640 52.9 375.2 2.39 43.7 165.2 YOLOv8x 640 53.9 479.1 3.53 68.2 257.8 <ul> <li>mAP<sup>val</sup> values are for single-model single-scale on COCO val2017 dataset. Reproduce by <code>yolo val detect data=coco.yaml device=0</code></li> <li>Speed averaged over COCO val images using an Amazon EC2 P4d instance. Reproduce by <code>yolo val detect data=coco8.yaml batch=1 device=0|cpu</code></li> </ul>"},{"location":"tasks/detect/#train","title":"Train","text":"<p>Train YOLOv8n on the COCO8 dataset for 100 epochs at image size 640. For a full list of available arguments see the Configuration page.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n.pt\")  # load a pretrained model (recommended for training)\nmodel = YOLO(\"yolov8n.yaml\").load(\"yolov8n.pt\")  # build from YAML and transfer weights\n\n# Train the model\nresults = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code># Build a new model from YAML and start training from scratch\nyolo detect train data=coco8.yaml model=yolov8n.yaml epochs=100 imgsz=640\n\n# Start training from a pretrained *.pt model\nyolo detect train data=coco8.yaml model=yolov8n.pt epochs=100 imgsz=640\n\n# Build a new model from YAML, transfer pretrained weights to it and start training\nyolo detect train data=coco8.yaml model=yolov8n.yaml pretrained=yolov8n.pt epochs=100 imgsz=640\n</code></pre>"},{"location":"tasks/detect/#dataset-format","title":"Dataset format","text":"<p>YOLO detection dataset format can be found in detail in the Dataset Guide. To convert your existing dataset from other formats (like COCO etc.) to YOLO format, please use JSON2YOLO tool by Ultralytics.</p>"},{"location":"tasks/detect/#val","title":"Val","text":"<p>Validate trained YOLOv8n model accuracy on the COCO8 dataset. No argument need to passed as the <code>model</code> retains its training <code>data</code> and arguments as model attributes.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, dataset and settings remembered\nmetrics.box.map  # map50-95\nmetrics.box.map50  # map50\nmetrics.box.map75  # map75\nmetrics.box.maps  # a list contains map50-95 of each category\n</code></pre> <pre><code>yolo detect val model=yolov8n.pt  # val official model\nyolo detect val model=path/to/best.pt  # val custom model\n</code></pre>"},{"location":"tasks/detect/#predict","title":"Predict","text":"<p>Use a trained YOLOv8n model to run predictions on images.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Predict with the model\nresults = model(\"https://ultralytics.com/images/bus.jpg\")  # predict on an image\n</code></pre> <pre><code>yolo detect predict model=yolov8n.pt source='https://ultralytics.com/images/bus.jpg'  # predict with official model\nyolo detect predict model=path/to/best.pt source='https://ultralytics.com/images/bus.jpg'  # predict with custom model\n</code></pre> <p>See full <code>predict</code> mode details in the Predict page.</p>"},{"location":"tasks/detect/#export","title":"Export","text":"<p>Export a YOLOv8n model to a different format like ONNX, CoreML, etc.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre> <p>Available YOLOv8 export formats are in the table below. You can export to any format using the <code>format</code> argument, i.e. <code>format='onnx'</code> or <code>format='engine'</code>. You can predict or validate directly on exported models, i.e. <code>yolo predict model=yolov8n.onnx</code>. Usage examples are shown for your model after export completes.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code> <p>See full <code>export</code> details in the Export page.</p>"},{"location":"tasks/detect/#faq","title":"FAQ","text":""},{"location":"tasks/detect/#how-do-i-train-a-yolov8-model-on-my-custom-dataset","title":"How do I train a YOLOv8 model on my custom dataset?","text":"<p>Training a YOLOv8 model on a custom dataset involves a few steps:</p> <ol> <li>Prepare the Dataset: Ensure your dataset is in the YOLO format. For guidance, refer to our Dataset Guide.</li> <li>Load the Model: Use the Ultralytics YOLO library to load a pre-trained model or create a new model from a YAML file.</li> <li>Train the Model: Execute the <code>train</code> method in Python or the <code>yolo detect train</code> command in CLI.</li> </ol> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a pretrained model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Train the model on your custom dataset\nmodel.train(data=\"my_custom_dataset.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code>yolo detect train data=my_custom_dataset.yaml model=yolov8n.pt epochs=100 imgsz=640\n</code></pre> <p>For detailed configuration options, visit the Configuration page.</p>"},{"location":"tasks/detect/#what-pretrained-models-are-available-in-yolov8","title":"What pretrained models are available in YOLOv8?","text":"<p>Ultralytics YOLOv8 offers various pretrained models for object detection, segmentation, and pose estimation. These models are pretrained on the COCO dataset or ImageNet for classification tasks. Here are some of the available models:</p> <ul> <li>YOLOv8n</li> <li>YOLOv8s</li> <li>YOLOv8m</li> <li>YOLOv8l</li> <li>YOLOv8x</li> </ul> <p>For a detailed list and performance metrics, refer to the Models section.</p>"},{"location":"tasks/detect/#how-can-i-validate-the-accuracy-of-my-trained-yolov8-model","title":"How can I validate the accuracy of my trained YOLOv8 model?","text":"<p>To validate the accuracy of your trained YOLOv8 model, you can use the <code>.val()</code> method in Python or the <code>yolo detect val</code> command in CLI. This will provide metrics like mAP50-95, mAP50, and more.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load the model\nmodel = YOLO(\"path/to/best.pt\")\n\n# Validate the model\nmetrics = model.val()\nprint(metrics.box.map)  # mAP50-95\n</code></pre> <pre><code>yolo detect val model=path/to/best.pt\n</code></pre> <p>For more validation details, visit the Val page.</p>"},{"location":"tasks/detect/#what-formats-can-i-export-a-yolov8-model-to","title":"What formats can I export a YOLOv8 model to?","text":"<p>Ultralytics YOLOv8 allows exporting models to various formats such as ONNX, TensorRT, CoreML, and more to ensure compatibility across different platforms and devices.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load the model\nmodel = YOLO(\"yolov8n.pt\")\n\n# Export the model to ONNX format\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n.pt format=onnx\n</code></pre> <p>Check the full list of supported formats and instructions on the Export page.</p>"},{"location":"tasks/detect/#why-should-i-use-ultralytics-yolov8-for-object-detection","title":"Why should I use Ultralytics YOLOv8 for object detection?","text":"<p>Ultralytics YOLOv8 is designed to offer state-of-the-art performance for object detection, segmentation, and pose estimation. Here are some key advantages:</p> <ol> <li>Pretrained Models: Utilize models pretrained on popular datasets like COCO and ImageNet for faster development.</li> <li>High Accuracy: Achieves impressive mAP scores, ensuring reliable object detection.</li> <li>Speed: Optimized for real-time inference, making it ideal for applications requiring swift processing.</li> <li>Flexibility: Export models to various formats like ONNX and TensorRT for deployment across multiple platforms.</li> </ol> <p>Explore our Blog for use cases and success stories showcasing YOLOv8 in action.</p>"},{"location":"tasks/obb/","title":"Oriented Bounding Boxes Object Detection","text":"<p>Oriented object detection goes a step further than object detection and introduce an extra angle to locate objects more accurate in an image.</p> <p>The output of an oriented object detector is a set of rotated bounding boxes that exactly enclose the objects in the image, along with class labels and confidence scores for each box. Object detection is a good choice when you need to identify objects of interest in a scene, but don't need to know exactly where the object is or its exact shape.</p> <p>Tip</p> <p>YOLOv8 OBB models use the <code>-obb</code> suffix, i.e. <code>yolov8n-obb.pt</code> and are pretrained on DOTAv1.</p> Watch: Object Detection using Ultralytics YOLOv8 Oriented Bounding Boxes (YOLOv8-OBB)      Watch: Object Detection with YOLOv8-OBB using Ultralytics HUB"},{"location":"tasks/obb/#visual-samples","title":"Visual Samples","text":"Ships Detection using OBB Vehicle Detection using OBB"},{"location":"tasks/obb/#models","title":"Models","text":"<p>YOLOv8 pretrained OBB models are shown here, which are pretrained on the DOTAv1 dataset.</p> <p>Models download automatically from the latest Ultralytics release on first use.</p> Model size<sup>(pixels) mAP<sup>test50 Speed<sup>CPU ONNX(ms) Speed<sup>A100 TensorRT(ms) params<sup>(M) FLOPs<sup>(B) YOLOv8n-obb 1024 78.0 204.77 3.57 3.1 23.3 YOLOv8s-obb 1024 79.5 424.88 4.07 11.4 76.3 YOLOv8m-obb 1024 80.5 763.48 7.61 26.4 208.6 YOLOv8l-obb 1024 80.7 1278.42 11.83 44.5 433.8 YOLOv8x-obb 1024 81.36 1759.10 13.23 69.5 676.7 <ul> <li>mAP<sup>test</sup> values are for single-model multiscale on DOTAv1 test dataset. Reproduce by <code>yolo val obb data=DOTAv1.yaml device=0 split=test</code> and submit merged results to DOTA evaluation.</li> <li>Speed averaged over DOTAv1 val images using an Amazon EC2 P4d instance. Reproduce by <code>yolo val obb data=DOTAv1.yaml batch=1 device=0|cpu</code></li> </ul>"},{"location":"tasks/obb/#train","title":"Train","text":"<p>Train YOLOv8n-obb on the <code>dota8.yaml</code> dataset for 100 epochs at image size 640. For a full list of available arguments see the Configuration page.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-obb.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n-obb.pt\")  # load a pretrained model (recommended for training)\nmodel = YOLO(\"yolov8n-obb.yaml\").load(\"yolov8n.pt\")  # build from YAML and transfer weights\n\n# Train the model\nresults = model.train(data=\"dota8.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code># Build a new model from YAML and start training from scratch\nyolo obb train data=dota8.yaml model=yolov8n-obb.yaml epochs=100 imgsz=640\n\n# Start training from a pretrained *.pt model\nyolo obb train data=dota8.yaml model=yolov8n-obb.pt epochs=100 imgsz=640\n\n# Build a new model from YAML, transfer pretrained weights to it and start training\nyolo obb train data=dota8.yaml model=yolov8n-obb.yaml pretrained=yolov8n-obb.pt epochs=100 imgsz=640\n</code></pre>"},{"location":"tasks/obb/#dataset-format","title":"Dataset format","text":"<p>OBB dataset format can be found in detail in the Dataset Guide.</p>"},{"location":"tasks/obb/#val","title":"Val","text":"<p>Validate trained YOLOv8n-obb model accuracy on the DOTA8 dataset. No argument need to passed as the <code>model</code> retains its training <code>data</code> and arguments as model attributes.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-obb.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val(data=\"dota8.yaml\")  # no arguments needed, dataset and settings remembered\nmetrics.box.map  # map50-95(B)\nmetrics.box.map50  # map50(B)\nmetrics.box.map75  # map75(B)\nmetrics.box.maps  # a list contains map50-95(B) of each category\n</code></pre> <pre><code>yolo obb val model=yolov8n-obb.pt data=dota8.yaml  # val official model\nyolo obb val model=path/to/best.pt data=path/to/data.yaml  # val custom model\n</code></pre>"},{"location":"tasks/obb/#predict","title":"Predict","text":"<p>Use a trained YOLOv8n-obb model to run predictions on images.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-obb.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Predict with the model\nresults = model(\"https://ultralytics.com/images/bus.jpg\")  # predict on an image\n</code></pre> <pre><code>yolo obb predict model=yolov8n-obb.pt source='https://ultralytics.com/images/bus.jpg'  # predict with official model\nyolo obb predict model=path/to/best.pt source='https://ultralytics.com/images/bus.jpg'  # predict with custom model\n</code></pre> <p>See full <code>predict</code> mode details in the Predict page.</p>"},{"location":"tasks/obb/#export","title":"Export","text":"<p>Export a YOLOv8n-obb model to a different format like ONNX, CoreML, etc.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-obb.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-obb.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre> <p>Available YOLOv8-obb export formats are in the table below. You can export to any format using the <code>format</code> argument, i.e. <code>format='onnx'</code> or <code>format='engine'</code>. You can predict or validate directly on exported models, i.e. <code>yolo predict model=yolov8n-obb.onnx</code>. Usage examples are shown for your model after export completes.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n-obb.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n-obb.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n-obb.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n-obb_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n-obb.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n-obb.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n-obb_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n-obb.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n-obb.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n-obb_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n-obb_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n-obb_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n-obb_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code> <p>See full <code>export</code> details in the Export page.</p>"},{"location":"tasks/obb/#faq","title":"FAQ","text":""},{"location":"tasks/obb/#what-are-oriented-bounding-boxes-obb-and-how-do-they-differ-from-regular-bounding-boxes","title":"What are Oriented Bounding Boxes (OBB) and how do they differ from regular bounding boxes?","text":"<p>Oriented Bounding Boxes (OBB) include an additional angle to enhance object localization accuracy in images. Unlike regular bounding boxes, which are axis-aligned rectangles, OBBs can rotate to fit the orientation of the object better. This is particularly useful for applications requiring precise object placement, such as aerial or satellite imagery (Dataset Guide).</p>"},{"location":"tasks/obb/#how-do-i-train-a-yolov8n-obb-model-using-a-custom-dataset","title":"How do I train a YOLOv8n-obb model using a custom dataset?","text":"<p>To train a YOLOv8n-obb model with a custom dataset, follow the example below using Python or CLI:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a pretrained model\nmodel = YOLO(\"yolov8n-obb.pt\")\n\n# Train the model\nresults = model.train(data=\"path/to/custom_dataset.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code>yolo obb train data=path/to/custom_dataset.yaml model=yolov8n-obb.pt epochs=100 imgsz=640\n</code></pre> <p>For more training arguments, check the Configuration section.</p>"},{"location":"tasks/obb/#what-datasets-can-i-use-for-training-yolov8-obb-models","title":"What datasets can I use for training YOLOv8-OBB models?","text":"<p>YOLOv8-OBB models are pretrained on datasets like DOTAv1 but you can use any dataset formatted for OBB. Detailed information on OBB dataset formats can be found in the Dataset Guide.</p>"},{"location":"tasks/obb/#how-can-i-export-a-yolov8-obb-model-to-onnx-format","title":"How can I export a YOLOv8-OBB model to ONNX format?","text":"<p>Exporting a YOLOv8-OBB model to ONNX format is straightforward using either Python or CLI:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-obb.pt\")\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-obb.pt format=onnx\n</code></pre> <p>For more export formats and details, refer to the Export page.</p>"},{"location":"tasks/obb/#how-do-i-validate-the-accuracy-of-a-yolov8n-obb-model","title":"How do I validate the accuracy of a YOLOv8n-obb model?","text":"<p>To validate a YOLOv8n-obb model, you can use Python or CLI commands as shown below:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-obb.pt\")\n\n# Validate the model\nmetrics = model.val(data=\"dota8.yaml\")\n</code></pre> <pre><code>yolo obb val model=yolov8n-obb.pt data=dota8.yaml\n</code></pre> <p>See full validation details in the Val section.</p>"},{"location":"tasks/pose/","title":"Pose Estimation","text":"<p>Pose estimation is a task that involves identifying the location of specific points in an image, usually referred to as keypoints. The keypoints can represent various parts of the object such as joints, landmarks, or other distinctive features. The locations of the keypoints are usually represented as a set of 2D <code>[x, y]</code> or 3D <code>[x, y, visible]</code> coordinates.</p> <p>The output of a pose estimation model is a set of points that represent the keypoints on an object in the image, usually along with the confidence scores for each point. Pose estimation is a good choice when you need to identify specific parts of an object in a scene, and their location in relation to each other.</p> Watch: Pose Estimation with Ultralytics YOLOv8.      Watch: Pose Estimation with Ultralytics HUB.      <p>Tip</p> <p>YOLOv8 pose models use the <code>-pose</code> suffix, i.e. <code>yolov8n-pose.pt</code>. These models are trained on the COCO keypoints dataset and are suitable for a variety of pose estimation tasks.</p> <p>In the default YOLOv8 pose model, there are 17 keypoints, each representing a different part of the human body. Here is the mapping of each index to its respective body joint:</p> <p>0: Nose 1: Left Eye 2: Right Eye 3: Left Ear 4: Right Ear 5: Left Shoulder 6: Right Shoulder 7: Left Elbow 8: Right Elbow 9: Left Wrist 10: Right Wrist 11: Left Hip 12: Right Hip 13: Left Knee 14: Right Knee 15: Left Ankle 16: Right Ankle</p>"},{"location":"tasks/pose/#models","title":"Models","text":"<p>YOLOv8 pretrained Pose models are shown here. Detect, Segment and Pose models are pretrained on the COCO dataset, while Classify models are pretrained on the ImageNet dataset.</p> <p>Models download automatically from the latest Ultralytics release on first use.</p> Model size<sup>(pixels) mAP<sup>pose50-95 mAP<sup>pose50 Speed<sup>CPU ONNX(ms) Speed<sup>A100 TensorRT(ms) params<sup>(M) FLOPs<sup>(B) YOLOv8n-pose 640 50.4 80.1 131.8 1.18 3.3 9.2 YOLOv8s-pose 640 60.0 86.2 233.2 1.42 11.6 30.2 YOLOv8m-pose 640 65.0 88.8 456.3 2.00 26.4 81.0 YOLOv8l-pose 640 67.6 90.0 784.5 2.59 44.4 168.6 YOLOv8x-pose 640 69.2 90.2 1607.1 3.73 69.4 263.2 YOLOv8x-pose-p6 1280 71.6 91.2 4088.7 10.04 99.1 1066.4 <ul> <li>mAP<sup>val</sup> values are for single-model single-scale on COCO Keypoints val2017 dataset. Reproduce by <code>yolo val pose data=coco-pose.yaml device=0</code></li> <li>Speed averaged over COCO val images using an Amazon EC2 P4d instance. Reproduce by <code>yolo val pose data=coco8-pose.yaml batch=1 device=0|cpu</code></li> </ul>"},{"location":"tasks/pose/#train","title":"Train","text":"<p>Train a YOLOv8-pose model on the COCO128-pose dataset.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n-pose.pt\")  # load a pretrained model (recommended for training)\nmodel = YOLO(\"yolov8n-pose.yaml\").load(\"yolov8n-pose.pt\")  # build from YAML and transfer weights\n\n# Train the model\nresults = model.train(data=\"coco8-pose.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code># Build a new model from YAML and start training from scratch\nyolo pose train data=coco8-pose.yaml model=yolov8n-pose.yaml epochs=100 imgsz=640\n\n# Start training from a pretrained *.pt model\nyolo pose train data=coco8-pose.yaml model=yolov8n-pose.pt epochs=100 imgsz=640\n\n# Build a new model from YAML, transfer pretrained weights to it and start training\nyolo pose train data=coco8-pose.yaml model=yolov8n-pose.yaml pretrained=yolov8n-pose.pt epochs=100 imgsz=640\n</code></pre>"},{"location":"tasks/pose/#dataset-format","title":"Dataset format","text":"<p>YOLO pose dataset format can be found in detail in the Dataset Guide. To convert your existing dataset from other formats (like COCO etc.) to YOLO format, please use JSON2YOLO tool by Ultralytics.</p>"},{"location":"tasks/pose/#val","title":"Val","text":"<p>Validate trained YOLOv8n-pose model accuracy on the COCO128-pose dataset. No argument need to passed as the <code>model</code> retains its training <code>data</code> and arguments as model attributes.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, dataset and settings remembered\nmetrics.box.map  # map50-95\nmetrics.box.map50  # map50\nmetrics.box.map75  # map75\nmetrics.box.maps  # a list contains map50-95 of each category\n</code></pre> <pre><code>yolo pose val model=yolov8n-pose.pt  # val official model\nyolo pose val model=path/to/best.pt  # val custom model\n</code></pre>"},{"location":"tasks/pose/#predict","title":"Predict","text":"<p>Use a trained YOLOv8n-pose model to run predictions on images.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Predict with the model\nresults = model(\"https://ultralytics.com/images/bus.jpg\")  # predict on an image\n</code></pre> <pre><code>yolo pose predict model=yolov8n-pose.pt source='https://ultralytics.com/images/bus.jpg'  # predict with official model\nyolo pose predict model=path/to/best.pt source='https://ultralytics.com/images/bus.jpg'  # predict with custom model\n</code></pre> <p>See full <code>predict</code> mode details in the Predict page.</p>"},{"location":"tasks/pose/#export","title":"Export","text":"<p>Export a YOLOv8n Pose model to a different format like ONNX, CoreML, etc.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-pose.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre> <p>Available YOLOv8-pose export formats are in the table below. You can export to any format using the <code>format</code> argument, i.e. <code>format='onnx'</code> or <code>format='engine'</code>. You can predict or validate directly on exported models, i.e. <code>yolo predict model=yolov8n-pose.onnx</code>. Usage examples are shown for your model after export completes.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n-pose.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n-pose.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n-pose.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n-pose_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n-pose.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n-pose.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n-pose_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n-pose.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n-pose.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n-pose_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n-pose_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n-pose_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n-pose_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code> <p>See full <code>export</code> details in the Export page.</p>"},{"location":"tasks/pose/#faq","title":"FAQ","text":""},{"location":"tasks/pose/#what-is-pose-estimation-with-ultralytics-yolov8-and-how-does-it-work","title":"What is Pose Estimation with Ultralytics YOLOv8 and how does it work?","text":"<p>Pose estimation with Ultralytics YOLOv8 involves identifying specific points, known as keypoints, in an image. These keypoints typically represent joints or other important features of the object. The output includes the <code>[x, y]</code> coordinates and confidence scores for each point. YOLOv8-pose models are specifically designed for this task and use the <code>-pose</code> suffix, such as <code>yolov8n-pose.pt</code>. These models are pre-trained on datasets like COCO keypoints and can be used for various pose estimation tasks. For more information, visit the Pose Estimation Page.</p>"},{"location":"tasks/pose/#how-can-i-train-a-yolov8-pose-model-on-a-custom-dataset","title":"How can I train a YOLOv8-pose model on a custom dataset?","text":"<p>Training a YOLOv8-pose model on a custom dataset involves loading a model, either a new model defined by a YAML file or a pre-trained model. You can then start the training process using your specified dataset and parameters.</p> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n-pose.pt\")  # load a pretrained model (recommended for training)\n\n# Train the model\nresults = model.train(data=\"your-dataset.yaml\", epochs=100, imgsz=640)\n</code></pre> <p>For comprehensive details on training, refer to the Train Section.</p>"},{"location":"tasks/pose/#how-do-i-validate-a-trained-yolov8-pose-model","title":"How do I validate a trained YOLOv8-pose model?","text":"<p>Validation of a YOLOv8-pose model involves assessing its accuracy using the same dataset parameters retained during training. Here's an example:</p> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, dataset and settings remembered\n</code></pre> <p>For more information, visit the Val Section.</p>"},{"location":"tasks/pose/#can-i-export-a-yolov8-pose-model-to-other-formats-and-how","title":"Can I export a YOLOv8-pose model to other formats, and how?","text":"<p>Yes, you can export a YOLOv8-pose model to various formats like ONNX, CoreML, TensorRT, and more. This can be done using either Python or the Command Line Interface (CLI).</p> <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-pose.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <p>Refer to the Export Section for more details.</p>"},{"location":"tasks/pose/#what-are-the-available-ultralytics-yolov8-pose-models-and-their-performance-metrics","title":"What are the available Ultralytics YOLOv8-pose models and their performance metrics?","text":"<p>Ultralytics YOLOv8 offers various pretrained pose models such as YOLOv8n-pose, YOLOv8s-pose, YOLOv8m-pose, among others. These models differ in size, accuracy (mAP), and speed. For instance, the YOLOv8n-pose model achieves a mAP<sup>pose</sup>50-95 of 50.4 and an mAP<sup>pose</sup>50 of 80.1. For a complete list and performance details, visit the Models Section.</p>"},{"location":"tasks/segment/","title":"Instance Segmentation","text":"<p>Instance segmentation goes a step further than object detection and involves identifying individual objects in an image and segmenting them from the rest of the image.</p> <p>The output of an instance segmentation model is a set of masks or contours that outline each object in the image, along with class labels and confidence scores for each object. Instance segmentation is useful when you need to know not only where objects are in an image, but also what their exact shape is.</p> <p> Watch: Run Segmentation with Pre-Trained Ultralytics YOLOv8 Model in Python. </p> <p>Tip</p> <p>YOLOv8 Segment models use the <code>-seg</code> suffix, i.e. <code>yolov8n-seg.pt</code> and are pretrained on COCO.</p>"},{"location":"tasks/segment/#models","title":"Models","text":"<p>YOLOv8 pretrained Segment models are shown here. Detect, Segment and Pose models are pretrained on the COCO dataset, while Classify models are pretrained on the ImageNet dataset.</p> <p>Models download automatically from the latest Ultralytics release on first use.</p> Model size<sup>(pixels) mAP<sup>box50-95 mAP<sup>mask50-95 Speed<sup>CPU ONNX(ms) Speed<sup>A100 TensorRT(ms) params<sup>(M) FLOPs<sup>(B) YOLOv8n-seg 640 36.7 30.5 96.1 1.21 3.4 12.6 YOLOv8s-seg 640 44.6 36.8 155.7 1.47 11.8 42.6 YOLOv8m-seg 640 49.9 40.8 317.0 2.18 27.3 110.2 YOLOv8l-seg 640 52.3 42.6 572.4 2.79 46.0 220.5 YOLOv8x-seg 640 53.4 43.4 712.1 4.02 71.8 344.1 <ul> <li>mAP<sup>val</sup> values are for single-model single-scale on COCO val2017 dataset. Reproduce by <code>yolo val segment data=coco.yaml device=0</code></li> <li>Speed averaged over COCO val images using an Amazon EC2 P4d instance. Reproduce by <code>yolo val segment data=coco8-seg.yaml batch=1 device=0|cpu</code></li> </ul>"},{"location":"tasks/segment/#train","title":"Train","text":"<p>Train YOLOv8n-seg on the COCO128-seg dataset for 100 epochs at image size 640. For a full list of available arguments see the Configuration page.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-seg.yaml\")  # build a new model from YAML\nmodel = YOLO(\"yolov8n-seg.pt\")  # load a pretrained model (recommended for training)\nmodel = YOLO(\"yolov8n-seg.yaml\").load(\"yolov8n.pt\")  # build from YAML and transfer weights\n\n# Train the model\nresults = model.train(data=\"coco8-seg.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code># Build a new model from YAML and start training from scratch\nyolo segment train data=coco8-seg.yaml model=yolov8n-seg.yaml epochs=100 imgsz=640\n\n# Start training from a pretrained *.pt model\nyolo segment train data=coco8-seg.yaml model=yolov8n-seg.pt epochs=100 imgsz=640\n\n# Build a new model from YAML, transfer pretrained weights to it and start training\nyolo segment train data=coco8-seg.yaml model=yolov8n-seg.yaml pretrained=yolov8n-seg.pt epochs=100 imgsz=640\n</code></pre>"},{"location":"tasks/segment/#dataset-format","title":"Dataset format","text":"<p>YOLO segmentation dataset format can be found in detail in the Dataset Guide. To convert your existing dataset from other formats (like COCO etc.) to YOLO format, please use JSON2YOLO tool by Ultralytics.</p>"},{"location":"tasks/segment/#val","title":"Val","text":"<p>Validate trained YOLOv8n-seg model accuracy on the COCO128-seg dataset. No argument need to passed as the <code>model</code> retains its training <code>data</code> and arguments as model attributes.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-seg.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Validate the model\nmetrics = model.val()  # no arguments needed, dataset and settings remembered\nmetrics.box.map  # map50-95(B)\nmetrics.box.map50  # map50(B)\nmetrics.box.map75  # map75(B)\nmetrics.box.maps  # a list contains map50-95(B) of each category\nmetrics.seg.map  # map50-95(M)\nmetrics.seg.map50  # map50(M)\nmetrics.seg.map75  # map75(M)\nmetrics.seg.maps  # a list contains map50-95(M) of each category\n</code></pre> <pre><code>yolo segment val model=yolov8n-seg.pt  # val official model\nyolo segment val model=path/to/best.pt  # val custom model\n</code></pre>"},{"location":"tasks/segment/#predict","title":"Predict","text":"<p>Use a trained YOLOv8n-seg model to run predictions on images.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-seg.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom model\n\n# Predict with the model\nresults = model(\"https://ultralytics.com/images/bus.jpg\")  # predict on an image\n</code></pre> <pre><code>yolo segment predict model=yolov8n-seg.pt source='https://ultralytics.com/images/bus.jpg'  # predict with official model\nyolo segment predict model=path/to/best.pt source='https://ultralytics.com/images/bus.jpg'  # predict with custom model\n</code></pre> <p>See full <code>predict</code> mode details in the Predict page.</p>"},{"location":"tasks/segment/#export","title":"Export","text":"<p>Export a YOLOv8n-seg model to a different format like ONNX, CoreML, etc.</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO(\"yolov8n-seg.pt\")  # load an official model\nmodel = YOLO(\"path/to/best.pt\")  # load a custom trained model\n\n# Export the model\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-seg.pt format=onnx  # export official model\nyolo export model=path/to/best.pt format=onnx  # export custom trained model\n</code></pre> <p>Available YOLOv8-seg export formats are in the table below. You can export to any format using the <code>format</code> argument, i.e. <code>format='onnx'</code> or <code>format='engine'</code>. You can predict or validate directly on exported models, i.e. <code>yolo predict model=yolov8n-seg.onnx</code>. Usage examples are shown for your model after export completes.</p> Format <code>format</code> Argument Model Metadata Arguments PyTorch - <code>yolov8n-seg.pt</code> \u2705 - TorchScript <code>torchscript</code> <code>yolov8n-seg.torchscript</code> \u2705 <code>imgsz</code>, <code>optimize</code>, <code>batch</code> ONNX <code>onnx</code> <code>yolov8n-seg.onnx</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>opset</code>, <code>batch</code> OpenVINO <code>openvino</code> <code>yolov8n-seg_openvino_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TensorRT <code>engine</code> <code>yolov8n-seg.engine</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>dynamic</code>, <code>simplify</code>, <code>workspace</code>, <code>int8</code>, <code>batch</code> CoreML <code>coreml</code> <code>yolov8n-seg.mlpackage</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>nms</code>, <code>batch</code> TF SavedModel <code>saved_model</code> <code>yolov8n-seg_saved_model/</code> \u2705 <code>imgsz</code>, <code>keras</code>, <code>int8</code>, <code>batch</code> TF GraphDef <code>pb</code> <code>yolov8n-seg.pb</code> \u274c <code>imgsz</code>, <code>batch</code> TF Lite <code>tflite</code> <code>yolov8n-seg.tflite</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> TF Edge TPU <code>edgetpu</code> <code>yolov8n-seg_edgetpu.tflite</code> \u2705 <code>imgsz</code> TF.js <code>tfjs</code> <code>yolov8n-seg_web_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>int8</code>, <code>batch</code> PaddlePaddle <code>paddle</code> <code>yolov8n-seg_paddle_model/</code> \u2705 <code>imgsz</code>, <code>batch</code> NCNN <code>ncnn</code> <code>yolov8n-seg_ncnn_model/</code> \u2705 <code>imgsz</code>, <code>half</code>, <code>batch</code> <p>See full <code>export</code> details in the Export page.</p>"},{"location":"tasks/segment/#faq","title":"FAQ","text":""},{"location":"tasks/segment/#how-do-i-train-a-yolov8-segmentation-model-on-a-custom-dataset","title":"How do I train a YOLOv8 segmentation model on a custom dataset?","text":"<p>To train a YOLOv8 segmentation model on a custom dataset, you first need to prepare your dataset in the YOLO segmentation format. You can use tools like JSON2YOLO to convert datasets from other formats. Once your dataset is ready, you can train the model using Python or CLI commands:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a pretrained YOLOv8 segment model\nmodel = YOLO(\"yolov8n-seg.pt\")\n\n# Train the model\nresults = model.train(data=\"path/to/your_dataset.yaml\", epochs=100, imgsz=640)\n</code></pre> <pre><code>yolo segment train data=path/to/your_dataset.yaml model=yolov8n-seg.pt epochs=100 imgsz=640\n</code></pre> <p>Check the Configuration page for more available arguments.</p>"},{"location":"tasks/segment/#what-is-the-difference-between-object-detection-and-instance-segmentation-in-yolov8","title":"What is the difference between object detection and instance segmentation in YOLOv8?","text":"<p>Object detection identifies and localizes objects within an image by drawing bounding boxes around them, whereas instance segmentation not only identifies the bounding boxes but also delineates the exact shape of each object. YOLOv8 instance segmentation models provide masks or contours that outline each detected object, which is particularly useful for tasks where knowing the precise shape of objects is important, such as medical imaging or autonomous driving.</p>"},{"location":"tasks/segment/#why-use-yolov8-for-instance-segmentation","title":"Why use YOLOv8 for instance segmentation?","text":"<p>Ultralytics YOLOv8 is a state-of-the-art model recognized for its high accuracy and real-time performance, making it ideal for instance segmentation tasks. YOLOv8 Segment models come pretrained on the COCO dataset, ensuring robust performance across a variety of objects. Additionally, YOLOv8 supports training, validation, prediction, and export functionalities with seamless integration, making it highly versatile for both research and industry applications.</p>"},{"location":"tasks/segment/#how-do-i-load-and-validate-a-pretrained-yolov8-segmentation-model","title":"How do I load and validate a pretrained YOLOv8 segmentation model?","text":"<p>Loading and validating a pretrained YOLOv8 segmentation model is straightforward. Here's how you can do it using both Python and CLI:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a pretrained model\nmodel = YOLO(\"yolov8n-seg.pt\")\n\n# Validate the model\nmetrics = model.val()\nprint(\"Mean Average Precision for boxes:\", metrics.box.map)\nprint(\"Mean Average Precision for masks:\", metrics.seg.map)\n</code></pre> <pre><code>yolo segment val model=yolov8n-seg.pt\n</code></pre> <p>These steps will provide you with validation metrics like Mean Average Precision (mAP), crucial for assessing model performance.</p>"},{"location":"tasks/segment/#how-can-i-export-a-yolov8-segmentation-model-to-onnx-format","title":"How can I export a YOLOv8 segmentation model to ONNX format?","text":"<p>Exporting a YOLOv8 segmentation model to ONNX format is simple and can be done using Python or CLI commands:</p> <p>Example</p> PythonCLI <pre><code>from ultralytics import YOLO\n\n# Load a pretrained model\nmodel = YOLO(\"yolov8n-seg.pt\")\n\n# Export the model to ONNX format\nmodel.export(format=\"onnx\")\n</code></pre> <pre><code>yolo export model=yolov8n-seg.pt format=onnx\n</code></pre> <p>For more details on exporting to various formats, refer to the Export page.</p>"}]}